// Package jamfproapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package jamfproapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAuth request
	GetAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthCurrent request
	PostAuthCurrent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthInvalidateToken request
	PostAuthInvalidateToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthKeepAlive request
	PostAuthKeepAlive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthTokens request
	PostAuthTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDevicesExtensionAttributes request
	GetDevicesExtensionAttributes(ctx context.Context, params *GetDevicesExtensionAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInventoryPreload request
	DeleteInventoryPreload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInventoryPreload request
	GetInventoryPreload(ctx context.Context, params *GetInventoryPreloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInventoryPreload request with any body
	PostInventoryPreloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInventoryPreload(ctx context.Context, body PostInventoryPreloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInventoryPreloadCsvTemplate request
	GetInventoryPreloadCsvTemplate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInventoryPreloadHistory request
	GetInventoryPreloadHistory(ctx context.Context, params *GetInventoryPreloadHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInventoryPreloadHistoryNotes request with any body
	PostInventoryPreloadHistoryNotesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInventoryPreloadHistoryNotes(ctx context.Context, body PostInventoryPreloadHistoryNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInventoryPreloadValidateCsv request with any body
	PostInventoryPreloadValidateCsvWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInventoryPreloadId request
	DeleteInventoryPreloadId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInventoryPreloadId request
	GetInventoryPreloadId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInventoryPreloadId request with any body
	PutInventoryPreloadIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInventoryPreloadId(ctx context.Context, id int, body PutInventoryPreloadIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLdapGroups request
	GetLdapGroups(ctx context.Context, params *GetLdapGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLdapServers request
	GetLdapServers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotificationsAlerts request
	GetNotificationsAlerts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNotificationsAlertsId request
	DeleteNotificationsAlertsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNotificationsAlertsTypeId request
	DeleteNotificationsAlertsTypeId(ctx context.Context, pType NotificationType, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPatchDisclaimerAgree request
	PostPatchDisclaimerAgree(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatchObjPolicyId request
	GetPatchObjPolicyId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatchObjPolicyIdLogsEligibleRetryCount request
	GetPatchObjPolicyIdLogsEligibleRetryCount(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatchObjPolicyIdSoftwareTitleConfigurationId request
	GetPatchObjPolicyIdSoftwareTitleConfigurationId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatchObjSoftwareTitleIdPolicies request
	GetPatchObjSoftwareTitleIdPolicies(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatchObjSoftwareTitleConfigurationId request
	GetPatchObjSoftwareTitleConfigurationId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatchObjId request
	GetPatchObjId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPatchObjId request with any body
	PutPatchObjIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPatchObjId(ctx context.Context, id int, body PutPatchObjIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatchObjIdVersions request
	GetPatchObjIdVersions(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatchObjsPolicyId request
	GetPatchObjsPolicyId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatchOnDashboard request
	GetPatchOnDashboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatchPatchPolicies request
	GetPatchPatchPolicies(ctx context.Context, params *GetPatchPatchPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePatchPatchPoliciesIdDashboard request
	DeletePatchPatchPoliciesIdDashboard(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatchPatchPoliciesIdDashboard request
	GetPatchPatchPoliciesIdDashboard(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPatchPatchPoliciesIdDashboard request
	PostPatchPatchPoliciesIdDashboard(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatchPatchPoliciesIdLogs request
	GetPatchPatchPoliciesIdLogs(ctx context.Context, id int, params *GetPatchPatchPoliciesIdLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPatchRetryPolicy request with any body
	PostPatchRetryPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPatchRetryPolicy(ctx context.Context, body PostPatchRetryPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPatchSearchActivePatchHistory request with any body
	PostPatchSearchActivePatchHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPatchSearchActivePatchHistory(ctx context.Context, body PostPatchSearchActivePatchHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPatchSearchPatchPolicyLogs request with any body
	PostPatchSearchPatchPolicyLogsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPatchSearchPatchPolicyLogs(ctx context.Context, body PostPatchSearchPatchPolicyLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPatchSvcDisclaimerAgree request
	PostPatchSvcDisclaimerAgree(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPatchSvcRetryPolicy request with any body
	PostPatchSvcRetryPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPatchSvcRetryPolicy(ctx context.Context, body PostPatchSvcRetryPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatchId request
	GetPatchId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPatchId request with any body
	PutPatchIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPatchId(ctx context.Context, id int, body PutPatchIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPatchIdVersions request
	GetPatchIdVersions(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewComputers request
	GetPreviewComputers(ctx context.Context, params *GetPreviewComputersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewEnrollmentAccessGroups request
	GetPreviewEnrollmentAccessGroups(ctx context.Context, params *GetPreviewEnrollmentAccessGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPreviewEnrollmentAccessGroups request with any body
	PostPreviewEnrollmentAccessGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPreviewEnrollmentAccessGroups(ctx context.Context, body PostPreviewEnrollmentAccessGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePreviewEnrollmentAccessGroupsId request
	DeletePreviewEnrollmentAccessGroupsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewEnrollmentAccessGroupsId request
	GetPreviewEnrollmentAccessGroupsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPreviewEnrollmentAccessGroupsId request with any body
	PutPreviewEnrollmentAccessGroupsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPreviewEnrollmentAccessGroupsId(ctx context.Context, id string, body PutPreviewEnrollmentAccessGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPreviewMdmCommands request with any body
	PostPreviewMdmCommandsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPreviewMdmCommands(ctx context.Context, body PostPreviewMdmCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewRemoteAdministrationConfigurations request
	GetPreviewRemoteAdministrationConfigurations(ctx context.Context, params *GetPreviewRemoteAdministrationConfigurationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPreviewRemoteAdministrationConfigurationsTeamViewer request with any body
	PostPreviewRemoteAdministrationConfigurationsTeamViewerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPreviewRemoteAdministrationConfigurationsTeamViewer(ctx context.Context, body PostPreviewRemoteAdministrationConfigurationsTeamViewerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessions request
	GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessions(ctx context.Context, configurationId string, params *GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessions request with any body
	PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsWithBody(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessions(ctx context.Context, configurationId string, body PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionId request
	GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionId(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClose request
	PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClose(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotification request
	PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotification(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatus request
	GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatus(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePreviewRemoteAdministrationConfigurationsTeamViewerId request
	DeletePreviewRemoteAdministrationConfigurationsTeamViewerId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewRemoteAdministrationConfigurationsTeamViewerId request
	GetPreviewRemoteAdministrationConfigurationsTeamViewerId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPreviewRemoteAdministrationConfigurationsTeamViewerId request with any body
	PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPreviewRemoteAdministrationConfigurationsTeamViewerId(ctx context.Context, id string, body PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatus request
	GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSelfServiceBrandingImages request with any body
	PostSelfServiceBrandingImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSettingsIssueTomcatSslCertificate request
	PostSettingsIssueTomcatSslCertificate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsObjPolicyProperties request
	GetSettingsObjPolicyProperties(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSettingsObjPolicyProperties request with any body
	PutSettingsObjPolicyPropertiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSettingsObjPolicyProperties(ctx context.Context, body PutSettingsObjPolicyPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettingsSites request
	GetSettingsSites(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStartupStatus request
	GetStartupStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemInitialize request with any body
	PostSystemInitializeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemInitialize(ctx context.Context, body PostSystemInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemInitializeDatabaseConnection request with any body
	PostSystemInitializeDatabaseConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemInitializeDatabaseConnection(ctx context.Context, body PostSystemInitializeDatabaseConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserObjPreferenceKey request
	DeleteUserObjPreferenceKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserObjPreferenceKey request
	GetUserObjPreferenceKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserObjPreferenceKey request with any body
	PutUserObjPreferenceKeyWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUserObjPreferenceKey(ctx context.Context, key string, body PutUserObjPreferenceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserUpdateSession request with any body
	PostUserUpdateSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUpdateSession(ctx context.Context, body PostUserUpdateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AdueSessionTokenSettings request
	GetV1AdueSessionTokenSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1AdueSessionTokenSettings request with any body
	PutV1AdueSessionTokenSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1AdueSessionTokenSettings(ctx context.Context, body PutV1AdueSessionTokenSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AdvancedMobileDeviceSearches request
	GetV1AdvancedMobileDeviceSearches(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1AdvancedMobileDeviceSearches request with any body
	PostV1AdvancedMobileDeviceSearchesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1AdvancedMobileDeviceSearches(ctx context.Context, body PostV1AdvancedMobileDeviceSearchesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AdvancedMobileDeviceSearchesChoices request
	GetV1AdvancedMobileDeviceSearchesChoices(ctx context.Context, params *GetV1AdvancedMobileDeviceSearchesChoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1AdvancedMobileDeviceSearchesDeleteMultiple request with any body
	PostV1AdvancedMobileDeviceSearchesDeleteMultipleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1AdvancedMobileDeviceSearchesDeleteMultiple(ctx context.Context, body PostV1AdvancedMobileDeviceSearchesDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1AdvancedMobileDeviceSearchesId request
	DeleteV1AdvancedMobileDeviceSearchesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AdvancedMobileDeviceSearchesId request
	GetV1AdvancedMobileDeviceSearchesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1AdvancedMobileDeviceSearchesId request with any body
	PutV1AdvancedMobileDeviceSearchesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1AdvancedMobileDeviceSearchesId(ctx context.Context, id string, body PutV1AdvancedMobileDeviceSearchesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AdvancedUserContentSearches request
	GetV1AdvancedUserContentSearches(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1AdvancedUserContentSearches request with any body
	PostV1AdvancedUserContentSearchesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1AdvancedUserContentSearches(ctx context.Context, body PostV1AdvancedUserContentSearchesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1AdvancedUserContentSearchesId request
	DeleteV1AdvancedUserContentSearchesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AdvancedUserContentSearchesId request
	GetV1AdvancedUserContentSearchesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1AdvancedUserContentSearchesId request with any body
	PutV1AdvancedUserContentSearchesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1AdvancedUserContentSearchesId(ctx context.Context, id string, body PutV1AdvancedUserContentSearchesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AppDynamicsScriptConfiguration request
	GetV1AppDynamicsScriptConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AppRequestFormInputFields request
	GetV1AppRequestFormInputFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1AppRequestFormInputFields request with any body
	PostV1AppRequestFormInputFieldsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1AppRequestFormInputFields(ctx context.Context, body PostV1AppRequestFormInputFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1AppRequestFormInputFields request with any body
	PutV1AppRequestFormInputFieldsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1AppRequestFormInputFields(ctx context.Context, body PutV1AppRequestFormInputFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1AppRequestFormInputFieldsId request
	DeleteV1AppRequestFormInputFieldsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AppRequestFormInputFieldsId request
	GetV1AppRequestFormInputFieldsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1AppRequestFormInputFieldsId request with any body
	PutV1AppRequestFormInputFieldsIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1AppRequestFormInputFieldsId(ctx context.Context, id int, body PutV1AppRequestFormInputFieldsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AppRequestSettings request
	GetV1AppRequestSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1AppRequestSettings request with any body
	PutV1AppRequestSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1AppRequestSettings(ctx context.Context, body PutV1AppRequestSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AppStoreCountryCodes request
	GetV1AppStoreCountryCodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Auth request
	GetV1Auth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1AuthInvalidateToken request
	PostV1AuthInvalidateToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1AuthKeepAlive request
	PostV1AuthKeepAlive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1AuthToken request
	PostV1AuthToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1AzureAdMigrationReports request with any body
	PostV1AzureAdMigrationReportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1AzureAdMigrationReports(ctx context.Context, body PostV1AzureAdMigrationReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AzureAdMigrationReportsPending request
	GetV1AzureAdMigrationReportsPending(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AzureAdMigrationReportsId request
	GetV1AzureAdMigrationReportsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AzureAdMigrationReportsIdDownload request
	GetV1AzureAdMigrationReportsIdDownload(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Buildings request
	GetV1Buildings(ctx context.Context, params *GetV1BuildingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1Buildings request with any body
	PostV1BuildingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Buildings(ctx context.Context, body PostV1BuildingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1BuildingsDeleteMultiple request with any body
	PostV1BuildingsDeleteMultipleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1BuildingsDeleteMultiple(ctx context.Context, body PostV1BuildingsDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1BuildingsId request
	DeleteV1BuildingsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1BuildingsId request
	GetV1BuildingsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1BuildingsId request with any body
	PutV1BuildingsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1BuildingsId(ctx context.Context, id string, body PutV1BuildingsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1BuildingsIdHistory request
	GetV1BuildingsIdHistory(ctx context.Context, id string, params *GetV1BuildingsIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1BuildingsIdHistory request with any body
	PostV1BuildingsIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1BuildingsIdHistory(ctx context.Context, id string, body PostV1BuildingsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1CacheSettings request
	GetV1CacheSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1CacheSettings request with any body
	PutV1CacheSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1CacheSettings(ctx context.Context, body PutV1CacheSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Categories request
	GetV1Categories(ctx context.Context, params *GetV1CategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1Categories request with any body
	PostV1CategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Categories(ctx context.Context, body PostV1CategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1CategoriesDeleteMultiple request with any body
	PostV1CategoriesDeleteMultipleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1CategoriesDeleteMultiple(ctx context.Context, body PostV1CategoriesDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1CategoriesId request
	DeleteV1CategoriesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1CategoriesId request
	GetV1CategoriesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1CategoriesId request with any body
	PutV1CategoriesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1CategoriesId(ctx context.Context, id string, body PutV1CategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1CategoriesIdHistory request
	GetV1CategoriesIdHistory(ctx context.Context, id string, params *GetV1CategoriesIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1CategoriesIdHistory request with any body
	PostV1CategoriesIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1CategoriesIdHistory(ctx context.Context, id string, body PostV1CategoriesIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ClassicLdapId request
	GetV1ClassicLdapId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1CloudAzure request with any body
	PostV1CloudAzureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1CloudAzure(ctx context.Context, body PostV1CloudAzureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1CloudAzureDefaultsMappings request
	GetV1CloudAzureDefaultsMappings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1CloudAzureDefaultsServerConfiguration request
	GetV1CloudAzureDefaultsServerConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1CloudAzureId request
	DeleteV1CloudAzureId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1CloudAzureId request
	GetV1CloudAzureId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1CloudAzureId request with any body
	PutV1CloudAzureIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1CloudAzureId(ctx context.Context, id string, body PutV1CloudAzureIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1CloudIdp request
	GetV1CloudIdp(ctx context.Context, params *GetV1CloudIdpParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1CloudIdpExport request with any body
	PostV1CloudIdpExportWithBody(ctx context.Context, params *PostV1CloudIdpExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1CloudIdpExport(ctx context.Context, params *PostV1CloudIdpExportParams, body PostV1CloudIdpExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1CloudIdpId request
	GetV1CloudIdpId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1CloudIdpIdHistory request
	GetV1CloudIdpIdHistory(ctx context.Context, id string, params *GetV1CloudIdpIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1CloudIdpIdHistory request with any body
	PostV1CloudIdpIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1CloudIdpIdHistory(ctx context.Context, id string, body PostV1CloudIdpIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1CloudIdpIdTestGroup request with any body
	PostV1CloudIdpIdTestGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1CloudIdpIdTestGroup(ctx context.Context, id string, body PostV1CloudIdpIdTestGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1CloudIdpIdTestUser request with any body
	PostV1CloudIdpIdTestUserWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1CloudIdpIdTestUser(ctx context.Context, id string, body PostV1CloudIdpIdTestUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1CloudIdpIdTestUserMembership request with any body
	PostV1CloudIdpIdTestUserMembershipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1CloudIdpIdTestUserMembership(ctx context.Context, id string, body PostV1CloudIdpIdTestUserMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ComputerInventoryCollectionSettings request
	GetV1ComputerInventoryCollectionSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ComputerInventoryCollectionSettings request with any body
	PatchV1ComputerInventoryCollectionSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ComputerInventoryCollectionSettings(ctx context.Context, body PatchV1ComputerInventoryCollectionSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ComputerInventoryCollectionSettingsCustomPath request with any body
	PostV1ComputerInventoryCollectionSettingsCustomPathWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ComputerInventoryCollectionSettingsCustomPath(ctx context.Context, body PostV1ComputerInventoryCollectionSettingsCustomPathJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ComputerInventoryCollectionSettingsCustomPathId request
	DeleteV1ComputerInventoryCollectionSettingsCustomPathId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ComputerPrestages request
	GetV1ComputerPrestages(ctx context.Context, params *GetV1ComputerPrestagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ComputerPrestages request with any body
	PostV1ComputerPrestagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ComputerPrestages(ctx context.Context, body PostV1ComputerPrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ComputerPrestagesScope request
	GetV1ComputerPrestagesScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ComputerPrestagesId request
	DeleteV1ComputerPrestagesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ComputerPrestagesId request
	GetV1ComputerPrestagesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ComputerPrestagesId request with any body
	PutV1ComputerPrestagesIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ComputerPrestagesId(ctx context.Context, id int, body PutV1ComputerPrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ComputerPrestagesIdScope request with any body
	DeleteV1ComputerPrestagesIdScopeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV1ComputerPrestagesIdScope(ctx context.Context, id int, body DeleteV1ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ComputerPrestagesIdScope request
	GetV1ComputerPrestagesIdScope(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ComputerPrestagesIdScope request with any body
	PostV1ComputerPrestagesIdScopeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ComputerPrestagesIdScope(ctx context.Context, id int, body PostV1ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ComputerPrestagesIdScope request with any body
	PutV1ComputerPrestagesIdScopeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ComputerPrestagesIdScope(ctx context.Context, id int, body PutV1ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ComputersInventory request
	GetV1ComputersInventory(ctx context.Context, params *GetV1ComputersInventoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ComputersInventoryDetailId request
	GetV1ComputersInventoryDetailId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1ComputersInventoryDetailId request with any body
	PatchV1ComputersInventoryDetailIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1ComputersInventoryDetailId(ctx context.Context, id string, body PatchV1ComputersInventoryDetailIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ComputersInventoryId request
	DeleteV1ComputersInventoryId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ComputersInventoryId request
	GetV1ComputersInventoryId(ctx context.Context, id string, params *GetV1ComputersInventoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ComputersInventoryIdAttachments request with any body
	PostV1ComputersInventoryIdAttachmentsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ComputersInventoryIdAttachmentsAttachmentId request
	DeleteV1ComputersInventoryIdAttachmentsAttachmentId(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ComputersInventoryIdAttachmentsAttachmentId request
	GetV1ComputersInventoryIdAttachmentsAttachmentId(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ComputersInventoryIdViewRecoveryLockPassword request
	GetV1ComputersInventoryIdViewRecoveryLockPassword(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ComputersIdRecalculateSmartGroups request
	PostV1ComputersIdRecalculateSmartGroups(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceId request
	GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceId(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceId request
	GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceId(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1CsaToken request
	DeleteV1CsaToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1CsaToken request
	GetV1CsaToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1CsaToken request with any body
	PostV1CsaTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1CsaToken(ctx context.Context, body PostV1CsaTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1CsaToken request with any body
	PutV1CsaTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1CsaToken(ctx context.Context, body PutV1CsaTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Departments request
	GetV1Departments(ctx context.Context, params *GetV1DepartmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1Departments request with any body
	PostV1DepartmentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Departments(ctx context.Context, body PostV1DepartmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1DepartmentsDeleteMultiple request with any body
	PostV1DepartmentsDeleteMultipleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1DepartmentsDeleteMultiple(ctx context.Context, body PostV1DepartmentsDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1DepartmentsId request
	DeleteV1DepartmentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DepartmentsId request
	GetV1DepartmentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1DepartmentsId request with any body
	PutV1DepartmentsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1DepartmentsId(ctx context.Context, id string, body PutV1DepartmentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DepartmentsIdHistory request
	GetV1DepartmentsIdHistory(ctx context.Context, id string, params *GetV1DepartmentsIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1DepartmentsIdHistory request with any body
	PostV1DepartmentsIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1DepartmentsIdHistory(ctx context.Context, id string, body PostV1DepartmentsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1DeployPackage request with any body
	PostV1DeployPackageWithBody(ctx context.Context, params *PostV1DeployPackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1DeployPackage(ctx context.Context, params *PostV1DeployPackageParams, body PostV1DeployPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DeviceCommunicationSettings request
	GetV1DeviceCommunicationSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1DeviceCommunicationSettings request with any body
	PutV1DeviceCommunicationSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1DeviceCommunicationSettings(ctx context.Context, body PutV1DeviceCommunicationSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DeviceCommunicationSettingsHistory request
	GetV1DeviceCommunicationSettingsHistory(ctx context.Context, params *GetV1DeviceCommunicationSettingsHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1DeviceCommunicationSettingsHistory request with any body
	PostV1DeviceCommunicationSettingsHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1DeviceCommunicationSettingsHistory(ctx context.Context, body PostV1DeviceCommunicationSettingsHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DeviceEnrollments request
	GetV1DeviceEnrollments(ctx context.Context, params *GetV1DeviceEnrollmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DeviceEnrollmentsPublicKey request
	GetV1DeviceEnrollmentsPublicKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DeviceEnrollmentsSyncs request
	GetV1DeviceEnrollmentsSyncs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1DeviceEnrollmentsUploadToken request with any body
	PostV1DeviceEnrollmentsUploadTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1DeviceEnrollmentsUploadToken(ctx context.Context, body PostV1DeviceEnrollmentsUploadTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1DeviceEnrollmentsId request
	DeleteV1DeviceEnrollmentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DeviceEnrollmentsId request
	GetV1DeviceEnrollmentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1DeviceEnrollmentsId request with any body
	PutV1DeviceEnrollmentsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1DeviceEnrollmentsId(ctx context.Context, id string, body PutV1DeviceEnrollmentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DeviceEnrollmentsIdDevices request
	GetV1DeviceEnrollmentsIdDevices(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1DeviceEnrollmentsIdDisown request with any body
	PostV1DeviceEnrollmentsIdDisownWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1DeviceEnrollmentsIdDisown(ctx context.Context, id string, body PostV1DeviceEnrollmentsIdDisownJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DeviceEnrollmentsIdHistory request
	GetV1DeviceEnrollmentsIdHistory(ctx context.Context, id string, params *GetV1DeviceEnrollmentsIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1DeviceEnrollmentsIdHistory request with any body
	PostV1DeviceEnrollmentsIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1DeviceEnrollmentsIdHistory(ctx context.Context, id string, body PostV1DeviceEnrollmentsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DeviceEnrollmentsIdSyncs request
	GetV1DeviceEnrollmentsIdSyncs(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DeviceEnrollmentsIdSyncsLatest request
	GetV1DeviceEnrollmentsIdSyncsLatest(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1DeviceEnrollmentsIdUploadToken request with any body
	PutV1DeviceEnrollmentsIdUploadTokenWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1DeviceEnrollmentsIdUploadToken(ctx context.Context, id string, body PutV1DeviceEnrollmentsIdUploadTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Ebooks request
	GetV1Ebooks(ctx context.Context, params *GetV1EbooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EbooksId request
	GetV1EbooksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EbooksIdScope request
	GetV1EbooksIdScope(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Engage request
	GetV1Engage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1Engage request with any body
	PutV1EngageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1Engage(ctx context.Context, body PutV1EngageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EngageHistory request
	GetV1EngageHistory(ctx context.Context, params *GetV1EngageHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1EngageHistory request with any body
	PostV1EngageHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1EngageHistory(ctx context.Context, body PostV1EngageHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Enrollment request
	GetV1Enrollment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1Enrollment request with any body
	PutV1EnrollmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1Enrollment(ctx context.Context, body PutV1EnrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentCustomization request
	GetV1EnrollmentCustomization(ctx context.Context, params *GetV1EnrollmentCustomizationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1EnrollmentCustomization request with any body
	PostV1EnrollmentCustomizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1EnrollmentCustomization(ctx context.Context, body PostV1EnrollmentCustomizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1EnrollmentCustomizationImages request with any body
	PostV1EnrollmentCustomizationImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1EnrollmentCustomizationParseMarkdown request with any body
	PostV1EnrollmentCustomizationParseMarkdownWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1EnrollmentCustomizationParseMarkdown(ctx context.Context, body PostV1EnrollmentCustomizationParseMarkdownJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1EnrollmentCustomizationId request
	DeleteV1EnrollmentCustomizationId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentCustomizationId request
	GetV1EnrollmentCustomizationId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1EnrollmentCustomizationId request with any body
	PutV1EnrollmentCustomizationIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1EnrollmentCustomizationId(ctx context.Context, id int, body PutV1EnrollmentCustomizationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentCustomizationIdAll request
	GetV1EnrollmentCustomizationIdAll(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1EnrollmentCustomizationIdAllPanelId request
	DeleteV1EnrollmentCustomizationIdAllPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentCustomizationIdAllPanelId request
	GetV1EnrollmentCustomizationIdAllPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentCustomizationIdHistory request
	GetV1EnrollmentCustomizationIdHistory(ctx context.Context, id int, params *GetV1EnrollmentCustomizationIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1EnrollmentCustomizationIdHistory request with any body
	PostV1EnrollmentCustomizationIdHistoryWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1EnrollmentCustomizationIdHistory(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1EnrollmentCustomizationIdLdap request with any body
	PostV1EnrollmentCustomizationIdLdapWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1EnrollmentCustomizationIdLdap(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdLdapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1EnrollmentCustomizationIdLdapPanelId request
	DeleteV1EnrollmentCustomizationIdLdapPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentCustomizationIdLdapPanelId request
	GetV1EnrollmentCustomizationIdLdapPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1EnrollmentCustomizationIdLdapPanelId request with any body
	PutV1EnrollmentCustomizationIdLdapPanelIdWithBody(ctx context.Context, id int, panelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1EnrollmentCustomizationIdLdapPanelId(ctx context.Context, id int, panelId int, body PutV1EnrollmentCustomizationIdLdapPanelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentCustomizationIdPrestages request
	GetV1EnrollmentCustomizationIdPrestages(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1EnrollmentCustomizationIdSso request with any body
	PostV1EnrollmentCustomizationIdSsoWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1EnrollmentCustomizationIdSso(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdSsoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1EnrollmentCustomizationIdSsoPanelId request
	DeleteV1EnrollmentCustomizationIdSsoPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentCustomizationIdSsoPanelId request
	GetV1EnrollmentCustomizationIdSsoPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1EnrollmentCustomizationIdSsoPanelId request with any body
	PutV1EnrollmentCustomizationIdSsoPanelIdWithBody(ctx context.Context, id int, panelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1EnrollmentCustomizationIdSsoPanelId(ctx context.Context, id int, panelId int, body PutV1EnrollmentCustomizationIdSsoPanelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1EnrollmentCustomizationIdText request with any body
	PostV1EnrollmentCustomizationIdTextWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1EnrollmentCustomizationIdText(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdTextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1EnrollmentCustomizationIdTextPanelId request
	DeleteV1EnrollmentCustomizationIdTextPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentCustomizationIdTextPanelId request
	GetV1EnrollmentCustomizationIdTextPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1EnrollmentCustomizationIdTextPanelId request with any body
	PutV1EnrollmentCustomizationIdTextPanelIdWithBody(ctx context.Context, id int, panelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1EnrollmentCustomizationIdTextPanelId(ctx context.Context, id int, panelId int, body PutV1EnrollmentCustomizationIdTextPanelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentCustomizationIdTextPanelIdMarkdown request
	GetV1EnrollmentCustomizationIdTextPanelIdMarkdown(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentAccessGroups request
	GetV1EnrollmentAccessGroups(ctx context.Context, params *GetV1EnrollmentAccessGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1EnrollmentAccessGroupsGroupKey request
	DeleteV1EnrollmentAccessGroupsGroupKey(ctx context.Context, groupKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentAccessGroupsGroupKey request
	GetV1EnrollmentAccessGroupsGroupKey(ctx context.Context, groupKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1EnrollmentAccessGroupsGroupKey request with any body
	PutV1EnrollmentAccessGroupsGroupKeyWithBody(ctx context.Context, groupKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1EnrollmentAccessGroupsGroupKey(ctx context.Context, groupKey string, body PutV1EnrollmentAccessGroupsGroupKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentFilteredLanguageCodes request
	GetV1EnrollmentFilteredLanguageCodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentHistory request
	GetV1EnrollmentHistory(ctx context.Context, params *GetV1EnrollmentHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1EnrollmentHistory request with any body
	PostV1EnrollmentHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1EnrollmentHistory(ctx context.Context, body PostV1EnrollmentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentLanguageCodes request
	GetV1EnrollmentLanguageCodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentLanguages request
	GetV1EnrollmentLanguages(ctx context.Context, params *GetV1EnrollmentLanguagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1EnrollmentLanguagesLanguage request
	DeleteV1EnrollmentLanguagesLanguage(ctx context.Context, language string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1EnrollmentLanguagesLanguage request
	GetV1EnrollmentLanguagesLanguage(ctx context.Context, language string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1EnrollmentLanguagesLanguage request with any body
	PutV1EnrollmentLanguagesLanguageWithBody(ctx context.Context, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1EnrollmentLanguagesLanguage(ctx context.Context, language string, body PutV1EnrollmentLanguagesLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1Icon request with any body
	PostV1IconWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1IconId request
	GetV1IconId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1InventoryInformation request
	GetV1InventoryInformation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1InventoryPreload request
	DeleteV1InventoryPreload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1InventoryPreload request
	GetV1InventoryPreload(ctx context.Context, params *GetV1InventoryPreloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1InventoryPreload request with any body
	PostV1InventoryPreloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1InventoryPreload(ctx context.Context, body PostV1InventoryPreloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1InventoryPreloadCsvTemplate request
	GetV1InventoryPreloadCsvTemplate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1InventoryPreloadHistory request
	GetV1InventoryPreloadHistory(ctx context.Context, params *GetV1InventoryPreloadHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1InventoryPreloadHistory request with any body
	PostV1InventoryPreloadHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1InventoryPreloadHistory(ctx context.Context, body PostV1InventoryPreloadHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1InventoryPreloadValidateCsv request with any body
	PostV1InventoryPreloadValidateCsvWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1InventoryPreloadId request
	DeleteV1InventoryPreloadId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1InventoryPreloadId request
	GetV1InventoryPreloadId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1InventoryPreloadId request with any body
	PutV1InventoryPreloadIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1InventoryPreloadId(ctx context.Context, id int, body PutV1InventoryPreloadIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JamfConnect request
	GetV1JamfConnect(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JamfConnectConfigProfiles request
	GetV1JamfConnectConfigProfiles(ctx context.Context, params *GetV1JamfConnectConfigProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1JamfConnectConfigProfilesId request with any body
	PutV1JamfConnectConfigProfilesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1JamfConnectConfigProfilesId(ctx context.Context, id string, body PutV1JamfConnectConfigProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JamfConnectDeploymentsIdTasks request
	GetV1JamfConnectDeploymentsIdTasks(ctx context.Context, id string, params *GetV1JamfConnectDeploymentsIdTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1JamfConnectDeploymentsIdTasksRetry request with any body
	PostV1JamfConnectDeploymentsIdTasksRetryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1JamfConnectDeploymentsIdTasksRetry(ctx context.Context, id string, body PostV1JamfConnectDeploymentsIdTasksRetryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JamfConnectHistory request
	GetV1JamfConnectHistory(ctx context.Context, params *GetV1JamfConnectHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1JamfConnectHistory request with any body
	PostV1JamfConnectHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1JamfConnectHistory(ctx context.Context, body PostV1JamfConnectHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1JamfManagementFrameworkRedeployId request
	PostV1JamfManagementFrameworkRedeployId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JamfPackage request
	GetV1JamfPackage(ctx context.Context, params *GetV1JamfPackageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JamfProInformation request
	GetV1JamfProInformation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JamfProServerUrl request
	GetV1JamfProServerUrl(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1JamfProServerUrl request with any body
	PutV1JamfProServerUrlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1JamfProServerUrl(ctx context.Context, body PutV1JamfProServerUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JamfProServerUrlHistory request
	GetV1JamfProServerUrlHistory(ctx context.Context, params *GetV1JamfProServerUrlHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1JamfProServerUrlHistory request with any body
	PostV1JamfProServerUrlHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1JamfProServerUrlHistory(ctx context.Context, body PostV1JamfProServerUrlHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JamfProVersion request
	GetV1JamfProVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1JamfProtect request
	DeleteV1JamfProtect(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JamfProtect request
	GetV1JamfProtect(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1JamfProtect request with any body
	PutV1JamfProtectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1JamfProtect(ctx context.Context, body PutV1JamfProtectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JamfProtectDeploymentsIdTasks request
	GetV1JamfProtectDeploymentsIdTasks(ctx context.Context, id string, params *GetV1JamfProtectDeploymentsIdTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1JamfProtectDeploymentsIdTasksRetry request with any body
	PostV1JamfProtectDeploymentsIdTasksRetryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1JamfProtectDeploymentsIdTasksRetry(ctx context.Context, id string, body PostV1JamfProtectDeploymentsIdTasksRetryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JamfProtectHistory request
	GetV1JamfProtectHistory(ctx context.Context, params *GetV1JamfProtectHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1JamfProtectHistory request with any body
	PostV1JamfProtectHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1JamfProtectHistory(ctx context.Context, body PostV1JamfProtectHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1JamfProtectPlans request
	GetV1JamfProtectPlans(ctx context.Context, params *GetV1JamfProtectPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1JamfProtectPlansSync request
	PostV1JamfProtectPlansSync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1JamfProtectRegister request with any body
	PostV1JamfProtectRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1JamfProtectRegister(ctx context.Context, body PostV1JamfProtectRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1LdapKeystoreVerify request with any body
	PostV1LdapKeystoreVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1LdapKeystoreVerify(ctx context.Context, body PostV1LdapKeystoreVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1LdapGroups request
	GetV1LdapGroups(ctx context.Context, params *GetV1LdapGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1LdapLdapServers request
	GetV1LdapLdapServers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1LdapServers request
	GetV1LdapServers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Locales request
	GetV1Locales(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MacosManagedSoftwareUpdatesAvailableUpdates request
	GetV1MacosManagedSoftwareUpdatesAvailableUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1MacosManagedSoftwareUpdatesSendUpdates request with any body
	PostV1MacosManagedSoftwareUpdatesSendUpdatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1MacosManagedSoftwareUpdatesSendUpdates(ctx context.Context, body PostV1MacosManagedSoftwareUpdatesSendUpdatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MdmCommands request
	GetV1MdmCommands(ctx context.Context, params *GetV1MdmCommandsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1MdmRenewProfile request with any body
	PostV1MdmRenewProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1MdmRenewProfile(ctx context.Context, body PostV1MdmRenewProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MobileDeviceEnrollmentProfileIdDownloadProfile request
	GetV1MobileDeviceEnrollmentProfileIdDownloadProfile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MobileDeviceGroups request
	GetV1MobileDeviceGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MobileDevicePrestages request
	GetV1MobileDevicePrestages(ctx context.Context, params *GetV1MobileDevicePrestagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1MobileDevicePrestages request with any body
	PostV1MobileDevicePrestagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1MobileDevicePrestages(ctx context.Context, body PostV1MobileDevicePrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MobileDevicePrestagesScope request
	GetV1MobileDevicePrestagesScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MobileDevicePrestagesSync request
	GetV1MobileDevicePrestagesSync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MobileDevicePrestagesSyncId request
	GetV1MobileDevicePrestagesSyncId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MobileDevicePrestagesSyncIdLatest request
	GetV1MobileDevicePrestagesSyncIdLatest(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1MobileDevicePrestagesId request
	DeleteV1MobileDevicePrestagesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MobileDevicePrestagesId request
	GetV1MobileDevicePrestagesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1MobileDevicePrestagesId request with any body
	PutV1MobileDevicePrestagesIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1MobileDevicePrestagesId(ctx context.Context, id int, body PutV1MobileDevicePrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1MobileDevicePrestagesIdAttachments request with any body
	DeleteV1MobileDevicePrestagesIdAttachmentsWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV1MobileDevicePrestagesIdAttachments(ctx context.Context, id int, body DeleteV1MobileDevicePrestagesIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MobileDevicePrestagesIdAttachments request
	GetV1MobileDevicePrestagesIdAttachments(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1MobileDevicePrestagesIdAttachments request with any body
	PostV1MobileDevicePrestagesIdAttachmentsWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MobileDevicePrestagesIdHistory request
	GetV1MobileDevicePrestagesIdHistory(ctx context.Context, id int, params *GetV1MobileDevicePrestagesIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1MobileDevicePrestagesIdHistory request with any body
	PostV1MobileDevicePrestagesIdHistoryWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1MobileDevicePrestagesIdHistory(ctx context.Context, id int, body PostV1MobileDevicePrestagesIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1MobileDevicePrestagesIdScope request with any body
	DeleteV1MobileDevicePrestagesIdScopeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteV1MobileDevicePrestagesIdScope(ctx context.Context, id int, body DeleteV1MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MobileDevicePrestagesIdScope request
	GetV1MobileDevicePrestagesIdScope(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1MobileDevicePrestagesIdScope request with any body
	PostV1MobileDevicePrestagesIdScopeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1MobileDevicePrestagesIdScope(ctx context.Context, id int, body PostV1MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1MobileDevicePrestagesIdScope request with any body
	PutV1MobileDevicePrestagesIdScopeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1MobileDevicePrestagesIdScope(ctx context.Context, id int, body PutV1MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MobileDevices request
	GetV1MobileDevices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MobileDevicesId request
	GetV1MobileDevicesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1MobileDevicesId request with any body
	PatchV1MobileDevicesIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1MobileDevicesId(ctx context.Context, id int, body PatchV1MobileDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1MobileDevicesIdDetail request
	GetV1MobileDevicesIdDetail(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1MobileDevicesIdRecalculateSmartGroups request
	PostV1MobileDevicesIdRecalculateSmartGroups(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Notifications request
	GetV1Notifications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1NotificationsTypeId request
	DeleteV1NotificationsTypeId(ctx context.Context, pType NotificationType, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ParentApp request
	GetV1ParentApp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ParentApp request with any body
	PutV1ParentAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ParentApp(ctx context.Context, body PutV1ParentAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ParentAppHistory request
	GetV1ParentAppHistory(ctx context.Context, params *GetV1ParentAppHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ParentAppHistory request with any body
	PostV1ParentAppHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ParentAppHistory(ctx context.Context, body PostV1ParentAppHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PkiCertificateAuthorityActive request
	GetV1PkiCertificateAuthorityActive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PkiCertificateAuthorityActiveDer request
	GetV1PkiCertificateAuthorityActiveDer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PkiCertificateAuthorityActivePem request
	GetV1PkiCertificateAuthorityActivePem(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PkiCertificateAuthorityId request
	GetV1PkiCertificateAuthorityId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PkiCertificateAuthorityIdDer request
	GetV1PkiCertificateAuthorityIdDer(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PkiCertificateAuthorityIdPem request
	GetV1PkiCertificateAuthorityIdPem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1PkiVenafi request with any body
	PostV1PkiVenafiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1PkiVenafi(ctx context.Context, body PostV1PkiVenafiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1PkiVenafiId request
	DeleteV1PkiVenafiId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PkiVenafiId request
	GetV1PkiVenafiId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1PkiVenafiId request with any body
	PatchV1PkiVenafiIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV1PkiVenafiId(ctx context.Context, id string, body PatchV1PkiVenafiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PkiVenafiIdConnectionStatus request
	GetV1PkiVenafiIdConnectionStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PkiVenafiIdDependentProfiles request
	GetV1PkiVenafiIdDependentProfiles(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PkiVenafiIdHistory request
	GetV1PkiVenafiIdHistory(ctx context.Context, id string, params *GetV1PkiVenafiIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1PkiVenafiIdHistory request with any body
	PostV1PkiVenafiIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1PkiVenafiIdHistory(ctx context.Context, id string, body PostV1PkiVenafiIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PkiVenafiIdJamfPublicKey request
	GetV1PkiVenafiIdJamfPublicKey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1PkiVenafiIdJamfPublicKeyRegenerate request
	PostV1PkiVenafiIdJamfPublicKeyRegenerate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1PkiVenafiIdProxyTrustStore request
	DeleteV1PkiVenafiIdProxyTrustStore(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PkiVenafiIdProxyTrustStore request
	GetV1PkiVenafiIdProxyTrustStore(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1PkiVenafiIdProxyTrustStore request with any body
	PostV1PkiVenafiIdProxyTrustStoreWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1PolicyProperties request
	GetV1PolicyProperties(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1PolicyProperties request with any body
	PutV1PolicyPropertiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1PolicyProperties(ctx context.Context, body PutV1PolicyPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Reenrollment request
	GetV1Reenrollment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1Reenrollment request with any body
	PutV1ReenrollmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1Reenrollment(ctx context.Context, body PutV1ReenrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ReenrollmentHistory request
	GetV1ReenrollmentHistory(ctx context.Context, params *GetV1ReenrollmentHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ReenrollmentHistory request with any body
	PostV1ReenrollmentHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ReenrollmentHistory(ctx context.Context, body PostV1ReenrollmentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ReenrollmentHistoryExport request with any body
	PostV1ReenrollmentHistoryExportWithBody(ctx context.Context, params *PostV1ReenrollmentHistoryExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ReenrollmentHistoryExport(ctx context.Context, params *PostV1ReenrollmentHistoryExportParams, body PostV1ReenrollmentHistoryExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Scripts request
	GetV1Scripts(ctx context.Context, params *GetV1ScriptsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1Scripts request with any body
	PostV1ScriptsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Scripts(ctx context.Context, body PostV1ScriptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ScriptsId request
	DeleteV1ScriptsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ScriptsId request
	GetV1ScriptsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1ScriptsId request with any body
	PutV1ScriptsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1ScriptsId(ctx context.Context, id string, body PutV1ScriptsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ScriptsIdDownload request
	GetV1ScriptsIdDownload(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ScriptsIdHistory request
	GetV1ScriptsIdHistory(ctx context.Context, id string, params *GetV1ScriptsIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ScriptsIdHistory request with any body
	PostV1ScriptsIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ScriptsIdHistory(ctx context.Context, id string, body PostV1ScriptsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SearchMobileDevices request with any body
	PostV1SearchMobileDevicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1SearchMobileDevices(ctx context.Context, body PostV1SearchMobileDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SelfServiceBrandingIos request
	GetV1SelfServiceBrandingIos(ctx context.Context, params *GetV1SelfServiceBrandingIosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SelfServiceBrandingIos request with any body
	PostV1SelfServiceBrandingIosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1SelfServiceBrandingIos(ctx context.Context, body PostV1SelfServiceBrandingIosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1SelfServiceBrandingIosId request
	DeleteV1SelfServiceBrandingIosId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SelfServiceBrandingIosId request
	GetV1SelfServiceBrandingIosId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1SelfServiceBrandingIosId request with any body
	PutV1SelfServiceBrandingIosIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1SelfServiceBrandingIosId(ctx context.Context, id string, body PutV1SelfServiceBrandingIosIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SelfServiceBrandingMacos request
	GetV1SelfServiceBrandingMacos(ctx context.Context, params *GetV1SelfServiceBrandingMacosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SelfServiceBrandingMacos request with any body
	PostV1SelfServiceBrandingMacosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1SelfServiceBrandingMacos(ctx context.Context, body PostV1SelfServiceBrandingMacosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1SelfServiceBrandingMacosId request
	DeleteV1SelfServiceBrandingMacosId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SelfServiceBrandingMacosId request
	GetV1SelfServiceBrandingMacosId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1SelfServiceBrandingMacosId request with any body
	PutV1SelfServiceBrandingMacosIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1SelfServiceBrandingMacosId(ctx context.Context, id string, body PutV1SelfServiceBrandingMacosIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SelfServiceSettings request
	GetV1SelfServiceSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1SelfServiceSettings request with any body
	PutV1SelfServiceSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1SelfServiceSettings(ctx context.Context, body PutV1SelfServiceSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Sites request
	GetV1Sites(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SmartComputerGroupsIdRecalculate request
	PostV1SmartComputerGroupsIdRecalculate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SmartMobileDeviceGroupsIdRecalculate request
	PostV1SmartMobileDeviceGroupsIdRecalculate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SmartUserGroupsIdRecalculate request
	PostV1SmartUserGroupsIdRecalculate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Sso request
	GetV1Sso(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1Sso request with any body
	PutV1SsoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1Sso(ctx context.Context, body PutV1SsoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1SsoCert request
	DeleteV1SsoCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SsoCert request
	GetV1SsoCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SsoCert request
	PostV1SsoCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1SsoCert request with any body
	PutV1SsoCertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1SsoCert(ctx context.Context, body PutV1SsoCertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SsoCertDownload request
	GetV1SsoCertDownload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SsoCertParse request with any body
	PostV1SsoCertParseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1SsoCertParse(ctx context.Context, body PostV1SsoCertParseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SsoDependencies request
	GetV1SsoDependencies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SsoDisable request
	PostV1SsoDisable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SsoHistory request
	GetV1SsoHistory(ctx context.Context, params *GetV1SsoHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SsoHistory request with any body
	PostV1SsoHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1SsoHistory(ctx context.Context, body PostV1SsoHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SsoMetadataDownload request
	GetV1SsoMetadataDownload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SsoValidate request with any body
	PostV1SsoValidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1SsoValidate(ctx context.Context, body PostV1SsoValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1StaticUserGroups request
	GetV1StaticUserGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1StaticUserGroupsId request
	GetV1StaticUserGroupsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SupervisionIdentities request
	GetV1SupervisionIdentities(ctx context.Context, params *GetV1SupervisionIdentitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SupervisionIdentities request with any body
	PostV1SupervisionIdentitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1SupervisionIdentities(ctx context.Context, body PostV1SupervisionIdentitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SupervisionIdentitiesUpload request with any body
	PostV1SupervisionIdentitiesUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1SupervisionIdentitiesUpload(ctx context.Context, body PostV1SupervisionIdentitiesUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1SupervisionIdentitiesId request
	DeleteV1SupervisionIdentitiesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SupervisionIdentitiesId request
	GetV1SupervisionIdentitiesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1SupervisionIdentitiesId request with any body
	PutV1SupervisionIdentitiesIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1SupervisionIdentitiesId(ctx context.Context, id int, body PutV1SupervisionIdentitiesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SupervisionIdentitiesIdDownload request
	GetV1SupervisionIdentitiesIdDownload(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SystemInitialize request with any body
	PostV1SystemInitializeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1SystemInitialize(ctx context.Context, body PostV1SystemInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SystemInitializeDatabaseConnection request with any body
	PostV1SystemInitializeDatabaseConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1SystemInitializeDatabaseConnection(ctx context.Context, body PostV1SystemInitializeDatabaseConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1TeacherApp request
	GetV1TeacherApp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1TeacherApp request with any body
	PutV1TeacherAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1TeacherApp(ctx context.Context, body PutV1TeacherAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1TeacherAppHistory request
	GetV1TeacherAppHistory(ctx context.Context, params *GetV1TeacherAppHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1TeacherAppHistory request with any body
	PostV1TeacherAppHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1TeacherAppHistory(ctx context.Context, body PostV1TeacherAppHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1TimeZones request
	GetV1TimeZones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1UserPreferencesKeyId request
	DeleteV1UserPreferencesKeyId(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1UserPreferencesKeyId request
	GetV1UserPreferencesKeyId(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1UserPreferencesKeyId request with any body
	PutV1UserPreferencesKeyIdWithBody(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1UserPreferencesKeyId(ctx context.Context, keyId string, body PutV1UserPreferencesKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1UsersIdRecalculateSmartGroups request
	PostV1UsersIdRecalculateSmartGroups(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1VolumePurchasingLocations request
	GetV1VolumePurchasingLocations(ctx context.Context, params *GetV1VolumePurchasingLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1VolumePurchasingLocations request with any body
	PostV1VolumePurchasingLocationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1VolumePurchasingLocations(ctx context.Context, body PostV1VolumePurchasingLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1VolumePurchasingLocationsId request
	DeleteV1VolumePurchasingLocationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1VolumePurchasingLocationsId request
	GetV1VolumePurchasingLocationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV1VolumePurchasingLocationsId request with any body
	PatchV1VolumePurchasingLocationsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1VolumePurchasingLocationsIdHistory request
	GetV1VolumePurchasingLocationsIdHistory(ctx context.Context, id string, params *GetV1VolumePurchasingLocationsIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1VolumePurchasingLocationsIdReclaim request
	PostV1VolumePurchasingLocationsIdReclaim(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1VolumePurchasingLocationsIdRevokeLicenses request
	PostV1VolumePurchasingLocationsIdRevokeLicenses(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1VolumePurchasingSubscriptions request
	GetV1VolumePurchasingSubscriptions(ctx context.Context, params *GetV1VolumePurchasingSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1VolumePurchasingSubscriptions request with any body
	PostV1VolumePurchasingSubscriptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1VolumePurchasingSubscriptions(ctx context.Context, body PostV1VolumePurchasingSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1VolumePurchasingSubscriptionsId request
	DeleteV1VolumePurchasingSubscriptionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1VolumePurchasingSubscriptionsId request
	GetV1VolumePurchasingSubscriptionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1VolumePurchasingSubscriptionsId request with any body
	PutV1VolumePurchasingSubscriptionsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1VolumePurchasingSubscriptionsId(ctx context.Context, id string, body PutV1VolumePurchasingSubscriptionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CheckIn request
	GetV2CheckIn(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2CheckIn request with any body
	PutV2CheckInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2CheckIn(ctx context.Context, body PutV2CheckInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CheckInHistory request
	GetV2CheckInHistory(ctx context.Context, params *GetV2CheckInHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2CheckInHistory request with any body
	PostV2CheckInHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2CheckInHistory(ctx context.Context, body PostV2CheckInHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2CloudLdaps request with any body
	PostV2CloudLdapsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2CloudLdaps(ctx context.Context, body PostV2CloudLdapsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CloudLdapsDefaultsProviderMappings request
	GetV2CloudLdapsDefaultsProviderMappings(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CloudLdapsDefaultsProviderServerConfiguration request
	GetV2CloudLdapsDefaultsProviderServerConfiguration(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2CloudLdapsId request
	DeleteV2CloudLdapsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CloudLdapsId request
	GetV2CloudLdapsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2CloudLdapsId request with any body
	PutV2CloudLdapsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2CloudLdapsId(ctx context.Context, id string, body PutV2CloudLdapsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CloudLdapsIdConnectionBind request
	GetV2CloudLdapsIdConnectionBind(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CloudLdapsIdConnectionSearch request
	GetV2CloudLdapsIdConnectionSearch(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CloudLdapsIdConnectionStatus request
	GetV2CloudLdapsIdConnectionStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CloudLdapsIdMappings request
	GetV2CloudLdapsIdMappings(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2CloudLdapsIdMappings request with any body
	PutV2CloudLdapsIdMappingsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2CloudLdapsIdMappings(ctx context.Context, id string, body PutV2CloudLdapsIdMappingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ComputerPrestages request
	GetV2ComputerPrestages(ctx context.Context, params *GetV2ComputerPrestagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2ComputerPrestages request with any body
	PostV2ComputerPrestagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2ComputerPrestages(ctx context.Context, body PostV2ComputerPrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ComputerPrestagesScope request
	GetV2ComputerPrestagesScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2ComputerPrestagesId request
	DeleteV2ComputerPrestagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ComputerPrestagesId request
	GetV2ComputerPrestagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2ComputerPrestagesId request with any body
	PutV2ComputerPrestagesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2ComputerPrestagesId(ctx context.Context, id string, body PutV2ComputerPrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ComputerPrestagesIdScope request
	GetV2ComputerPrestagesIdScope(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2ComputerPrestagesIdScope request with any body
	PostV2ComputerPrestagesIdScopeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2ComputerPrestagesIdScope(ctx context.Context, id string, body PostV2ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2ComputerPrestagesIdScope request with any body
	PutV2ComputerPrestagesIdScopeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2ComputerPrestagesIdScope(ctx context.Context, id string, body PutV2ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2ComputerPrestagesIdScopeDeleteMultiple request with any body
	PostV2ComputerPrestagesIdScopeDeleteMultipleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2ComputerPrestagesIdScopeDeleteMultiple(ctx context.Context, id string, body PostV2ComputerPrestagesIdScopeDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Enrollment request
	GetV2Enrollment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2Enrollment request with any body
	PutV2EnrollmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2Enrollment(ctx context.Context, body PutV2EnrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2EnrollmentCustomizations request
	GetV2EnrollmentCustomizations(ctx context.Context, params *GetV2EnrollmentCustomizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2EnrollmentCustomizations request with any body
	PostV2EnrollmentCustomizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2EnrollmentCustomizations(ctx context.Context, body PostV2EnrollmentCustomizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2EnrollmentCustomizationsImages request with any body
	PostV2EnrollmentCustomizationsImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2EnrollmentCustomizationsId request
	DeleteV2EnrollmentCustomizationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2EnrollmentCustomizationsId request
	GetV2EnrollmentCustomizationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2EnrollmentCustomizationsId request with any body
	PutV2EnrollmentCustomizationsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2EnrollmentCustomizationsId(ctx context.Context, id string, body PutV2EnrollmentCustomizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2EnrollmentCustomizationsIdHistory request
	GetV2EnrollmentCustomizationsIdHistory(ctx context.Context, id string, params *GetV2EnrollmentCustomizationsIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2EnrollmentCustomizationsIdHistory request with any body
	PostV2EnrollmentCustomizationsIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2EnrollmentCustomizationsIdHistory(ctx context.Context, id string, body PostV2EnrollmentCustomizationsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2EnrollmentCustomizationsIdPrestages request
	GetV2EnrollmentCustomizationsIdPrestages(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2EnrollmentAccessGroups request
	GetV2EnrollmentAccessGroups(ctx context.Context, params *GetV2EnrollmentAccessGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2EnrollmentAccessGroups request with any body
	PostV2EnrollmentAccessGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2EnrollmentAccessGroups(ctx context.Context, body PostV2EnrollmentAccessGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2EnrollmentAccessGroupsServerIdGroupId request
	DeleteV2EnrollmentAccessGroupsServerIdGroupId(ctx context.Context, serverId string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2EnrollmentAccessGroupsServerIdGroupId request
	GetV2EnrollmentAccessGroupsServerIdGroupId(ctx context.Context, serverId string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2EnrollmentAccessGroupsServerIdGroupId request with any body
	PutV2EnrollmentAccessGroupsServerIdGroupIdWithBody(ctx context.Context, serverId string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2EnrollmentAccessGroupsServerIdGroupId(ctx context.Context, serverId string, groupId string, body PutV2EnrollmentAccessGroupsServerIdGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2EnrollmentFilteredLanguageCodes request
	GetV2EnrollmentFilteredLanguageCodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2EnrollmentHistory request
	GetV2EnrollmentHistory(ctx context.Context, params *GetV2EnrollmentHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2EnrollmentHistory request with any body
	PostV2EnrollmentHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2EnrollmentHistory(ctx context.Context, body PostV2EnrollmentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2EnrollmentHistoryExport request with any body
	PostV2EnrollmentHistoryExportWithBody(ctx context.Context, params *PostV2EnrollmentHistoryExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2EnrollmentHistoryExport(ctx context.Context, params *PostV2EnrollmentHistoryExportParams, body PostV2EnrollmentHistoryExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2EnrollmentLanguageCodes request
	GetV2EnrollmentLanguageCodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2EnrollmentLanguages request
	GetV2EnrollmentLanguages(ctx context.Context, params *GetV2EnrollmentLanguagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2EnrollmentLanguagesDeleteMultiple request with any body
	PostV2EnrollmentLanguagesDeleteMultipleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2EnrollmentLanguagesDeleteMultiple(ctx context.Context, body PostV2EnrollmentLanguagesDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2EnrollmentLanguagesLanguageId request
	DeleteV2EnrollmentLanguagesLanguageId(ctx context.Context, languageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2EnrollmentLanguagesLanguageId request
	GetV2EnrollmentLanguagesLanguageId(ctx context.Context, languageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2EnrollmentLanguagesLanguageId request with any body
	PutV2EnrollmentLanguagesLanguageIdWithBody(ctx context.Context, languageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2EnrollmentLanguagesLanguageId(ctx context.Context, languageId string, body PutV2EnrollmentLanguagesLanguageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2InventoryPreloadCsv request
	GetV2InventoryPreloadCsv(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2InventoryPreloadCsv request with any body
	PostV2InventoryPreloadCsvWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2InventoryPreloadCsvTemplate request
	GetV2InventoryPreloadCsvTemplate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2InventoryPreloadCsvValidate request with any body
	PostV2InventoryPreloadCsvValidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2InventoryPreloadEaColumns request
	GetV2InventoryPreloadEaColumns(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2InventoryPreloadExport request with any body
	PostV2InventoryPreloadExportWithBody(ctx context.Context, params *PostV2InventoryPreloadExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2InventoryPreloadExport(ctx context.Context, params *PostV2InventoryPreloadExportParams, body PostV2InventoryPreloadExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2InventoryPreloadHistory request
	GetV2InventoryPreloadHistory(ctx context.Context, params *GetV2InventoryPreloadHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2InventoryPreloadHistory request with any body
	PostV2InventoryPreloadHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2InventoryPreloadHistory(ctx context.Context, body PostV2InventoryPreloadHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2InventoryPreloadRecords request
	GetV2InventoryPreloadRecords(ctx context.Context, params *GetV2InventoryPreloadRecordsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2InventoryPreloadRecords request with any body
	PostV2InventoryPreloadRecordsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2InventoryPreloadRecords(ctx context.Context, body PostV2InventoryPreloadRecordsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2InventoryPreloadRecordsDeleteAll request
	PostV2InventoryPreloadRecordsDeleteAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2InventoryPreloadRecordsId request
	DeleteV2InventoryPreloadRecordsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2InventoryPreloadRecordsId request
	GetV2InventoryPreloadRecordsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2InventoryPreloadRecordsId request with any body
	PutV2InventoryPreloadRecordsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2InventoryPreloadRecordsId(ctx context.Context, id string, body PutV2InventoryPreloadRecordsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2JamfPackage request
	GetV2JamfPackage(ctx context.Context, params *GetV2JamfPackageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2JamfProInformation request
	GetV2JamfProInformation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2MobileDevicePrestages request
	GetV2MobileDevicePrestages(ctx context.Context, params *GetV2MobileDevicePrestagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2MobileDevicePrestages request with any body
	PostV2MobileDevicePrestagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2MobileDevicePrestages(ctx context.Context, body PostV2MobileDevicePrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2MobileDevicePrestagesScope request
	GetV2MobileDevicePrestagesScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2MobileDevicePrestagesSyncs request
	GetV2MobileDevicePrestagesSyncs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2MobileDevicePrestagesId request
	DeleteV2MobileDevicePrestagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2MobileDevicePrestagesId request
	GetV2MobileDevicePrestagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2MobileDevicePrestagesId request with any body
	PutV2MobileDevicePrestagesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2MobileDevicePrestagesId(ctx context.Context, id string, body PutV2MobileDevicePrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2MobileDevicePrestagesIdAttachments request
	GetV2MobileDevicePrestagesIdAttachments(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2MobileDevicePrestagesIdAttachments request with any body
	PostV2MobileDevicePrestagesIdAttachmentsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2MobileDevicePrestagesIdAttachmentsDeleteMultiple request with any body
	PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2MobileDevicePrestagesIdAttachmentsDeleteMultiple(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2MobileDevicePrestagesIdHistory request
	GetV2MobileDevicePrestagesIdHistory(ctx context.Context, id string, params *GetV2MobileDevicePrestagesIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2MobileDevicePrestagesIdHistory request with any body
	PostV2MobileDevicePrestagesIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2MobileDevicePrestagesIdHistory(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2MobileDevicePrestagesIdScope request
	GetV2MobileDevicePrestagesIdScope(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2MobileDevicePrestagesIdScope request with any body
	PostV2MobileDevicePrestagesIdScopeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2MobileDevicePrestagesIdScope(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2MobileDevicePrestagesIdScope request with any body
	PutV2MobileDevicePrestagesIdScopeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2MobileDevicePrestagesIdScope(ctx context.Context, id string, body PutV2MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2MobileDevicePrestagesIdScopeDeleteMultiple request with any body
	PostV2MobileDevicePrestagesIdScopeDeleteMultipleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2MobileDevicePrestagesIdScopeDeleteMultiple(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdScopeDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2MobileDevicePrestagesIdSyncs request
	GetV2MobileDevicePrestagesIdSyncs(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2MobileDevicePrestagesIdSyncsLatest request
	GetV2MobileDevicePrestagesIdSyncsLatest(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2MobileDevices request
	GetV2MobileDevices(ctx context.Context, params *GetV2MobileDevicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2MobileDevicesId request
	GetV2MobileDevicesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchV2MobileDevicesId request with any body
	PatchV2MobileDevicesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchV2MobileDevicesId(ctx context.Context, id string, body PatchV2MobileDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2MobileDevicesIdDetail request
	GetV2MobileDevicesIdDetail(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV2SsoCert request
	DeleteV2SsoCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SsoCert request
	GetV2SsoCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2SsoCert request
	PostV2SsoCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV2SsoCert request with any body
	PutV2SsoCertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV2SsoCert(ctx context.Context, body PutV2SsoCertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2SsoCertDownload request
	GetV2SsoCertDownload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV2SsoCertParse request with any body
	PostV2SsoCertParseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV2SsoCertParse(ctx context.Context, body PostV2SsoCertParseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3CheckIn request
	GetV3CheckIn(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV3CheckIn request with any body
	PutV3CheckInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV3CheckIn(ctx context.Context, body PutV3CheckInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV3CheckInHistory request
	GetV3CheckInHistory(ctx context.Context, params *GetV3CheckInHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV3CheckInHistory request with any body
	PostV3CheckInHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV3CheckInHistory(ctx context.Context, body PostV3CheckInHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVppAdminAccounts request
	GetVppAdminAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVppSubscriptions request
	GetVppSubscriptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVppSubscriptionsId request
	GetVppSubscriptionsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthCurrent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthCurrentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthInvalidateToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthInvalidateTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthKeepAlive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthKeepAliveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthTokens(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthTokensRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDevicesExtensionAttributes(ctx context.Context, params *GetDevicesExtensionAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDevicesExtensionAttributesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInventoryPreload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInventoryPreloadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInventoryPreload(ctx context.Context, params *GetInventoryPreloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInventoryPreloadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryPreloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryPreloadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryPreload(ctx context.Context, body PostInventoryPreloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryPreloadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInventoryPreloadCsvTemplate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInventoryPreloadCsvTemplateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInventoryPreloadHistory(ctx context.Context, params *GetInventoryPreloadHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInventoryPreloadHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryPreloadHistoryNotesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryPreloadHistoryNotesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryPreloadHistoryNotes(ctx context.Context, body PostInventoryPreloadHistoryNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryPreloadHistoryNotesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInventoryPreloadValidateCsvWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInventoryPreloadValidateCsvRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInventoryPreloadId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInventoryPreloadIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInventoryPreloadId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInventoryPreloadIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInventoryPreloadIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInventoryPreloadIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInventoryPreloadId(ctx context.Context, id int, body PutInventoryPreloadIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInventoryPreloadIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLdapGroups(ctx context.Context, params *GetLdapGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLdapGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLdapServers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLdapServersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotificationsAlerts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotificationsAlertsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNotificationsAlertsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNotificationsAlertsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNotificationsAlertsTypeId(ctx context.Context, pType NotificationType, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNotificationsAlertsTypeIdRequest(c.Server, pType, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPatchDisclaimerAgree(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPatchDisclaimerAgreeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatchObjPolicyId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatchObjPolicyIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatchObjPolicyIdLogsEligibleRetryCount(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatchObjPolicyIdLogsEligibleRetryCountRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatchObjPolicyIdSoftwareTitleConfigurationId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatchObjPolicyIdSoftwareTitleConfigurationIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatchObjSoftwareTitleIdPolicies(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatchObjSoftwareTitleIdPoliciesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatchObjSoftwareTitleConfigurationId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatchObjSoftwareTitleConfigurationIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatchObjId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatchObjIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPatchObjIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPatchObjIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPatchObjId(ctx context.Context, id int, body PutPatchObjIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPatchObjIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatchObjIdVersions(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatchObjIdVersionsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatchObjsPolicyId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatchObjsPolicyIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatchOnDashboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatchOnDashboardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatchPatchPolicies(ctx context.Context, params *GetPatchPatchPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatchPatchPoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePatchPatchPoliciesIdDashboard(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePatchPatchPoliciesIdDashboardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatchPatchPoliciesIdDashboard(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatchPatchPoliciesIdDashboardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPatchPatchPoliciesIdDashboard(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPatchPatchPoliciesIdDashboardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatchPatchPoliciesIdLogs(ctx context.Context, id int, params *GetPatchPatchPoliciesIdLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatchPatchPoliciesIdLogsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPatchRetryPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPatchRetryPolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPatchRetryPolicy(ctx context.Context, body PostPatchRetryPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPatchRetryPolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPatchSearchActivePatchHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPatchSearchActivePatchHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPatchSearchActivePatchHistory(ctx context.Context, body PostPatchSearchActivePatchHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPatchSearchActivePatchHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPatchSearchPatchPolicyLogsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPatchSearchPatchPolicyLogsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPatchSearchPatchPolicyLogs(ctx context.Context, body PostPatchSearchPatchPolicyLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPatchSearchPatchPolicyLogsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPatchSvcDisclaimerAgree(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPatchSvcDisclaimerAgreeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPatchSvcRetryPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPatchSvcRetryPolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPatchSvcRetryPolicy(ctx context.Context, body PostPatchSvcRetryPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPatchSvcRetryPolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatchId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatchIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPatchIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPatchIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPatchId(ctx context.Context, id int, body PutPatchIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPatchIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPatchIdVersions(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPatchIdVersionsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewComputers(ctx context.Context, params *GetPreviewComputersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewComputersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewEnrollmentAccessGroups(ctx context.Context, params *GetPreviewEnrollmentAccessGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewEnrollmentAccessGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPreviewEnrollmentAccessGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPreviewEnrollmentAccessGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPreviewEnrollmentAccessGroups(ctx context.Context, body PostPreviewEnrollmentAccessGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPreviewEnrollmentAccessGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePreviewEnrollmentAccessGroupsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePreviewEnrollmentAccessGroupsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewEnrollmentAccessGroupsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewEnrollmentAccessGroupsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPreviewEnrollmentAccessGroupsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPreviewEnrollmentAccessGroupsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPreviewEnrollmentAccessGroupsId(ctx context.Context, id string, body PutPreviewEnrollmentAccessGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPreviewEnrollmentAccessGroupsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPreviewMdmCommandsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPreviewMdmCommandsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPreviewMdmCommands(ctx context.Context, body PostPreviewMdmCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPreviewMdmCommandsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewRemoteAdministrationConfigurations(ctx context.Context, params *GetPreviewRemoteAdministrationConfigurationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewRemoteAdministrationConfigurationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPreviewRemoteAdministrationConfigurationsTeamViewerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPreviewRemoteAdministrationConfigurationsTeamViewerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPreviewRemoteAdministrationConfigurationsTeamViewer(ctx context.Context, body PostPreviewRemoteAdministrationConfigurationsTeamViewerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPreviewRemoteAdministrationConfigurationsTeamViewerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessions(ctx context.Context, configurationId string, params *GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsRequest(c.Server, configurationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsWithBody(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsRequestWithBody(c.Server, configurationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessions(ctx context.Context, configurationId string, body PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsRequest(c.Server, configurationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionId(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdRequest(c.Server, configurationId, sessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClose(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseRequest(c.Server, configurationId, sessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotification(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationRequest(c.Server, configurationId, sessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatus(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusRequest(c.Server, configurationId, sessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePreviewRemoteAdministrationConfigurationsTeamViewerId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePreviewRemoteAdministrationConfigurationsTeamViewerIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewRemoteAdministrationConfigurationsTeamViewerId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewRemoteAdministrationConfigurationsTeamViewerIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPreviewRemoteAdministrationConfigurationsTeamViewerIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPreviewRemoteAdministrationConfigurationsTeamViewerId(ctx context.Context, id string, body PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPreviewRemoteAdministrationConfigurationsTeamViewerIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSelfServiceBrandingImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSelfServiceBrandingImagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSettingsIssueTomcatSslCertificate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSettingsIssueTomcatSslCertificateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsObjPolicyProperties(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsObjPolicyPropertiesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsObjPolicyPropertiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsObjPolicyPropertiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSettingsObjPolicyProperties(ctx context.Context, body PutSettingsObjPolicyPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSettingsObjPolicyPropertiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettingsSites(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettingsSitesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStartupStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStartupStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemInitializeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemInitializeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemInitialize(ctx context.Context, body PostSystemInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemInitializeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemInitializeDatabaseConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemInitializeDatabaseConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemInitializeDatabaseConnection(ctx context.Context, body PostSystemInitializeDatabaseConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemInitializeDatabaseConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserObjPreferenceKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserObjPreferenceKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserObjPreferenceKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserObjPreferenceKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserObjPreferenceKeyWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserObjPreferenceKeyRequestWithBody(c.Server, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserObjPreferenceKey(ctx context.Context, key string, body PutUserObjPreferenceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserObjPreferenceKeyRequest(c.Server, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUpdateSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUpdateSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUpdateSession(ctx context.Context, body PostUserUpdateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUpdateSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AdueSessionTokenSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AdueSessionTokenSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1AdueSessionTokenSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1AdueSessionTokenSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1AdueSessionTokenSettings(ctx context.Context, body PutV1AdueSessionTokenSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1AdueSessionTokenSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AdvancedMobileDeviceSearches(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AdvancedMobileDeviceSearchesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AdvancedMobileDeviceSearchesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AdvancedMobileDeviceSearchesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AdvancedMobileDeviceSearches(ctx context.Context, body PostV1AdvancedMobileDeviceSearchesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AdvancedMobileDeviceSearchesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AdvancedMobileDeviceSearchesChoices(ctx context.Context, params *GetV1AdvancedMobileDeviceSearchesChoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AdvancedMobileDeviceSearchesChoicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AdvancedMobileDeviceSearchesDeleteMultipleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AdvancedMobileDeviceSearchesDeleteMultipleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AdvancedMobileDeviceSearchesDeleteMultiple(ctx context.Context, body PostV1AdvancedMobileDeviceSearchesDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AdvancedMobileDeviceSearchesDeleteMultipleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1AdvancedMobileDeviceSearchesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1AdvancedMobileDeviceSearchesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AdvancedMobileDeviceSearchesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AdvancedMobileDeviceSearchesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1AdvancedMobileDeviceSearchesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1AdvancedMobileDeviceSearchesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1AdvancedMobileDeviceSearchesId(ctx context.Context, id string, body PutV1AdvancedMobileDeviceSearchesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1AdvancedMobileDeviceSearchesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AdvancedUserContentSearches(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AdvancedUserContentSearchesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AdvancedUserContentSearchesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AdvancedUserContentSearchesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AdvancedUserContentSearches(ctx context.Context, body PostV1AdvancedUserContentSearchesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AdvancedUserContentSearchesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1AdvancedUserContentSearchesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1AdvancedUserContentSearchesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AdvancedUserContentSearchesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AdvancedUserContentSearchesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1AdvancedUserContentSearchesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1AdvancedUserContentSearchesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1AdvancedUserContentSearchesId(ctx context.Context, id string, body PutV1AdvancedUserContentSearchesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1AdvancedUserContentSearchesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AppDynamicsScriptConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AppDynamicsScriptConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AppRequestFormInputFields(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AppRequestFormInputFieldsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AppRequestFormInputFieldsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AppRequestFormInputFieldsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AppRequestFormInputFields(ctx context.Context, body PostV1AppRequestFormInputFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AppRequestFormInputFieldsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1AppRequestFormInputFieldsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1AppRequestFormInputFieldsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1AppRequestFormInputFields(ctx context.Context, body PutV1AppRequestFormInputFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1AppRequestFormInputFieldsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1AppRequestFormInputFieldsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1AppRequestFormInputFieldsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AppRequestFormInputFieldsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AppRequestFormInputFieldsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1AppRequestFormInputFieldsIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1AppRequestFormInputFieldsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1AppRequestFormInputFieldsId(ctx context.Context, id int, body PutV1AppRequestFormInputFieldsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1AppRequestFormInputFieldsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AppRequestSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AppRequestSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1AppRequestSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1AppRequestSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1AppRequestSettings(ctx context.Context, body PutV1AppRequestSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1AppRequestSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AppStoreCountryCodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AppStoreCountryCodesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Auth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AuthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AuthInvalidateToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AuthInvalidateTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AuthKeepAlive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AuthKeepAliveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AuthToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AuthTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AzureAdMigrationReportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AzureAdMigrationReportsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1AzureAdMigrationReports(ctx context.Context, body PostV1AzureAdMigrationReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1AzureAdMigrationReportsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AzureAdMigrationReportsPending(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AzureAdMigrationReportsPendingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AzureAdMigrationReportsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AzureAdMigrationReportsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AzureAdMigrationReportsIdDownload(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AzureAdMigrationReportsIdDownloadRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Buildings(ctx context.Context, params *GetV1BuildingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1BuildingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1BuildingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1BuildingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Buildings(ctx context.Context, body PostV1BuildingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1BuildingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1BuildingsDeleteMultipleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1BuildingsDeleteMultipleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1BuildingsDeleteMultiple(ctx context.Context, body PostV1BuildingsDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1BuildingsDeleteMultipleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1BuildingsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1BuildingsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1BuildingsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1BuildingsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1BuildingsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1BuildingsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1BuildingsId(ctx context.Context, id string, body PutV1BuildingsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1BuildingsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1BuildingsIdHistory(ctx context.Context, id string, params *GetV1BuildingsIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1BuildingsIdHistoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1BuildingsIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1BuildingsIdHistoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1BuildingsIdHistory(ctx context.Context, id string, body PostV1BuildingsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1BuildingsIdHistoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1CacheSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1CacheSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1CacheSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1CacheSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1CacheSettings(ctx context.Context, body PutV1CacheSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1CacheSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Categories(ctx context.Context, params *GetV1CategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1CategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CategoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CategoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Categories(ctx context.Context, body PostV1CategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CategoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CategoriesDeleteMultipleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CategoriesDeleteMultipleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CategoriesDeleteMultiple(ctx context.Context, body PostV1CategoriesDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CategoriesDeleteMultipleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1CategoriesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1CategoriesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1CategoriesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1CategoriesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1CategoriesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1CategoriesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1CategoriesId(ctx context.Context, id string, body PutV1CategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1CategoriesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1CategoriesIdHistory(ctx context.Context, id string, params *GetV1CategoriesIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1CategoriesIdHistoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CategoriesIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CategoriesIdHistoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CategoriesIdHistory(ctx context.Context, id string, body PostV1CategoriesIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CategoriesIdHistoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ClassicLdapId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ClassicLdapIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CloudAzureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CloudAzureRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CloudAzure(ctx context.Context, body PostV1CloudAzureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CloudAzureRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1CloudAzureDefaultsMappings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1CloudAzureDefaultsMappingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1CloudAzureDefaultsServerConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1CloudAzureDefaultsServerConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1CloudAzureId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1CloudAzureIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1CloudAzureId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1CloudAzureIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1CloudAzureIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1CloudAzureIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1CloudAzureId(ctx context.Context, id string, body PutV1CloudAzureIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1CloudAzureIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1CloudIdp(ctx context.Context, params *GetV1CloudIdpParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1CloudIdpRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CloudIdpExportWithBody(ctx context.Context, params *PostV1CloudIdpExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CloudIdpExportRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CloudIdpExport(ctx context.Context, params *PostV1CloudIdpExportParams, body PostV1CloudIdpExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CloudIdpExportRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1CloudIdpId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1CloudIdpIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1CloudIdpIdHistory(ctx context.Context, id string, params *GetV1CloudIdpIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1CloudIdpIdHistoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CloudIdpIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CloudIdpIdHistoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CloudIdpIdHistory(ctx context.Context, id string, body PostV1CloudIdpIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CloudIdpIdHistoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CloudIdpIdTestGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CloudIdpIdTestGroupRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CloudIdpIdTestGroup(ctx context.Context, id string, body PostV1CloudIdpIdTestGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CloudIdpIdTestGroupRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CloudIdpIdTestUserWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CloudIdpIdTestUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CloudIdpIdTestUser(ctx context.Context, id string, body PostV1CloudIdpIdTestUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CloudIdpIdTestUserRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CloudIdpIdTestUserMembershipWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CloudIdpIdTestUserMembershipRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CloudIdpIdTestUserMembership(ctx context.Context, id string, body PostV1CloudIdpIdTestUserMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CloudIdpIdTestUserMembershipRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ComputerInventoryCollectionSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ComputerInventoryCollectionSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ComputerInventoryCollectionSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ComputerInventoryCollectionSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ComputerInventoryCollectionSettings(ctx context.Context, body PatchV1ComputerInventoryCollectionSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ComputerInventoryCollectionSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ComputerInventoryCollectionSettingsCustomPathWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ComputerInventoryCollectionSettingsCustomPathRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ComputerInventoryCollectionSettingsCustomPath(ctx context.Context, body PostV1ComputerInventoryCollectionSettingsCustomPathJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ComputerInventoryCollectionSettingsCustomPathRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ComputerInventoryCollectionSettingsCustomPathId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ComputerInventoryCollectionSettingsCustomPathIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ComputerPrestages(ctx context.Context, params *GetV1ComputerPrestagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ComputerPrestagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ComputerPrestagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ComputerPrestagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ComputerPrestages(ctx context.Context, body PostV1ComputerPrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ComputerPrestagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ComputerPrestagesScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ComputerPrestagesScopeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ComputerPrestagesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ComputerPrestagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ComputerPrestagesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ComputerPrestagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ComputerPrestagesIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ComputerPrestagesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ComputerPrestagesId(ctx context.Context, id int, body PutV1ComputerPrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ComputerPrestagesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ComputerPrestagesIdScopeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ComputerPrestagesIdScopeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ComputerPrestagesIdScope(ctx context.Context, id int, body DeleteV1ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ComputerPrestagesIdScopeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ComputerPrestagesIdScope(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ComputerPrestagesIdScopeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ComputerPrestagesIdScopeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ComputerPrestagesIdScopeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ComputerPrestagesIdScope(ctx context.Context, id int, body PostV1ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ComputerPrestagesIdScopeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ComputerPrestagesIdScopeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ComputerPrestagesIdScopeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ComputerPrestagesIdScope(ctx context.Context, id int, body PutV1ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ComputerPrestagesIdScopeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ComputersInventory(ctx context.Context, params *GetV1ComputersInventoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ComputersInventoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ComputersInventoryDetailId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ComputersInventoryDetailIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ComputersInventoryDetailIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ComputersInventoryDetailIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1ComputersInventoryDetailId(ctx context.Context, id string, body PatchV1ComputersInventoryDetailIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1ComputersInventoryDetailIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ComputersInventoryId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ComputersInventoryIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ComputersInventoryId(ctx context.Context, id string, params *GetV1ComputersInventoryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ComputersInventoryIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ComputersInventoryIdAttachmentsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ComputersInventoryIdAttachmentsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ComputersInventoryIdAttachmentsAttachmentId(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ComputersInventoryIdAttachmentsAttachmentIdRequest(c.Server, id, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ComputersInventoryIdAttachmentsAttachmentId(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ComputersInventoryIdAttachmentsAttachmentIdRequest(c.Server, id, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ComputersInventoryIdViewRecoveryLockPassword(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ComputersInventoryIdViewRecoveryLockPasswordRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ComputersIdRecalculateSmartGroups(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ComputersIdRecalculateSmartGroupsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceId(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceId(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdRequest(c.Server, deviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1CsaToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1CsaTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1CsaToken(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1CsaTokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CsaTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CsaTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1CsaToken(ctx context.Context, body PostV1CsaTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1CsaTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1CsaTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1CsaTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1CsaToken(ctx context.Context, body PutV1CsaTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1CsaTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Departments(ctx context.Context, params *GetV1DepartmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DepartmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DepartmentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DepartmentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Departments(ctx context.Context, body PostV1DepartmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DepartmentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DepartmentsDeleteMultipleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DepartmentsDeleteMultipleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DepartmentsDeleteMultiple(ctx context.Context, body PostV1DepartmentsDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DepartmentsDeleteMultipleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1DepartmentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1DepartmentsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DepartmentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DepartmentsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1DepartmentsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1DepartmentsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1DepartmentsId(ctx context.Context, id string, body PutV1DepartmentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1DepartmentsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DepartmentsIdHistory(ctx context.Context, id string, params *GetV1DepartmentsIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DepartmentsIdHistoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DepartmentsIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DepartmentsIdHistoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DepartmentsIdHistory(ctx context.Context, id string, body PostV1DepartmentsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DepartmentsIdHistoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DeployPackageWithBody(ctx context.Context, params *PostV1DeployPackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DeployPackageRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DeployPackage(ctx context.Context, params *PostV1DeployPackageParams, body PostV1DeployPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DeployPackageRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DeviceCommunicationSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DeviceCommunicationSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1DeviceCommunicationSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1DeviceCommunicationSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1DeviceCommunicationSettings(ctx context.Context, body PutV1DeviceCommunicationSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1DeviceCommunicationSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DeviceCommunicationSettingsHistory(ctx context.Context, params *GetV1DeviceCommunicationSettingsHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DeviceCommunicationSettingsHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DeviceCommunicationSettingsHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DeviceCommunicationSettingsHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DeviceCommunicationSettingsHistory(ctx context.Context, body PostV1DeviceCommunicationSettingsHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DeviceCommunicationSettingsHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DeviceEnrollments(ctx context.Context, params *GetV1DeviceEnrollmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DeviceEnrollmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DeviceEnrollmentsPublicKey(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DeviceEnrollmentsPublicKeyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DeviceEnrollmentsSyncs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DeviceEnrollmentsSyncsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DeviceEnrollmentsUploadTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DeviceEnrollmentsUploadTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DeviceEnrollmentsUploadToken(ctx context.Context, body PostV1DeviceEnrollmentsUploadTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DeviceEnrollmentsUploadTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1DeviceEnrollmentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1DeviceEnrollmentsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DeviceEnrollmentsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DeviceEnrollmentsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1DeviceEnrollmentsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1DeviceEnrollmentsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1DeviceEnrollmentsId(ctx context.Context, id string, body PutV1DeviceEnrollmentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1DeviceEnrollmentsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DeviceEnrollmentsIdDevices(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DeviceEnrollmentsIdDevicesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DeviceEnrollmentsIdDisownWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DeviceEnrollmentsIdDisownRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DeviceEnrollmentsIdDisown(ctx context.Context, id string, body PostV1DeviceEnrollmentsIdDisownJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DeviceEnrollmentsIdDisownRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DeviceEnrollmentsIdHistory(ctx context.Context, id string, params *GetV1DeviceEnrollmentsIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DeviceEnrollmentsIdHistoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DeviceEnrollmentsIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DeviceEnrollmentsIdHistoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DeviceEnrollmentsIdHistory(ctx context.Context, id string, body PostV1DeviceEnrollmentsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DeviceEnrollmentsIdHistoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DeviceEnrollmentsIdSyncs(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DeviceEnrollmentsIdSyncsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DeviceEnrollmentsIdSyncsLatest(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DeviceEnrollmentsIdSyncsLatestRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1DeviceEnrollmentsIdUploadTokenWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1DeviceEnrollmentsIdUploadTokenRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1DeviceEnrollmentsIdUploadToken(ctx context.Context, id string, body PutV1DeviceEnrollmentsIdUploadTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1DeviceEnrollmentsIdUploadTokenRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Ebooks(ctx context.Context, params *GetV1EbooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EbooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EbooksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EbooksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EbooksIdScope(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EbooksIdScopeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Engage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EngageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1EngageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EngageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1Engage(ctx context.Context, body PutV1EngageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EngageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EngageHistory(ctx context.Context, params *GetV1EngageHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EngageHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EngageHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EngageHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EngageHistory(ctx context.Context, body PostV1EngageHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EngageHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Enrollment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1EnrollmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EnrollmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1Enrollment(ctx context.Context, body PutV1EnrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EnrollmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentCustomization(ctx context.Context, params *GetV1EnrollmentCustomizationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentCustomizationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentCustomizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentCustomizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentCustomization(ctx context.Context, body PostV1EnrollmentCustomizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentCustomizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentCustomizationImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentCustomizationImagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentCustomizationParseMarkdownWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentCustomizationParseMarkdownRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentCustomizationParseMarkdown(ctx context.Context, body PostV1EnrollmentCustomizationParseMarkdownJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentCustomizationParseMarkdownRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1EnrollmentCustomizationId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1EnrollmentCustomizationIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentCustomizationId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentCustomizationIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1EnrollmentCustomizationIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EnrollmentCustomizationIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1EnrollmentCustomizationId(ctx context.Context, id int, body PutV1EnrollmentCustomizationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EnrollmentCustomizationIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentCustomizationIdAll(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentCustomizationIdAllRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1EnrollmentCustomizationIdAllPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1EnrollmentCustomizationIdAllPanelIdRequest(c.Server, id, panelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentCustomizationIdAllPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentCustomizationIdAllPanelIdRequest(c.Server, id, panelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentCustomizationIdHistory(ctx context.Context, id int, params *GetV1EnrollmentCustomizationIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentCustomizationIdHistoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentCustomizationIdHistoryWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentCustomizationIdHistoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentCustomizationIdHistory(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentCustomizationIdHistoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentCustomizationIdLdapWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentCustomizationIdLdapRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentCustomizationIdLdap(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdLdapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentCustomizationIdLdapRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1EnrollmentCustomizationIdLdapPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1EnrollmentCustomizationIdLdapPanelIdRequest(c.Server, id, panelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentCustomizationIdLdapPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentCustomizationIdLdapPanelIdRequest(c.Server, id, panelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1EnrollmentCustomizationIdLdapPanelIdWithBody(ctx context.Context, id int, panelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EnrollmentCustomizationIdLdapPanelIdRequestWithBody(c.Server, id, panelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1EnrollmentCustomizationIdLdapPanelId(ctx context.Context, id int, panelId int, body PutV1EnrollmentCustomizationIdLdapPanelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EnrollmentCustomizationIdLdapPanelIdRequest(c.Server, id, panelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentCustomizationIdPrestages(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentCustomizationIdPrestagesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentCustomizationIdSsoWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentCustomizationIdSsoRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentCustomizationIdSso(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdSsoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentCustomizationIdSsoRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1EnrollmentCustomizationIdSsoPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1EnrollmentCustomizationIdSsoPanelIdRequest(c.Server, id, panelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentCustomizationIdSsoPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentCustomizationIdSsoPanelIdRequest(c.Server, id, panelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1EnrollmentCustomizationIdSsoPanelIdWithBody(ctx context.Context, id int, panelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EnrollmentCustomizationIdSsoPanelIdRequestWithBody(c.Server, id, panelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1EnrollmentCustomizationIdSsoPanelId(ctx context.Context, id int, panelId int, body PutV1EnrollmentCustomizationIdSsoPanelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EnrollmentCustomizationIdSsoPanelIdRequest(c.Server, id, panelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentCustomizationIdTextWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentCustomizationIdTextRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentCustomizationIdText(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdTextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentCustomizationIdTextRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1EnrollmentCustomizationIdTextPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1EnrollmentCustomizationIdTextPanelIdRequest(c.Server, id, panelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentCustomizationIdTextPanelId(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentCustomizationIdTextPanelIdRequest(c.Server, id, panelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1EnrollmentCustomizationIdTextPanelIdWithBody(ctx context.Context, id int, panelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EnrollmentCustomizationIdTextPanelIdRequestWithBody(c.Server, id, panelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1EnrollmentCustomizationIdTextPanelId(ctx context.Context, id int, panelId int, body PutV1EnrollmentCustomizationIdTextPanelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EnrollmentCustomizationIdTextPanelIdRequest(c.Server, id, panelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentCustomizationIdTextPanelIdMarkdown(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentCustomizationIdTextPanelIdMarkdownRequest(c.Server, id, panelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentAccessGroups(ctx context.Context, params *GetV1EnrollmentAccessGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentAccessGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1EnrollmentAccessGroupsGroupKey(ctx context.Context, groupKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1EnrollmentAccessGroupsGroupKeyRequest(c.Server, groupKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentAccessGroupsGroupKey(ctx context.Context, groupKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentAccessGroupsGroupKeyRequest(c.Server, groupKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1EnrollmentAccessGroupsGroupKeyWithBody(ctx context.Context, groupKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EnrollmentAccessGroupsGroupKeyRequestWithBody(c.Server, groupKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1EnrollmentAccessGroupsGroupKey(ctx context.Context, groupKey string, body PutV1EnrollmentAccessGroupsGroupKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EnrollmentAccessGroupsGroupKeyRequest(c.Server, groupKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentFilteredLanguageCodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentFilteredLanguageCodesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentHistory(ctx context.Context, params *GetV1EnrollmentHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1EnrollmentHistory(ctx context.Context, body PostV1EnrollmentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrollmentHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentLanguageCodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentLanguageCodesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentLanguages(ctx context.Context, params *GetV1EnrollmentLanguagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentLanguagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1EnrollmentLanguagesLanguage(ctx context.Context, language string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1EnrollmentLanguagesLanguageRequest(c.Server, language)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1EnrollmentLanguagesLanguage(ctx context.Context, language string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1EnrollmentLanguagesLanguageRequest(c.Server, language)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1EnrollmentLanguagesLanguageWithBody(ctx context.Context, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EnrollmentLanguagesLanguageRequestWithBody(c.Server, language, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1EnrollmentLanguagesLanguage(ctx context.Context, language string, body PutV1EnrollmentLanguagesLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1EnrollmentLanguagesLanguageRequest(c.Server, language, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IconWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IconRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1IconId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1IconIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1InventoryInformation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1InventoryInformationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1InventoryPreload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1InventoryPreloadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1InventoryPreload(ctx context.Context, params *GetV1InventoryPreloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1InventoryPreloadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1InventoryPreloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1InventoryPreloadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1InventoryPreload(ctx context.Context, body PostV1InventoryPreloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1InventoryPreloadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1InventoryPreloadCsvTemplate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1InventoryPreloadCsvTemplateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1InventoryPreloadHistory(ctx context.Context, params *GetV1InventoryPreloadHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1InventoryPreloadHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1InventoryPreloadHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1InventoryPreloadHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1InventoryPreloadHistory(ctx context.Context, body PostV1InventoryPreloadHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1InventoryPreloadHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1InventoryPreloadValidateCsvWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1InventoryPreloadValidateCsvRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1InventoryPreloadId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1InventoryPreloadIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1InventoryPreloadId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1InventoryPreloadIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1InventoryPreloadIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1InventoryPreloadIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1InventoryPreloadId(ctx context.Context, id int, body PutV1InventoryPreloadIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1InventoryPreloadIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JamfConnect(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JamfConnectRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JamfConnectConfigProfiles(ctx context.Context, params *GetV1JamfConnectConfigProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JamfConnectConfigProfilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1JamfConnectConfigProfilesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1JamfConnectConfigProfilesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1JamfConnectConfigProfilesId(ctx context.Context, id string, body PutV1JamfConnectConfigProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1JamfConnectConfigProfilesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JamfConnectDeploymentsIdTasks(ctx context.Context, id string, params *GetV1JamfConnectDeploymentsIdTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JamfConnectDeploymentsIdTasksRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JamfConnectDeploymentsIdTasksRetryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JamfConnectDeploymentsIdTasksRetryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JamfConnectDeploymentsIdTasksRetry(ctx context.Context, id string, body PostV1JamfConnectDeploymentsIdTasksRetryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JamfConnectDeploymentsIdTasksRetryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JamfConnectHistory(ctx context.Context, params *GetV1JamfConnectHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JamfConnectHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JamfConnectHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JamfConnectHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JamfConnectHistory(ctx context.Context, body PostV1JamfConnectHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JamfConnectHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JamfManagementFrameworkRedeployId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JamfManagementFrameworkRedeployIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JamfPackage(ctx context.Context, params *GetV1JamfPackageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JamfPackageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JamfProInformation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JamfProInformationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JamfProServerUrl(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JamfProServerUrlRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1JamfProServerUrlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1JamfProServerUrlRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1JamfProServerUrl(ctx context.Context, body PutV1JamfProServerUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1JamfProServerUrlRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JamfProServerUrlHistory(ctx context.Context, params *GetV1JamfProServerUrlHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JamfProServerUrlHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JamfProServerUrlHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JamfProServerUrlHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JamfProServerUrlHistory(ctx context.Context, body PostV1JamfProServerUrlHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JamfProServerUrlHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JamfProVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JamfProVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1JamfProtect(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1JamfProtectRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JamfProtect(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JamfProtectRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1JamfProtectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1JamfProtectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1JamfProtect(ctx context.Context, body PutV1JamfProtectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1JamfProtectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JamfProtectDeploymentsIdTasks(ctx context.Context, id string, params *GetV1JamfProtectDeploymentsIdTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JamfProtectDeploymentsIdTasksRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JamfProtectDeploymentsIdTasksRetryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JamfProtectDeploymentsIdTasksRetryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JamfProtectDeploymentsIdTasksRetry(ctx context.Context, id string, body PostV1JamfProtectDeploymentsIdTasksRetryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JamfProtectDeploymentsIdTasksRetryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JamfProtectHistory(ctx context.Context, params *GetV1JamfProtectHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JamfProtectHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JamfProtectHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JamfProtectHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JamfProtectHistory(ctx context.Context, body PostV1JamfProtectHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JamfProtectHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1JamfProtectPlans(ctx context.Context, params *GetV1JamfProtectPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1JamfProtectPlansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JamfProtectPlansSync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JamfProtectPlansSyncRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JamfProtectRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JamfProtectRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1JamfProtectRegister(ctx context.Context, body PostV1JamfProtectRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1JamfProtectRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1LdapKeystoreVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1LdapKeystoreVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1LdapKeystoreVerify(ctx context.Context, body PostV1LdapKeystoreVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1LdapKeystoreVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1LdapGroups(ctx context.Context, params *GetV1LdapGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1LdapGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1LdapLdapServers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1LdapLdapServersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1LdapServers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1LdapServersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Locales(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1LocalesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MacosManagedSoftwareUpdatesAvailableUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MacosManagedSoftwareUpdatesAvailableUpdatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MacosManagedSoftwareUpdatesSendUpdatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MacosManagedSoftwareUpdatesSendUpdatesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MacosManagedSoftwareUpdatesSendUpdates(ctx context.Context, body PostV1MacosManagedSoftwareUpdatesSendUpdatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MacosManagedSoftwareUpdatesSendUpdatesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MdmCommands(ctx context.Context, params *GetV1MdmCommandsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MdmCommandsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MdmRenewProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MdmRenewProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MdmRenewProfile(ctx context.Context, body PostV1MdmRenewProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MdmRenewProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MobileDeviceEnrollmentProfileIdDownloadProfile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MobileDeviceEnrollmentProfileIdDownloadProfileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MobileDeviceGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MobileDeviceGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MobileDevicePrestages(ctx context.Context, params *GetV1MobileDevicePrestagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MobileDevicePrestagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MobileDevicePrestagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MobileDevicePrestagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MobileDevicePrestages(ctx context.Context, body PostV1MobileDevicePrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MobileDevicePrestagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MobileDevicePrestagesScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MobileDevicePrestagesScopeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MobileDevicePrestagesSync(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MobileDevicePrestagesSyncRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MobileDevicePrestagesSyncId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MobileDevicePrestagesSyncIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MobileDevicePrestagesSyncIdLatest(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MobileDevicePrestagesSyncIdLatestRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1MobileDevicePrestagesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1MobileDevicePrestagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MobileDevicePrestagesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MobileDevicePrestagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1MobileDevicePrestagesIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1MobileDevicePrestagesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1MobileDevicePrestagesId(ctx context.Context, id int, body PutV1MobileDevicePrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1MobileDevicePrestagesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1MobileDevicePrestagesIdAttachmentsWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1MobileDevicePrestagesIdAttachmentsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1MobileDevicePrestagesIdAttachments(ctx context.Context, id int, body DeleteV1MobileDevicePrestagesIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1MobileDevicePrestagesIdAttachmentsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MobileDevicePrestagesIdAttachments(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MobileDevicePrestagesIdAttachmentsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MobileDevicePrestagesIdAttachmentsWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MobileDevicePrestagesIdAttachmentsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MobileDevicePrestagesIdHistory(ctx context.Context, id int, params *GetV1MobileDevicePrestagesIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MobileDevicePrestagesIdHistoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MobileDevicePrestagesIdHistoryWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MobileDevicePrestagesIdHistoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MobileDevicePrestagesIdHistory(ctx context.Context, id int, body PostV1MobileDevicePrestagesIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MobileDevicePrestagesIdHistoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1MobileDevicePrestagesIdScopeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1MobileDevicePrestagesIdScopeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1MobileDevicePrestagesIdScope(ctx context.Context, id int, body DeleteV1MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1MobileDevicePrestagesIdScopeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MobileDevicePrestagesIdScope(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MobileDevicePrestagesIdScopeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MobileDevicePrestagesIdScopeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MobileDevicePrestagesIdScopeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MobileDevicePrestagesIdScope(ctx context.Context, id int, body PostV1MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MobileDevicePrestagesIdScopeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1MobileDevicePrestagesIdScopeWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1MobileDevicePrestagesIdScopeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1MobileDevicePrestagesIdScope(ctx context.Context, id int, body PutV1MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1MobileDevicePrestagesIdScopeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MobileDevices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MobileDevicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MobileDevicesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MobileDevicesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1MobileDevicesIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1MobileDevicesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1MobileDevicesId(ctx context.Context, id int, body PatchV1MobileDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1MobileDevicesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1MobileDevicesIdDetail(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1MobileDevicesIdDetailRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MobileDevicesIdRecalculateSmartGroups(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MobileDevicesIdRecalculateSmartGroupsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Notifications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1NotificationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1NotificationsTypeId(ctx context.Context, pType NotificationType, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1NotificationsTypeIdRequest(c.Server, pType, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ParentApp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ParentAppRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ParentAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ParentAppRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ParentApp(ctx context.Context, body PutV1ParentAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ParentAppRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ParentAppHistory(ctx context.Context, params *GetV1ParentAppHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ParentAppHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ParentAppHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ParentAppHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ParentAppHistory(ctx context.Context, body PostV1ParentAppHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ParentAppHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PkiCertificateAuthorityActive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PkiCertificateAuthorityActiveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PkiCertificateAuthorityActiveDer(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PkiCertificateAuthorityActiveDerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PkiCertificateAuthorityActivePem(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PkiCertificateAuthorityActivePemRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PkiCertificateAuthorityId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PkiCertificateAuthorityIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PkiCertificateAuthorityIdDer(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PkiCertificateAuthorityIdDerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PkiCertificateAuthorityIdPem(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PkiCertificateAuthorityIdPemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PkiVenafiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PkiVenafiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PkiVenafi(ctx context.Context, body PostV1PkiVenafiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PkiVenafiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1PkiVenafiId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1PkiVenafiIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PkiVenafiId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PkiVenafiIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1PkiVenafiIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1PkiVenafiIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1PkiVenafiId(ctx context.Context, id string, body PatchV1PkiVenafiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1PkiVenafiIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PkiVenafiIdConnectionStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PkiVenafiIdConnectionStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PkiVenafiIdDependentProfiles(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PkiVenafiIdDependentProfilesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PkiVenafiIdHistory(ctx context.Context, id string, params *GetV1PkiVenafiIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PkiVenafiIdHistoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PkiVenafiIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PkiVenafiIdHistoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PkiVenafiIdHistory(ctx context.Context, id string, body PostV1PkiVenafiIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PkiVenafiIdHistoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PkiVenafiIdJamfPublicKey(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PkiVenafiIdJamfPublicKeyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PkiVenafiIdJamfPublicKeyRegenerate(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PkiVenafiIdJamfPublicKeyRegenerateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1PkiVenafiIdProxyTrustStore(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1PkiVenafiIdProxyTrustStoreRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PkiVenafiIdProxyTrustStore(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PkiVenafiIdProxyTrustStoreRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1PkiVenafiIdProxyTrustStoreWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1PkiVenafiIdProxyTrustStoreRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1PolicyProperties(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1PolicyPropertiesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1PolicyPropertiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1PolicyPropertiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1PolicyProperties(ctx context.Context, body PutV1PolicyPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1PolicyPropertiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Reenrollment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ReenrollmentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ReenrollmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ReenrollmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1Reenrollment(ctx context.Context, body PutV1ReenrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ReenrollmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ReenrollmentHistory(ctx context.Context, params *GetV1ReenrollmentHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ReenrollmentHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ReenrollmentHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ReenrollmentHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ReenrollmentHistory(ctx context.Context, body PostV1ReenrollmentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ReenrollmentHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ReenrollmentHistoryExportWithBody(ctx context.Context, params *PostV1ReenrollmentHistoryExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ReenrollmentHistoryExportRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ReenrollmentHistoryExport(ctx context.Context, params *PostV1ReenrollmentHistoryExportParams, body PostV1ReenrollmentHistoryExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ReenrollmentHistoryExportRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Scripts(ctx context.Context, params *GetV1ScriptsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ScriptsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ScriptsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ScriptsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Scripts(ctx context.Context, body PostV1ScriptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ScriptsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ScriptsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ScriptsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ScriptsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ScriptsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ScriptsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ScriptsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1ScriptsId(ctx context.Context, id string, body PutV1ScriptsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1ScriptsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ScriptsIdDownload(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ScriptsIdDownloadRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ScriptsIdHistory(ctx context.Context, id string, params *GetV1ScriptsIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ScriptsIdHistoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ScriptsIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ScriptsIdHistoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ScriptsIdHistory(ctx context.Context, id string, body PostV1ScriptsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ScriptsIdHistoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SearchMobileDevicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SearchMobileDevicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SearchMobileDevices(ctx context.Context, body PostV1SearchMobileDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SearchMobileDevicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SelfServiceBrandingIos(ctx context.Context, params *GetV1SelfServiceBrandingIosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SelfServiceBrandingIosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SelfServiceBrandingIosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SelfServiceBrandingIosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SelfServiceBrandingIos(ctx context.Context, body PostV1SelfServiceBrandingIosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SelfServiceBrandingIosRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1SelfServiceBrandingIosId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1SelfServiceBrandingIosIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SelfServiceBrandingIosId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SelfServiceBrandingIosIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1SelfServiceBrandingIosIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1SelfServiceBrandingIosIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1SelfServiceBrandingIosId(ctx context.Context, id string, body PutV1SelfServiceBrandingIosIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1SelfServiceBrandingIosIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SelfServiceBrandingMacos(ctx context.Context, params *GetV1SelfServiceBrandingMacosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SelfServiceBrandingMacosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SelfServiceBrandingMacosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SelfServiceBrandingMacosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SelfServiceBrandingMacos(ctx context.Context, body PostV1SelfServiceBrandingMacosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SelfServiceBrandingMacosRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1SelfServiceBrandingMacosId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1SelfServiceBrandingMacosIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SelfServiceBrandingMacosId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SelfServiceBrandingMacosIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1SelfServiceBrandingMacosIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1SelfServiceBrandingMacosIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1SelfServiceBrandingMacosId(ctx context.Context, id string, body PutV1SelfServiceBrandingMacosIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1SelfServiceBrandingMacosIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SelfServiceSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SelfServiceSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1SelfServiceSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1SelfServiceSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1SelfServiceSettings(ctx context.Context, body PutV1SelfServiceSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1SelfServiceSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Sites(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SitesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SmartComputerGroupsIdRecalculate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SmartComputerGroupsIdRecalculateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SmartMobileDeviceGroupsIdRecalculate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SmartMobileDeviceGroupsIdRecalculateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SmartUserGroupsIdRecalculate(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SmartUserGroupsIdRecalculateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Sso(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SsoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1SsoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1SsoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1Sso(ctx context.Context, body PutV1SsoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1SsoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1SsoCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1SsoCertRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SsoCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SsoCertRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SsoCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SsoCertRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1SsoCertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1SsoCertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1SsoCert(ctx context.Context, body PutV1SsoCertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1SsoCertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SsoCertDownload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SsoCertDownloadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SsoCertParseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SsoCertParseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SsoCertParse(ctx context.Context, body PostV1SsoCertParseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SsoCertParseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SsoDependencies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SsoDependenciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SsoDisable(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SsoDisableRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SsoHistory(ctx context.Context, params *GetV1SsoHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SsoHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SsoHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SsoHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SsoHistory(ctx context.Context, body PostV1SsoHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SsoHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SsoMetadataDownload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SsoMetadataDownloadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SsoValidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SsoValidateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SsoValidate(ctx context.Context, body PostV1SsoValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SsoValidateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1StaticUserGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1StaticUserGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1StaticUserGroupsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1StaticUserGroupsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SupervisionIdentities(ctx context.Context, params *GetV1SupervisionIdentitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SupervisionIdentitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SupervisionIdentitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SupervisionIdentitiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SupervisionIdentities(ctx context.Context, body PostV1SupervisionIdentitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SupervisionIdentitiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SupervisionIdentitiesUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SupervisionIdentitiesUploadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SupervisionIdentitiesUpload(ctx context.Context, body PostV1SupervisionIdentitiesUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SupervisionIdentitiesUploadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1SupervisionIdentitiesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1SupervisionIdentitiesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SupervisionIdentitiesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SupervisionIdentitiesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1SupervisionIdentitiesIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1SupervisionIdentitiesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1SupervisionIdentitiesId(ctx context.Context, id int, body PutV1SupervisionIdentitiesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1SupervisionIdentitiesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SupervisionIdentitiesIdDownload(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SupervisionIdentitiesIdDownloadRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SystemInitializeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SystemInitializeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SystemInitialize(ctx context.Context, body PostV1SystemInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SystemInitializeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SystemInitializeDatabaseConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SystemInitializeDatabaseConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SystemInitializeDatabaseConnection(ctx context.Context, body PostV1SystemInitializeDatabaseConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SystemInitializeDatabaseConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1TeacherApp(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1TeacherAppRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1TeacherAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1TeacherAppRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1TeacherApp(ctx context.Context, body PutV1TeacherAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1TeacherAppRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1TeacherAppHistory(ctx context.Context, params *GetV1TeacherAppHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1TeacherAppHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1TeacherAppHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1TeacherAppHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1TeacherAppHistory(ctx context.Context, body PostV1TeacherAppHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1TeacherAppHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1TimeZones(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1TimeZonesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1UserPreferencesKeyId(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1UserPreferencesKeyIdRequest(c.Server, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1UserPreferencesKeyId(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1UserPreferencesKeyIdRequest(c.Server, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1UserPreferencesKeyIdWithBody(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1UserPreferencesKeyIdRequestWithBody(c.Server, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1UserPreferencesKeyId(ctx context.Context, keyId string, body PutV1UserPreferencesKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1UserPreferencesKeyIdRequest(c.Server, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UsersIdRecalculateSmartGroups(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersIdRecalculateSmartGroupsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1VolumePurchasingLocations(ctx context.Context, params *GetV1VolumePurchasingLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1VolumePurchasingLocationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1VolumePurchasingLocationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1VolumePurchasingLocationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1VolumePurchasingLocations(ctx context.Context, body PostV1VolumePurchasingLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1VolumePurchasingLocationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1VolumePurchasingLocationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1VolumePurchasingLocationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1VolumePurchasingLocationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1VolumePurchasingLocationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV1VolumePurchasingLocationsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV1VolumePurchasingLocationsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1VolumePurchasingLocationsIdHistory(ctx context.Context, id string, params *GetV1VolumePurchasingLocationsIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1VolumePurchasingLocationsIdHistoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1VolumePurchasingLocationsIdReclaim(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1VolumePurchasingLocationsIdReclaimRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1VolumePurchasingLocationsIdRevokeLicenses(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1VolumePurchasingLocationsIdRevokeLicensesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1VolumePurchasingSubscriptions(ctx context.Context, params *GetV1VolumePurchasingSubscriptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1VolumePurchasingSubscriptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1VolumePurchasingSubscriptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1VolumePurchasingSubscriptionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1VolumePurchasingSubscriptions(ctx context.Context, body PostV1VolumePurchasingSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1VolumePurchasingSubscriptionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1VolumePurchasingSubscriptionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1VolumePurchasingSubscriptionsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1VolumePurchasingSubscriptionsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1VolumePurchasingSubscriptionsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1VolumePurchasingSubscriptionsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1VolumePurchasingSubscriptionsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1VolumePurchasingSubscriptionsId(ctx context.Context, id string, body PutV1VolumePurchasingSubscriptionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1VolumePurchasingSubscriptionsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CheckIn(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CheckInRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2CheckInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2CheckInRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2CheckIn(ctx context.Context, body PutV2CheckInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2CheckInRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CheckInHistory(ctx context.Context, params *GetV2CheckInHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CheckInHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CheckInHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CheckInHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CheckInHistory(ctx context.Context, body PostV2CheckInHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CheckInHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CloudLdapsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CloudLdapsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2CloudLdaps(ctx context.Context, body PostV2CloudLdapsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2CloudLdapsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CloudLdapsDefaultsProviderMappings(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CloudLdapsDefaultsProviderMappingsRequest(c.Server, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CloudLdapsDefaultsProviderServerConfiguration(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CloudLdapsDefaultsProviderServerConfigurationRequest(c.Server, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2CloudLdapsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2CloudLdapsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CloudLdapsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CloudLdapsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2CloudLdapsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2CloudLdapsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2CloudLdapsId(ctx context.Context, id string, body PutV2CloudLdapsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2CloudLdapsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CloudLdapsIdConnectionBind(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CloudLdapsIdConnectionBindRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CloudLdapsIdConnectionSearch(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CloudLdapsIdConnectionSearchRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CloudLdapsIdConnectionStatus(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CloudLdapsIdConnectionStatusRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CloudLdapsIdMappings(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CloudLdapsIdMappingsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2CloudLdapsIdMappingsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2CloudLdapsIdMappingsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2CloudLdapsIdMappings(ctx context.Context, id string, body PutV2CloudLdapsIdMappingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2CloudLdapsIdMappingsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ComputerPrestages(ctx context.Context, params *GetV2ComputerPrestagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ComputerPrestagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ComputerPrestagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2ComputerPrestagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ComputerPrestages(ctx context.Context, body PostV2ComputerPrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2ComputerPrestagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ComputerPrestagesScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ComputerPrestagesScopeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2ComputerPrestagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2ComputerPrestagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ComputerPrestagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ComputerPrestagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2ComputerPrestagesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2ComputerPrestagesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2ComputerPrestagesId(ctx context.Context, id string, body PutV2ComputerPrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2ComputerPrestagesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ComputerPrestagesIdScope(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ComputerPrestagesIdScopeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ComputerPrestagesIdScopeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2ComputerPrestagesIdScopeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ComputerPrestagesIdScope(ctx context.Context, id string, body PostV2ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2ComputerPrestagesIdScopeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2ComputerPrestagesIdScopeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2ComputerPrestagesIdScopeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2ComputerPrestagesIdScope(ctx context.Context, id string, body PutV2ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2ComputerPrestagesIdScopeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ComputerPrestagesIdScopeDeleteMultipleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2ComputerPrestagesIdScopeDeleteMultipleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2ComputerPrestagesIdScopeDeleteMultiple(ctx context.Context, id string, body PostV2ComputerPrestagesIdScopeDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2ComputerPrestagesIdScopeDeleteMultipleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Enrollment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2EnrollmentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2EnrollmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2EnrollmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2Enrollment(ctx context.Context, body PutV2EnrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2EnrollmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2EnrollmentCustomizations(ctx context.Context, params *GetV2EnrollmentCustomizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2EnrollmentCustomizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2EnrollmentCustomizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2EnrollmentCustomizationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2EnrollmentCustomizations(ctx context.Context, body PostV2EnrollmentCustomizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2EnrollmentCustomizationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2EnrollmentCustomizationsImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2EnrollmentCustomizationsImagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2EnrollmentCustomizationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2EnrollmentCustomizationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2EnrollmentCustomizationsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2EnrollmentCustomizationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2EnrollmentCustomizationsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2EnrollmentCustomizationsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2EnrollmentCustomizationsId(ctx context.Context, id string, body PutV2EnrollmentCustomizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2EnrollmentCustomizationsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2EnrollmentCustomizationsIdHistory(ctx context.Context, id string, params *GetV2EnrollmentCustomizationsIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2EnrollmentCustomizationsIdHistoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2EnrollmentCustomizationsIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2EnrollmentCustomizationsIdHistoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2EnrollmentCustomizationsIdHistory(ctx context.Context, id string, body PostV2EnrollmentCustomizationsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2EnrollmentCustomizationsIdHistoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2EnrollmentCustomizationsIdPrestages(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2EnrollmentCustomizationsIdPrestagesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2EnrollmentAccessGroups(ctx context.Context, params *GetV2EnrollmentAccessGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2EnrollmentAccessGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2EnrollmentAccessGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2EnrollmentAccessGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2EnrollmentAccessGroups(ctx context.Context, body PostV2EnrollmentAccessGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2EnrollmentAccessGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2EnrollmentAccessGroupsServerIdGroupId(ctx context.Context, serverId string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2EnrollmentAccessGroupsServerIdGroupIdRequest(c.Server, serverId, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2EnrollmentAccessGroupsServerIdGroupId(ctx context.Context, serverId string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2EnrollmentAccessGroupsServerIdGroupIdRequest(c.Server, serverId, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2EnrollmentAccessGroupsServerIdGroupIdWithBody(ctx context.Context, serverId string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2EnrollmentAccessGroupsServerIdGroupIdRequestWithBody(c.Server, serverId, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2EnrollmentAccessGroupsServerIdGroupId(ctx context.Context, serverId string, groupId string, body PutV2EnrollmentAccessGroupsServerIdGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2EnrollmentAccessGroupsServerIdGroupIdRequest(c.Server, serverId, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2EnrollmentFilteredLanguageCodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2EnrollmentFilteredLanguageCodesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2EnrollmentHistory(ctx context.Context, params *GetV2EnrollmentHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2EnrollmentHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2EnrollmentHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2EnrollmentHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2EnrollmentHistory(ctx context.Context, body PostV2EnrollmentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2EnrollmentHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2EnrollmentHistoryExportWithBody(ctx context.Context, params *PostV2EnrollmentHistoryExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2EnrollmentHistoryExportRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2EnrollmentHistoryExport(ctx context.Context, params *PostV2EnrollmentHistoryExportParams, body PostV2EnrollmentHistoryExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2EnrollmentHistoryExportRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2EnrollmentLanguageCodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2EnrollmentLanguageCodesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2EnrollmentLanguages(ctx context.Context, params *GetV2EnrollmentLanguagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2EnrollmentLanguagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2EnrollmentLanguagesDeleteMultipleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2EnrollmentLanguagesDeleteMultipleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2EnrollmentLanguagesDeleteMultiple(ctx context.Context, body PostV2EnrollmentLanguagesDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2EnrollmentLanguagesDeleteMultipleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2EnrollmentLanguagesLanguageId(ctx context.Context, languageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2EnrollmentLanguagesLanguageIdRequest(c.Server, languageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2EnrollmentLanguagesLanguageId(ctx context.Context, languageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2EnrollmentLanguagesLanguageIdRequest(c.Server, languageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2EnrollmentLanguagesLanguageIdWithBody(ctx context.Context, languageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2EnrollmentLanguagesLanguageIdRequestWithBody(c.Server, languageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2EnrollmentLanguagesLanguageId(ctx context.Context, languageId string, body PutV2EnrollmentLanguagesLanguageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2EnrollmentLanguagesLanguageIdRequest(c.Server, languageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2InventoryPreloadCsv(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2InventoryPreloadCsvRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2InventoryPreloadCsvWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2InventoryPreloadCsvRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2InventoryPreloadCsvTemplate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2InventoryPreloadCsvTemplateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2InventoryPreloadCsvValidateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2InventoryPreloadCsvValidateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2InventoryPreloadEaColumns(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2InventoryPreloadEaColumnsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2InventoryPreloadExportWithBody(ctx context.Context, params *PostV2InventoryPreloadExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2InventoryPreloadExportRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2InventoryPreloadExport(ctx context.Context, params *PostV2InventoryPreloadExportParams, body PostV2InventoryPreloadExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2InventoryPreloadExportRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2InventoryPreloadHistory(ctx context.Context, params *GetV2InventoryPreloadHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2InventoryPreloadHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2InventoryPreloadHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2InventoryPreloadHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2InventoryPreloadHistory(ctx context.Context, body PostV2InventoryPreloadHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2InventoryPreloadHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2InventoryPreloadRecords(ctx context.Context, params *GetV2InventoryPreloadRecordsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2InventoryPreloadRecordsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2InventoryPreloadRecordsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2InventoryPreloadRecordsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2InventoryPreloadRecords(ctx context.Context, body PostV2InventoryPreloadRecordsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2InventoryPreloadRecordsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2InventoryPreloadRecordsDeleteAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2InventoryPreloadRecordsDeleteAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2InventoryPreloadRecordsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2InventoryPreloadRecordsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2InventoryPreloadRecordsId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2InventoryPreloadRecordsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2InventoryPreloadRecordsIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2InventoryPreloadRecordsIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2InventoryPreloadRecordsId(ctx context.Context, id string, body PutV2InventoryPreloadRecordsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2InventoryPreloadRecordsIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2JamfPackage(ctx context.Context, params *GetV2JamfPackageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2JamfPackageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2JamfProInformation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2JamfProInformationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2MobileDevicePrestages(ctx context.Context, params *GetV2MobileDevicePrestagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MobileDevicePrestagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2MobileDevicePrestagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2MobileDevicePrestagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2MobileDevicePrestages(ctx context.Context, body PostV2MobileDevicePrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2MobileDevicePrestagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2MobileDevicePrestagesScope(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MobileDevicePrestagesScopeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2MobileDevicePrestagesSyncs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MobileDevicePrestagesSyncsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2MobileDevicePrestagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2MobileDevicePrestagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2MobileDevicePrestagesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MobileDevicePrestagesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2MobileDevicePrestagesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2MobileDevicePrestagesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2MobileDevicePrestagesId(ctx context.Context, id string, body PutV2MobileDevicePrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2MobileDevicePrestagesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2MobileDevicePrestagesIdAttachments(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MobileDevicePrestagesIdAttachmentsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2MobileDevicePrestagesIdAttachmentsWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2MobileDevicePrestagesIdAttachmentsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2MobileDevicePrestagesIdAttachmentsDeleteMultiple(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2MobileDevicePrestagesIdHistory(ctx context.Context, id string, params *GetV2MobileDevicePrestagesIdHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MobileDevicePrestagesIdHistoryRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2MobileDevicePrestagesIdHistoryWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2MobileDevicePrestagesIdHistoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2MobileDevicePrestagesIdHistory(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2MobileDevicePrestagesIdHistoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2MobileDevicePrestagesIdScope(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MobileDevicePrestagesIdScopeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2MobileDevicePrestagesIdScopeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2MobileDevicePrestagesIdScopeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2MobileDevicePrestagesIdScope(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2MobileDevicePrestagesIdScopeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2MobileDevicePrestagesIdScopeWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2MobileDevicePrestagesIdScopeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2MobileDevicePrestagesIdScope(ctx context.Context, id string, body PutV2MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2MobileDevicePrestagesIdScopeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2MobileDevicePrestagesIdScopeDeleteMultipleWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2MobileDevicePrestagesIdScopeDeleteMultipleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2MobileDevicePrestagesIdScopeDeleteMultiple(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdScopeDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2MobileDevicePrestagesIdScopeDeleteMultipleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2MobileDevicePrestagesIdSyncs(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MobileDevicePrestagesIdSyncsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2MobileDevicePrestagesIdSyncsLatest(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MobileDevicePrestagesIdSyncsLatestRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2MobileDevices(ctx context.Context, params *GetV2MobileDevicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MobileDevicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2MobileDevicesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MobileDevicesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2MobileDevicesIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2MobileDevicesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchV2MobileDevicesId(ctx context.Context, id string, body PatchV2MobileDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchV2MobileDevicesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2MobileDevicesIdDetail(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2MobileDevicesIdDetailRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV2SsoCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV2SsoCertRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SsoCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SsoCertRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2SsoCert(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2SsoCertRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2SsoCertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2SsoCertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV2SsoCert(ctx context.Context, body PutV2SsoCertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV2SsoCertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2SsoCertDownload(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2SsoCertDownloadRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2SsoCertParseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2SsoCertParseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV2SsoCertParse(ctx context.Context, body PostV2SsoCertParseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV2SsoCertParseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3CheckIn(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3CheckInRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV3CheckInWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV3CheckInRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV3CheckIn(ctx context.Context, body PutV3CheckInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV3CheckInRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV3CheckInHistory(ctx context.Context, params *GetV3CheckInHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV3CheckInHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3CheckInHistoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3CheckInHistoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV3CheckInHistory(ctx context.Context, body PostV3CheckInHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV3CheckInHistoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVppAdminAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVppAdminAccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVppSubscriptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVppSubscriptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVppSubscriptionsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVppSubscriptionsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAuthRequest generates requests for GetAuth
func NewGetAuthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthCurrentRequest generates requests for PostAuthCurrent
func NewPostAuthCurrentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/current")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthInvalidateTokenRequest generates requests for PostAuthInvalidateToken
func NewPostAuthInvalidateTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/invalidateToken")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthKeepAliveRequest generates requests for PostAuthKeepAlive
func NewPostAuthKeepAliveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/keepAlive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthTokensRequest generates requests for PostAuthTokens
func NewPostAuthTokensRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDevicesExtensionAttributesRequest generates requests for GetDevicesExtensionAttributes
func NewGetDevicesExtensionAttributesRequest(server string, params *GetDevicesExtensionAttributesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/extensionAttributes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Select != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "select", runtime.ParamLocationQuery, *params.Select); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteInventoryPreloadRequest generates requests for DeleteInventoryPreload
func NewDeleteInventoryPreloadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory-preload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInventoryPreloadRequest generates requests for GetInventoryPreload
func NewGetInventoryPreloadRequest(server string, params *GetInventoryPreloadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory-preload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInventoryPreloadRequest calls the generic PostInventoryPreload builder with application/json body
func NewPostInventoryPreloadRequest(server string, body PostInventoryPreloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInventoryPreloadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInventoryPreloadRequestWithBody generates requests for PostInventoryPreload with any type of body
func NewPostInventoryPreloadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory-preload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInventoryPreloadCsvTemplateRequest generates requests for GetInventoryPreloadCsvTemplate
func NewGetInventoryPreloadCsvTemplateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory-preload/csv-template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInventoryPreloadHistoryRequest generates requests for GetInventoryPreloadHistory
func NewGetInventoryPreloadHistoryRequest(server string, params *GetInventoryPreloadHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory-preload/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInventoryPreloadHistoryNotesRequest calls the generic PostInventoryPreloadHistoryNotes builder with application/json body
func NewPostInventoryPreloadHistoryNotesRequest(server string, body PostInventoryPreloadHistoryNotesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInventoryPreloadHistoryNotesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInventoryPreloadHistoryNotesRequestWithBody generates requests for PostInventoryPreloadHistoryNotes with any type of body
func NewPostInventoryPreloadHistoryNotesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory-preload/history/notes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInventoryPreloadValidateCsvRequestWithBody generates requests for PostInventoryPreloadValidateCsv with any type of body
func NewPostInventoryPreloadValidateCsvRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory-preload/validate-csv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInventoryPreloadIdRequest generates requests for DeleteInventoryPreloadId
func NewDeleteInventoryPreloadIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory-preload/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInventoryPreloadIdRequest generates requests for GetInventoryPreloadId
func NewGetInventoryPreloadIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory-preload/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutInventoryPreloadIdRequest calls the generic PutInventoryPreloadId builder with application/json body
func NewPutInventoryPreloadIdRequest(server string, id int, body PutInventoryPreloadIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInventoryPreloadIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutInventoryPreloadIdRequestWithBody generates requests for PutInventoryPreloadId with any type of body
func NewPutInventoryPreloadIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory-preload/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLdapGroupsRequest generates requests for GetLdapGroups
func NewGetLdapGroupsRequest(server string, params *GetLdapGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ldap/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLdapServersRequest generates requests for GetLdapServers
func NewGetLdapServersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ldap/servers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNotificationsAlertsRequest generates requests for GetNotificationsAlerts
func NewGetNotificationsAlertsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteNotificationsAlertsIdRequest generates requests for DeleteNotificationsAlertsId
func NewDeleteNotificationsAlertsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/alerts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteNotificationsAlertsTypeIdRequest generates requests for DeleteNotificationsAlertsTypeId
func NewDeleteNotificationsAlertsTypeIdRequest(server string, pType NotificationType, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/alerts/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPatchDisclaimerAgreeRequest generates requests for PostPatchDisclaimerAgree
func NewPostPatchDisclaimerAgreeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/disclaimerAgree")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatchObjPolicyIdRequest generates requests for GetPatchObjPolicyId
func NewGetPatchObjPolicyIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/obj/policy/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatchObjPolicyIdLogsEligibleRetryCountRequest generates requests for GetPatchObjPolicyIdLogsEligibleRetryCount
func NewGetPatchObjPolicyIdLogsEligibleRetryCountRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/obj/policy/%s/logs/eligibleRetryCount", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatchObjPolicyIdSoftwareTitleConfigurationIdRequest generates requests for GetPatchObjPolicyIdSoftwareTitleConfigurationId
func NewGetPatchObjPolicyIdSoftwareTitleConfigurationIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/obj/policy/%s/softwareTitleConfigurationId", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatchObjSoftwareTitleIdPoliciesRequest generates requests for GetPatchObjSoftwareTitleIdPolicies
func NewGetPatchObjSoftwareTitleIdPoliciesRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/obj/softwareTitle/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatchObjSoftwareTitleConfigurationIdRequest generates requests for GetPatchObjSoftwareTitleConfigurationId
func NewGetPatchObjSoftwareTitleConfigurationIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/obj/softwareTitleConfiguration/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatchObjIdRequest generates requests for GetPatchObjId
func NewGetPatchObjIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/obj/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPatchObjIdRequest calls the generic PutPatchObjId builder with application/json body
func NewPutPatchObjIdRequest(server string, id int, body PutPatchObjIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPatchObjIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPatchObjIdRequestWithBody generates requests for PutPatchObjId with any type of body
func NewPutPatchObjIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/obj/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPatchObjIdVersionsRequest generates requests for GetPatchObjIdVersions
func NewGetPatchObjIdVersionsRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/obj/%s/versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatchObjsPolicyIdRequest generates requests for GetPatchObjsPolicyId
func NewGetPatchObjsPolicyIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/objs/policy/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatchOnDashboardRequest generates requests for GetPatchOnDashboard
func NewGetPatchOnDashboardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/onDashboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatchPatchPoliciesRequest generates requests for GetPatchPatchPolicies
func NewGetPatchPatchPoliciesRequest(server string, params *GetPatchPatchPoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/patch-policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OnDashboard != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onDashboard", runtime.ParamLocationQuery, *params.OnDashboard); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Enabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePatchPatchPoliciesIdDashboardRequest generates requests for DeletePatchPatchPoliciesIdDashboard
func NewDeletePatchPatchPoliciesIdDashboardRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/patch-policies/%s/dashboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatchPatchPoliciesIdDashboardRequest generates requests for GetPatchPatchPoliciesIdDashboard
func NewGetPatchPatchPoliciesIdDashboardRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/patch-policies/%s/dashboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPatchPatchPoliciesIdDashboardRequest generates requests for PostPatchPatchPoliciesIdDashboard
func NewPostPatchPatchPoliciesIdDashboardRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/patch-policies/%s/dashboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPatchPatchPoliciesIdLogsRequest generates requests for GetPatchPatchPoliciesIdLogs
func NewGetPatchPatchPoliciesIdLogsRequest(server string, id int, params *GetPatchPatchPoliciesIdLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/patch-policies/%s/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DeviceId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device-id", runtime.ParamLocationQuery, *params.DeviceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPatchRetryPolicyRequest calls the generic PostPatchRetryPolicy builder with application/json body
func NewPostPatchRetryPolicyRequest(server string, body PostPatchRetryPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPatchRetryPolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPatchRetryPolicyRequestWithBody generates requests for PostPatchRetryPolicy with any type of body
func NewPostPatchRetryPolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/retryPolicy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPatchSearchActivePatchHistoryRequest calls the generic PostPatchSearchActivePatchHistory builder with application/json body
func NewPostPatchSearchActivePatchHistoryRequest(server string, body PostPatchSearchActivePatchHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPatchSearchActivePatchHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPatchSearchActivePatchHistoryRequestWithBody generates requests for PostPatchSearchActivePatchHistory with any type of body
func NewPostPatchSearchActivePatchHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/searchActivePatchHistory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPatchSearchPatchPolicyLogsRequest calls the generic PostPatchSearchPatchPolicyLogs builder with application/json body
func NewPostPatchSearchPatchPolicyLogsRequest(server string, body PostPatchSearchPatchPolicyLogsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPatchSearchPatchPolicyLogsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPatchSearchPatchPolicyLogsRequestWithBody generates requests for PostPatchSearchPatchPolicyLogs with any type of body
func NewPostPatchSearchPatchPolicyLogsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/searchPatchPolicyLogs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPatchSvcDisclaimerAgreeRequest generates requests for PostPatchSvcDisclaimerAgree
func NewPostPatchSvcDisclaimerAgreeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/svc/disclaimerAgree")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPatchSvcRetryPolicyRequest calls the generic PostPatchSvcRetryPolicy builder with application/json body
func NewPostPatchSvcRetryPolicyRequest(server string, body PostPatchSvcRetryPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPatchSvcRetryPolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPatchSvcRetryPolicyRequestWithBody generates requests for PostPatchSvcRetryPolicy with any type of body
func NewPostPatchSvcRetryPolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/svc/retryPolicy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPatchIdRequest generates requests for GetPatchId
func NewGetPatchIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPatchIdRequest calls the generic PutPatchId builder with application/json body
func NewPutPatchIdRequest(server string, id int, body PutPatchIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPatchIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPatchIdRequestWithBody generates requests for PutPatchId with any type of body
func NewPutPatchIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPatchIdVersionsRequest generates requests for GetPatchIdVersions
func NewGetPatchIdVersionsRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/%s/versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPreviewComputersRequest generates requests for GetPreviewComputers
func NewGetPreviewComputersRequest(server string, params *GetPreviewComputersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/computers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPreviewEnrollmentAccessGroupsRequest generates requests for GetPreviewEnrollmentAccessGroups
func NewGetPreviewEnrollmentAccessGroupsRequest(server string, params *GetPreviewEnrollmentAccessGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/enrollment/access-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AllUsersOptionFirst != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all-users-option-first", runtime.ParamLocationQuery, *params.AllUsersOptionFirst); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPreviewEnrollmentAccessGroupsRequest calls the generic PostPreviewEnrollmentAccessGroups builder with application/json body
func NewPostPreviewEnrollmentAccessGroupsRequest(server string, body PostPreviewEnrollmentAccessGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPreviewEnrollmentAccessGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPreviewEnrollmentAccessGroupsRequestWithBody generates requests for PostPreviewEnrollmentAccessGroups with any type of body
func NewPostPreviewEnrollmentAccessGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/enrollment/access-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePreviewEnrollmentAccessGroupsIdRequest generates requests for DeletePreviewEnrollmentAccessGroupsId
func NewDeletePreviewEnrollmentAccessGroupsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/enrollment/access-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPreviewEnrollmentAccessGroupsIdRequest generates requests for GetPreviewEnrollmentAccessGroupsId
func NewGetPreviewEnrollmentAccessGroupsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/enrollment/access-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPreviewEnrollmentAccessGroupsIdRequest calls the generic PutPreviewEnrollmentAccessGroupsId builder with application/json body
func NewPutPreviewEnrollmentAccessGroupsIdRequest(server string, id string, body PutPreviewEnrollmentAccessGroupsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPreviewEnrollmentAccessGroupsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutPreviewEnrollmentAccessGroupsIdRequestWithBody generates requests for PutPreviewEnrollmentAccessGroupsId with any type of body
func NewPutPreviewEnrollmentAccessGroupsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/enrollment/access-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPreviewMdmCommandsRequest calls the generic PostPreviewMdmCommands builder with application/json body
func NewPostPreviewMdmCommandsRequest(server string, body PostPreviewMdmCommandsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPreviewMdmCommandsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPreviewMdmCommandsRequestWithBody generates requests for PostPreviewMdmCommands with any type of body
func NewPostPreviewMdmCommandsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/mdm/commands")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPreviewRemoteAdministrationConfigurationsRequest generates requests for GetPreviewRemoteAdministrationConfigurations
func NewGetPreviewRemoteAdministrationConfigurationsRequest(server string, params *GetPreviewRemoteAdministrationConfigurationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/remote-administration-configurations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPreviewRemoteAdministrationConfigurationsTeamViewerRequest calls the generic PostPreviewRemoteAdministrationConfigurationsTeamViewer builder with application/json body
func NewPostPreviewRemoteAdministrationConfigurationsTeamViewerRequest(server string, body PostPreviewRemoteAdministrationConfigurationsTeamViewerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPreviewRemoteAdministrationConfigurationsTeamViewerRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPreviewRemoteAdministrationConfigurationsTeamViewerRequestWithBody generates requests for PostPreviewRemoteAdministrationConfigurationsTeamViewer with any type of body
func NewPostPreviewRemoteAdministrationConfigurationsTeamViewerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/remote-administration-configurations/team-viewer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsRequest generates requests for GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessions
func NewGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsRequest(server string, configurationId string, params *GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configurationId", runtime.ParamLocationPath, configurationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/remote-administration-configurations/team-viewer/%s/sessions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsRequest calls the generic PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessions builder with application/json body
func NewPostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsRequest(server string, configurationId string, body PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsRequestWithBody(server, configurationId, "application/json", bodyReader)
}

// NewPostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsRequestWithBody generates requests for PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessions with any type of body
func NewPostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsRequestWithBody(server string, configurationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configurationId", runtime.ParamLocationPath, configurationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/remote-administration-configurations/team-viewer/%s/sessions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdRequest generates requests for GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionId
func NewGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdRequest(server string, configurationId string, sessionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configurationId", runtime.ParamLocationPath, configurationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/remote-administration-configurations/team-viewer/%s/sessions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseRequest generates requests for PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClose
func NewPostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseRequest(server string, configurationId string, sessionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configurationId", runtime.ParamLocationPath, configurationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/remote-administration-configurations/team-viewer/%s/sessions/%s/close", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationRequest generates requests for PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotification
func NewPostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationRequest(server string, configurationId string, sessionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configurationId", runtime.ParamLocationPath, configurationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/remote-administration-configurations/team-viewer/%s/sessions/%s/resend-notification", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusRequest generates requests for GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatus
func NewGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusRequest(server string, configurationId string, sessionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "configurationId", runtime.ParamLocationPath, configurationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, sessionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/remote-administration-configurations/team-viewer/%s/sessions/%s/status", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePreviewRemoteAdministrationConfigurationsTeamViewerIdRequest generates requests for DeletePreviewRemoteAdministrationConfigurationsTeamViewerId
func NewDeletePreviewRemoteAdministrationConfigurationsTeamViewerIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/remote-administration-configurations/team-viewer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPreviewRemoteAdministrationConfigurationsTeamViewerIdRequest generates requests for GetPreviewRemoteAdministrationConfigurationsTeamViewerId
func NewGetPreviewRemoteAdministrationConfigurationsTeamViewerIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/remote-administration-configurations/team-viewer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPreviewRemoteAdministrationConfigurationsTeamViewerIdRequest calls the generic PatchPreviewRemoteAdministrationConfigurationsTeamViewerId builder with application/json body
func NewPatchPreviewRemoteAdministrationConfigurationsTeamViewerIdRequest(server string, id string, body PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPreviewRemoteAdministrationConfigurationsTeamViewerIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchPreviewRemoteAdministrationConfigurationsTeamViewerIdRequestWithBody generates requests for PatchPreviewRemoteAdministrationConfigurationsTeamViewerId with any type of body
func NewPatchPreviewRemoteAdministrationConfigurationsTeamViewerIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/remote-administration-configurations/team-viewer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusRequest generates requests for GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatus
func NewGetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/preview/remote-administration-configurations/team-viewer/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSelfServiceBrandingImagesRequestWithBody generates requests for PostSelfServiceBrandingImages with any type of body
func NewPostSelfServiceBrandingImagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/self-service/branding/images")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSettingsIssueTomcatSslCertificateRequest generates requests for PostSettingsIssueTomcatSslCertificate
func NewPostSettingsIssueTomcatSslCertificateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/issueTomcatSslCertificate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettingsObjPolicyPropertiesRequest generates requests for GetSettingsObjPolicyProperties
func NewGetSettingsObjPolicyPropertiesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/obj/policyProperties")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSettingsObjPolicyPropertiesRequest calls the generic PutSettingsObjPolicyProperties builder with application/json body
func NewPutSettingsObjPolicyPropertiesRequest(server string, body PutSettingsObjPolicyPropertiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSettingsObjPolicyPropertiesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutSettingsObjPolicyPropertiesRequestWithBody generates requests for PutSettingsObjPolicyProperties with any type of body
func NewPutSettingsObjPolicyPropertiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/obj/policyProperties")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSettingsSitesRequest generates requests for GetSettingsSites
func NewGetSettingsSitesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/sites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStartupStatusRequest generates requests for GetStartupStatus
func NewGetStartupStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/startup-status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSystemInitializeRequest calls the generic PostSystemInitialize builder with application/json body
func NewPostSystemInitializeRequest(server string, body PostSystemInitializeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemInitializeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemInitializeRequestWithBody generates requests for PostSystemInitialize with any type of body
func NewPostSystemInitializeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/initialize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSystemInitializeDatabaseConnectionRequest calls the generic PostSystemInitializeDatabaseConnection builder with application/json body
func NewPostSystemInitializeDatabaseConnectionRequest(server string, body PostSystemInitializeDatabaseConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemInitializeDatabaseConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemInitializeDatabaseConnectionRequestWithBody generates requests for PostSystemInitializeDatabaseConnection with any type of body
func NewPostSystemInitializeDatabaseConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/initialize-database-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserObjPreferenceKeyRequest generates requests for DeleteUserObjPreferenceKey
func NewDeleteUserObjPreferenceKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/obj/preference/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserObjPreferenceKeyRequest generates requests for GetUserObjPreferenceKey
func NewGetUserObjPreferenceKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/obj/preference/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUserObjPreferenceKeyRequest calls the generic PutUserObjPreferenceKey builder with application/json body
func NewPutUserObjPreferenceKeyRequest(server string, key string, body PutUserObjPreferenceKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUserObjPreferenceKeyRequestWithBody(server, key, "application/json", bodyReader)
}

// NewPutUserObjPreferenceKeyRequestWithBody generates requests for PutUserObjPreferenceKey with any type of body
func NewPutUserObjPreferenceKeyRequestWithBody(server string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/obj/preference/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserUpdateSessionRequest calls the generic PostUserUpdateSession builder with application/json body
func NewPostUserUpdateSessionRequest(server string, body PostUserUpdateSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUpdateSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserUpdateSessionRequestWithBody generates requests for PostUserUpdateSession with any type of body
func NewPostUserUpdateSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/updateSession")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1AdueSessionTokenSettingsRequest generates requests for GetV1AdueSessionTokenSettings
func NewGetV1AdueSessionTokenSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/adue-session-token-settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1AdueSessionTokenSettingsRequest calls the generic PutV1AdueSessionTokenSettings builder with application/json body
func NewPutV1AdueSessionTokenSettingsRequest(server string, body PutV1AdueSessionTokenSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1AdueSessionTokenSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1AdueSessionTokenSettingsRequestWithBody generates requests for PutV1AdueSessionTokenSettings with any type of body
func NewPutV1AdueSessionTokenSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/adue-session-token-settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1AdvancedMobileDeviceSearchesRequest generates requests for GetV1AdvancedMobileDeviceSearches
func NewGetV1AdvancedMobileDeviceSearchesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/advanced-mobile-device-searches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1AdvancedMobileDeviceSearchesRequest calls the generic PostV1AdvancedMobileDeviceSearches builder with application/json body
func NewPostV1AdvancedMobileDeviceSearchesRequest(server string, body PostV1AdvancedMobileDeviceSearchesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1AdvancedMobileDeviceSearchesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1AdvancedMobileDeviceSearchesRequestWithBody generates requests for PostV1AdvancedMobileDeviceSearches with any type of body
func NewPostV1AdvancedMobileDeviceSearchesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/advanced-mobile-device-searches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1AdvancedMobileDeviceSearchesChoicesRequest generates requests for GetV1AdvancedMobileDeviceSearchesChoices
func NewGetV1AdvancedMobileDeviceSearchesChoicesRequest(server string, params *GetV1AdvancedMobileDeviceSearchesChoicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/advanced-mobile-device-searches/choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "criteria", runtime.ParamLocationQuery, params.Criteria); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Site != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, *params.Site); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Contains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contains", runtime.ParamLocationQuery, *params.Contains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1AdvancedMobileDeviceSearchesDeleteMultipleRequest calls the generic PostV1AdvancedMobileDeviceSearchesDeleteMultiple builder with application/json body
func NewPostV1AdvancedMobileDeviceSearchesDeleteMultipleRequest(server string, body PostV1AdvancedMobileDeviceSearchesDeleteMultipleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1AdvancedMobileDeviceSearchesDeleteMultipleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1AdvancedMobileDeviceSearchesDeleteMultipleRequestWithBody generates requests for PostV1AdvancedMobileDeviceSearchesDeleteMultiple with any type of body
func NewPostV1AdvancedMobileDeviceSearchesDeleteMultipleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/advanced-mobile-device-searches/delete-multiple")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1AdvancedMobileDeviceSearchesIdRequest generates requests for DeleteV1AdvancedMobileDeviceSearchesId
func NewDeleteV1AdvancedMobileDeviceSearchesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/advanced-mobile-device-searches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AdvancedMobileDeviceSearchesIdRequest generates requests for GetV1AdvancedMobileDeviceSearchesId
func NewGetV1AdvancedMobileDeviceSearchesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/advanced-mobile-device-searches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1AdvancedMobileDeviceSearchesIdRequest calls the generic PutV1AdvancedMobileDeviceSearchesId builder with application/json body
func NewPutV1AdvancedMobileDeviceSearchesIdRequest(server string, id string, body PutV1AdvancedMobileDeviceSearchesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1AdvancedMobileDeviceSearchesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1AdvancedMobileDeviceSearchesIdRequestWithBody generates requests for PutV1AdvancedMobileDeviceSearchesId with any type of body
func NewPutV1AdvancedMobileDeviceSearchesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/advanced-mobile-device-searches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1AdvancedUserContentSearchesRequest generates requests for GetV1AdvancedUserContentSearches
func NewGetV1AdvancedUserContentSearchesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/advanced-user-content-searches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1AdvancedUserContentSearchesRequest calls the generic PostV1AdvancedUserContentSearches builder with application/json body
func NewPostV1AdvancedUserContentSearchesRequest(server string, body PostV1AdvancedUserContentSearchesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1AdvancedUserContentSearchesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1AdvancedUserContentSearchesRequestWithBody generates requests for PostV1AdvancedUserContentSearches with any type of body
func NewPostV1AdvancedUserContentSearchesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/advanced-user-content-searches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1AdvancedUserContentSearchesIdRequest generates requests for DeleteV1AdvancedUserContentSearchesId
func NewDeleteV1AdvancedUserContentSearchesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/advanced-user-content-searches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AdvancedUserContentSearchesIdRequest generates requests for GetV1AdvancedUserContentSearchesId
func NewGetV1AdvancedUserContentSearchesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/advanced-user-content-searches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1AdvancedUserContentSearchesIdRequest calls the generic PutV1AdvancedUserContentSearchesId builder with application/json body
func NewPutV1AdvancedUserContentSearchesIdRequest(server string, id string, body PutV1AdvancedUserContentSearchesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1AdvancedUserContentSearchesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1AdvancedUserContentSearchesIdRequestWithBody generates requests for PutV1AdvancedUserContentSearchesId with any type of body
func NewPutV1AdvancedUserContentSearchesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/advanced-user-content-searches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1AppDynamicsScriptConfigurationRequest generates requests for GetV1AppDynamicsScriptConfiguration
func NewGetV1AppDynamicsScriptConfigurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/app-dynamics/script-configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AppRequestFormInputFieldsRequest generates requests for GetV1AppRequestFormInputFields
func NewGetV1AppRequestFormInputFieldsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/app-request/form-input-fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1AppRequestFormInputFieldsRequest calls the generic PostV1AppRequestFormInputFields builder with application/json body
func NewPostV1AppRequestFormInputFieldsRequest(server string, body PostV1AppRequestFormInputFieldsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1AppRequestFormInputFieldsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1AppRequestFormInputFieldsRequestWithBody generates requests for PostV1AppRequestFormInputFields with any type of body
func NewPostV1AppRequestFormInputFieldsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/app-request/form-input-fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1AppRequestFormInputFieldsRequest calls the generic PutV1AppRequestFormInputFields builder with application/json body
func NewPutV1AppRequestFormInputFieldsRequest(server string, body PutV1AppRequestFormInputFieldsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1AppRequestFormInputFieldsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1AppRequestFormInputFieldsRequestWithBody generates requests for PutV1AppRequestFormInputFields with any type of body
func NewPutV1AppRequestFormInputFieldsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/app-request/form-input-fields")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1AppRequestFormInputFieldsIdRequest generates requests for DeleteV1AppRequestFormInputFieldsId
func NewDeleteV1AppRequestFormInputFieldsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/app-request/form-input-fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AppRequestFormInputFieldsIdRequest generates requests for GetV1AppRequestFormInputFieldsId
func NewGetV1AppRequestFormInputFieldsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/app-request/form-input-fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1AppRequestFormInputFieldsIdRequest calls the generic PutV1AppRequestFormInputFieldsId builder with application/json body
func NewPutV1AppRequestFormInputFieldsIdRequest(server string, id int, body PutV1AppRequestFormInputFieldsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1AppRequestFormInputFieldsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1AppRequestFormInputFieldsIdRequestWithBody generates requests for PutV1AppRequestFormInputFieldsId with any type of body
func NewPutV1AppRequestFormInputFieldsIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/app-request/form-input-fields/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1AppRequestSettingsRequest generates requests for GetV1AppRequestSettings
func NewGetV1AppRequestSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/app-request/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1AppRequestSettingsRequest calls the generic PutV1AppRequestSettings builder with application/json body
func NewPutV1AppRequestSettingsRequest(server string, body PutV1AppRequestSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1AppRequestSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1AppRequestSettingsRequestWithBody generates requests for PutV1AppRequestSettings with any type of body
func NewPutV1AppRequestSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/app-request/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1AppStoreCountryCodesRequest generates requests for GetV1AppStoreCountryCodes
func NewGetV1AppStoreCountryCodesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/app-store-country-codes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AuthRequest generates requests for GetV1Auth
func NewGetV1AuthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1AuthInvalidateTokenRequest generates requests for PostV1AuthInvalidateToken
func NewPostV1AuthInvalidateTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/invalidate-token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1AuthKeepAliveRequest generates requests for PostV1AuthKeepAlive
func NewPostV1AuthKeepAliveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/keep-alive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1AuthTokenRequest generates requests for PostV1AuthToken
func NewPostV1AuthTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1AzureAdMigrationReportsRequest calls the generic PostV1AzureAdMigrationReports builder with application/json body
func NewPostV1AzureAdMigrationReportsRequest(server string, body PostV1AzureAdMigrationReportsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1AzureAdMigrationReportsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1AzureAdMigrationReportsRequestWithBody generates requests for PostV1AzureAdMigrationReports with any type of body
func NewPostV1AzureAdMigrationReportsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/azure-ad-migration/reports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1AzureAdMigrationReportsPendingRequest generates requests for GetV1AzureAdMigrationReportsPending
func NewGetV1AzureAdMigrationReportsPendingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/azure-ad-migration/reports/pending")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AzureAdMigrationReportsIdRequest generates requests for GetV1AzureAdMigrationReportsId
func NewGetV1AzureAdMigrationReportsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/azure-ad-migration/reports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AzureAdMigrationReportsIdDownloadRequest generates requests for GetV1AzureAdMigrationReportsIdDownload
func NewGetV1AzureAdMigrationReportsIdDownloadRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/azure-ad-migration/reports/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1BuildingsRequest generates requests for GetV1Buildings
func NewGetV1BuildingsRequest(server string, params *GetV1BuildingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buildings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1BuildingsRequest calls the generic PostV1Buildings builder with application/json body
func NewPostV1BuildingsRequest(server string, body PostV1BuildingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1BuildingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1BuildingsRequestWithBody generates requests for PostV1Buildings with any type of body
func NewPostV1BuildingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buildings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1BuildingsDeleteMultipleRequest calls the generic PostV1BuildingsDeleteMultiple builder with application/json body
func NewPostV1BuildingsDeleteMultipleRequest(server string, body PostV1BuildingsDeleteMultipleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1BuildingsDeleteMultipleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1BuildingsDeleteMultipleRequestWithBody generates requests for PostV1BuildingsDeleteMultiple with any type of body
func NewPostV1BuildingsDeleteMultipleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buildings/delete-multiple")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1BuildingsIdRequest generates requests for DeleteV1BuildingsId
func NewDeleteV1BuildingsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buildings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1BuildingsIdRequest generates requests for GetV1BuildingsId
func NewGetV1BuildingsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buildings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1BuildingsIdRequest calls the generic PutV1BuildingsId builder with application/json body
func NewPutV1BuildingsIdRequest(server string, id string, body PutV1BuildingsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1BuildingsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1BuildingsIdRequestWithBody generates requests for PutV1BuildingsId with any type of body
func NewPutV1BuildingsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buildings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1BuildingsIdHistoryRequest generates requests for GetV1BuildingsIdHistory
func NewGetV1BuildingsIdHistoryRequest(server string, id string, params *GetV1BuildingsIdHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buildings/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1BuildingsIdHistoryRequest calls the generic PostV1BuildingsIdHistory builder with application/json body
func NewPostV1BuildingsIdHistoryRequest(server string, id string, body PostV1BuildingsIdHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1BuildingsIdHistoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1BuildingsIdHistoryRequestWithBody generates requests for PostV1BuildingsIdHistory with any type of body
func NewPostV1BuildingsIdHistoryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/buildings/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1CacheSettingsRequest generates requests for GetV1CacheSettings
func NewGetV1CacheSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cache-settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1CacheSettingsRequest calls the generic PutV1CacheSettings builder with application/json body
func NewPutV1CacheSettingsRequest(server string, body PutV1CacheSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1CacheSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1CacheSettingsRequestWithBody generates requests for PutV1CacheSettings with any type of body
func NewPutV1CacheSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cache-settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1CategoriesRequest generates requests for GetV1Categories
func NewGetV1CategoriesRequest(server string, params *GetV1CategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1CategoriesRequest calls the generic PostV1Categories builder with application/json body
func NewPostV1CategoriesRequest(server string, body PostV1CategoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1CategoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1CategoriesRequestWithBody generates requests for PostV1Categories with any type of body
func NewPostV1CategoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1CategoriesDeleteMultipleRequest calls the generic PostV1CategoriesDeleteMultiple builder with application/json body
func NewPostV1CategoriesDeleteMultipleRequest(server string, body PostV1CategoriesDeleteMultipleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1CategoriesDeleteMultipleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1CategoriesDeleteMultipleRequestWithBody generates requests for PostV1CategoriesDeleteMultiple with any type of body
func NewPostV1CategoriesDeleteMultipleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/categories/delete-multiple")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1CategoriesIdRequest generates requests for DeleteV1CategoriesId
func NewDeleteV1CategoriesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1CategoriesIdRequest generates requests for GetV1CategoriesId
func NewGetV1CategoriesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1CategoriesIdRequest calls the generic PutV1CategoriesId builder with application/json body
func NewPutV1CategoriesIdRequest(server string, id string, body PutV1CategoriesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1CategoriesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1CategoriesIdRequestWithBody generates requests for PutV1CategoriesId with any type of body
func NewPutV1CategoriesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1CategoriesIdHistoryRequest generates requests for GetV1CategoriesIdHistory
func NewGetV1CategoriesIdHistoryRequest(server string, id string, params *GetV1CategoriesIdHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/categories/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1CategoriesIdHistoryRequest calls the generic PostV1CategoriesIdHistory builder with application/json body
func NewPostV1CategoriesIdHistoryRequest(server string, id string, body PostV1CategoriesIdHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1CategoriesIdHistoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1CategoriesIdHistoryRequestWithBody generates requests for PostV1CategoriesIdHistory with any type of body
func NewPostV1CategoriesIdHistoryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/categories/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ClassicLdapIdRequest generates requests for GetV1ClassicLdapId
func NewGetV1ClassicLdapIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/classic-ldap/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1CloudAzureRequest calls the generic PostV1CloudAzure builder with application/json body
func NewPostV1CloudAzureRequest(server string, body PostV1CloudAzureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1CloudAzureRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1CloudAzureRequestWithBody generates requests for PostV1CloudAzure with any type of body
func NewPostV1CloudAzureRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cloud-azure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1CloudAzureDefaultsMappingsRequest generates requests for GetV1CloudAzureDefaultsMappings
func NewGetV1CloudAzureDefaultsMappingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cloud-azure/defaults/mappings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1CloudAzureDefaultsServerConfigurationRequest generates requests for GetV1CloudAzureDefaultsServerConfiguration
func NewGetV1CloudAzureDefaultsServerConfigurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cloud-azure/defaults/server-configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1CloudAzureIdRequest generates requests for DeleteV1CloudAzureId
func NewDeleteV1CloudAzureIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cloud-azure/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1CloudAzureIdRequest generates requests for GetV1CloudAzureId
func NewGetV1CloudAzureIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cloud-azure/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1CloudAzureIdRequest calls the generic PutV1CloudAzureId builder with application/json body
func NewPutV1CloudAzureIdRequest(server string, id string, body PutV1CloudAzureIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1CloudAzureIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1CloudAzureIdRequestWithBody generates requests for PutV1CloudAzureId with any type of body
func NewPutV1CloudAzureIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cloud-azure/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1CloudIdpRequest generates requests for GetV1CloudIdp
func NewGetV1CloudIdpRequest(server string, params *GetV1CloudIdpParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cloud-idp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1CloudIdpExportRequest calls the generic PostV1CloudIdpExport builder with application/json body
func NewPostV1CloudIdpExportRequest(server string, params *PostV1CloudIdpExportParams, body PostV1CloudIdpExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1CloudIdpExportRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV1CloudIdpExportRequestWithBody generates requests for PostV1CloudIdpExport with any type of body
func NewPostV1CloudIdpExportRequestWithBody(server string, params *PostV1CloudIdpExportParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cloud-idp/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ExportFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export-fields", runtime.ParamLocationQuery, *params.ExportFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExportLabels != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export-labels", runtime.ParamLocationQuery, *params.ExportLabels); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1CloudIdpIdRequest generates requests for GetV1CloudIdpId
func NewGetV1CloudIdpIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cloud-idp/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1CloudIdpIdHistoryRequest generates requests for GetV1CloudIdpIdHistory
func NewGetV1CloudIdpIdHistoryRequest(server string, id string, params *GetV1CloudIdpIdHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cloud-idp/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1CloudIdpIdHistoryRequest calls the generic PostV1CloudIdpIdHistory builder with application/json body
func NewPostV1CloudIdpIdHistoryRequest(server string, id string, body PostV1CloudIdpIdHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1CloudIdpIdHistoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1CloudIdpIdHistoryRequestWithBody generates requests for PostV1CloudIdpIdHistory with any type of body
func NewPostV1CloudIdpIdHistoryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cloud-idp/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1CloudIdpIdTestGroupRequest calls the generic PostV1CloudIdpIdTestGroup builder with application/json body
func NewPostV1CloudIdpIdTestGroupRequest(server string, id string, body PostV1CloudIdpIdTestGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1CloudIdpIdTestGroupRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1CloudIdpIdTestGroupRequestWithBody generates requests for PostV1CloudIdpIdTestGroup with any type of body
func NewPostV1CloudIdpIdTestGroupRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cloud-idp/%s/test-group", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1CloudIdpIdTestUserRequest calls the generic PostV1CloudIdpIdTestUser builder with application/json body
func NewPostV1CloudIdpIdTestUserRequest(server string, id string, body PostV1CloudIdpIdTestUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1CloudIdpIdTestUserRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1CloudIdpIdTestUserRequestWithBody generates requests for PostV1CloudIdpIdTestUser with any type of body
func NewPostV1CloudIdpIdTestUserRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cloud-idp/%s/test-user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1CloudIdpIdTestUserMembershipRequest calls the generic PostV1CloudIdpIdTestUserMembership builder with application/json body
func NewPostV1CloudIdpIdTestUserMembershipRequest(server string, id string, body PostV1CloudIdpIdTestUserMembershipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1CloudIdpIdTestUserMembershipRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1CloudIdpIdTestUserMembershipRequestWithBody generates requests for PostV1CloudIdpIdTestUserMembership with any type of body
func NewPostV1CloudIdpIdTestUserMembershipRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cloud-idp/%s/test-user-membership", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ComputerInventoryCollectionSettingsRequest generates requests for GetV1ComputerInventoryCollectionSettings
func NewGetV1ComputerInventoryCollectionSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computer-inventory-collection-settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ComputerInventoryCollectionSettingsRequest calls the generic PatchV1ComputerInventoryCollectionSettings builder with application/json body
func NewPatchV1ComputerInventoryCollectionSettingsRequest(server string, body PatchV1ComputerInventoryCollectionSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ComputerInventoryCollectionSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchV1ComputerInventoryCollectionSettingsRequestWithBody generates requests for PatchV1ComputerInventoryCollectionSettings with any type of body
func NewPatchV1ComputerInventoryCollectionSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computer-inventory-collection-settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1ComputerInventoryCollectionSettingsCustomPathRequest calls the generic PostV1ComputerInventoryCollectionSettingsCustomPath builder with application/json body
func NewPostV1ComputerInventoryCollectionSettingsCustomPathRequest(server string, body PostV1ComputerInventoryCollectionSettingsCustomPathJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ComputerInventoryCollectionSettingsCustomPathRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1ComputerInventoryCollectionSettingsCustomPathRequestWithBody generates requests for PostV1ComputerInventoryCollectionSettingsCustomPath with any type of body
func NewPostV1ComputerInventoryCollectionSettingsCustomPathRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computer-inventory-collection-settings/custom-path")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ComputerInventoryCollectionSettingsCustomPathIdRequest generates requests for DeleteV1ComputerInventoryCollectionSettingsCustomPathId
func NewDeleteV1ComputerInventoryCollectionSettingsCustomPathIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computer-inventory-collection-settings/custom-path/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ComputerPrestagesRequest generates requests for GetV1ComputerPrestages
func NewGetV1ComputerPrestagesRequest(server string, params *GetV1ComputerPrestagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computer-prestages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ComputerPrestagesRequest calls the generic PostV1ComputerPrestages builder with application/json body
func NewPostV1ComputerPrestagesRequest(server string, body PostV1ComputerPrestagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ComputerPrestagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1ComputerPrestagesRequestWithBody generates requests for PostV1ComputerPrestages with any type of body
func NewPostV1ComputerPrestagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computer-prestages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ComputerPrestagesScopeRequest generates requests for GetV1ComputerPrestagesScope
func NewGetV1ComputerPrestagesScopeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computer-prestages/scope")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1ComputerPrestagesIdRequest generates requests for DeleteV1ComputerPrestagesId
func NewDeleteV1ComputerPrestagesIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computer-prestages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ComputerPrestagesIdRequest generates requests for GetV1ComputerPrestagesId
func NewGetV1ComputerPrestagesIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computer-prestages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1ComputerPrestagesIdRequest calls the generic PutV1ComputerPrestagesId builder with application/json body
func NewPutV1ComputerPrestagesIdRequest(server string, id int, body PutV1ComputerPrestagesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ComputerPrestagesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1ComputerPrestagesIdRequestWithBody generates requests for PutV1ComputerPrestagesId with any type of body
func NewPutV1ComputerPrestagesIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computer-prestages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ComputerPrestagesIdScopeRequest calls the generic DeleteV1ComputerPrestagesIdScope builder with application/json body
func NewDeleteV1ComputerPrestagesIdScopeRequest(server string, id int, body DeleteV1ComputerPrestagesIdScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV1ComputerPrestagesIdScopeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteV1ComputerPrestagesIdScopeRequestWithBody generates requests for DeleteV1ComputerPrestagesIdScope with any type of body
func NewDeleteV1ComputerPrestagesIdScopeRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computer-prestages/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ComputerPrestagesIdScopeRequest generates requests for GetV1ComputerPrestagesIdScope
func NewGetV1ComputerPrestagesIdScopeRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computer-prestages/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ComputerPrestagesIdScopeRequest calls the generic PostV1ComputerPrestagesIdScope builder with application/json body
func NewPostV1ComputerPrestagesIdScopeRequest(server string, id int, body PostV1ComputerPrestagesIdScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ComputerPrestagesIdScopeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1ComputerPrestagesIdScopeRequestWithBody generates requests for PostV1ComputerPrestagesIdScope with any type of body
func NewPostV1ComputerPrestagesIdScopeRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computer-prestages/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1ComputerPrestagesIdScopeRequest calls the generic PutV1ComputerPrestagesIdScope builder with application/json body
func NewPutV1ComputerPrestagesIdScopeRequest(server string, id int, body PutV1ComputerPrestagesIdScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ComputerPrestagesIdScopeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1ComputerPrestagesIdScopeRequestWithBody generates requests for PutV1ComputerPrestagesIdScope with any type of body
func NewPutV1ComputerPrestagesIdScopeRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computer-prestages/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ComputersInventoryRequest generates requests for GetV1ComputersInventory
func NewGetV1ComputersInventoryRequest(server string, params *GetV1ComputersInventoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computers-inventory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Section != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "section", runtime.ParamLocationQuery, *params.Section); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ComputersInventoryDetailIdRequest generates requests for GetV1ComputersInventoryDetailId
func NewGetV1ComputersInventoryDetailIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computers-inventory-detail/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1ComputersInventoryDetailIdRequest calls the generic PatchV1ComputersInventoryDetailId builder with application/json body
func NewPatchV1ComputersInventoryDetailIdRequest(server string, id string, body PatchV1ComputersInventoryDetailIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1ComputersInventoryDetailIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchV1ComputersInventoryDetailIdRequestWithBody generates requests for PatchV1ComputersInventoryDetailId with any type of body
func NewPatchV1ComputersInventoryDetailIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computers-inventory-detail/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ComputersInventoryIdRequest generates requests for DeleteV1ComputersInventoryId
func NewDeleteV1ComputersInventoryIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computers-inventory/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ComputersInventoryIdRequest generates requests for GetV1ComputersInventoryId
func NewGetV1ComputersInventoryIdRequest(server string, id string, params *GetV1ComputersInventoryIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computers-inventory/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Section != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "section", runtime.ParamLocationQuery, *params.Section); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ComputersInventoryIdAttachmentsRequestWithBody generates requests for PostV1ComputersInventoryIdAttachments with any type of body
func NewPostV1ComputersInventoryIdAttachmentsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computers-inventory/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ComputersInventoryIdAttachmentsAttachmentIdRequest generates requests for DeleteV1ComputersInventoryIdAttachmentsAttachmentId
func NewDeleteV1ComputersInventoryIdAttachmentsAttachmentIdRequest(server string, id string, attachmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computers-inventory/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ComputersInventoryIdAttachmentsAttachmentIdRequest generates requests for GetV1ComputersInventoryIdAttachmentsAttachmentId
func NewGetV1ComputersInventoryIdAttachmentsAttachmentIdRequest(server string, id string, attachmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computers-inventory/%s/attachments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ComputersInventoryIdViewRecoveryLockPasswordRequest generates requests for GetV1ComputersInventoryIdViewRecoveryLockPassword
func NewGetV1ComputersInventoryIdViewRecoveryLockPasswordRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computers-inventory/%s/view-recovery-lock-password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ComputersIdRecalculateSmartGroupsRequest generates requests for PostV1ComputersIdRecalculateSmartGroups
func NewPostV1ComputersIdRecalculateSmartGroupsRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/computers/%s/recalculate-smart-groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdRequest generates requests for GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceId
func NewGetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdRequest(server string, deviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/conditional-access/device-compliance-information/computer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdRequest generates requests for GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceId
func NewGetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdRequest(server string, deviceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/conditional-access/device-compliance-information/mobile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1CsaTokenRequest generates requests for DeleteV1CsaToken
func NewDeleteV1CsaTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/csa/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1CsaTokenRequest generates requests for GetV1CsaToken
func NewGetV1CsaTokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/csa/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1CsaTokenRequest calls the generic PostV1CsaToken builder with application/json body
func NewPostV1CsaTokenRequest(server string, body PostV1CsaTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1CsaTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1CsaTokenRequestWithBody generates requests for PostV1CsaToken with any type of body
func NewPostV1CsaTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/csa/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1CsaTokenRequest calls the generic PutV1CsaToken builder with application/json body
func NewPutV1CsaTokenRequest(server string, body PutV1CsaTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1CsaTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1CsaTokenRequestWithBody generates requests for PutV1CsaToken with any type of body
func NewPutV1CsaTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/csa/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1DepartmentsRequest generates requests for GetV1Departments
func NewGetV1DepartmentsRequest(server string, params *GetV1DepartmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/departments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1DepartmentsRequest calls the generic PostV1Departments builder with application/json body
func NewPostV1DepartmentsRequest(server string, body PostV1DepartmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1DepartmentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1DepartmentsRequestWithBody generates requests for PostV1Departments with any type of body
func NewPostV1DepartmentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/departments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1DepartmentsDeleteMultipleRequest calls the generic PostV1DepartmentsDeleteMultiple builder with application/json body
func NewPostV1DepartmentsDeleteMultipleRequest(server string, body PostV1DepartmentsDeleteMultipleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1DepartmentsDeleteMultipleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1DepartmentsDeleteMultipleRequestWithBody generates requests for PostV1DepartmentsDeleteMultiple with any type of body
func NewPostV1DepartmentsDeleteMultipleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/departments/delete-multiple")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1DepartmentsIdRequest generates requests for DeleteV1DepartmentsId
func NewDeleteV1DepartmentsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/departments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DepartmentsIdRequest generates requests for GetV1DepartmentsId
func NewGetV1DepartmentsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/departments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1DepartmentsIdRequest calls the generic PutV1DepartmentsId builder with application/json body
func NewPutV1DepartmentsIdRequest(server string, id string, body PutV1DepartmentsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1DepartmentsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1DepartmentsIdRequestWithBody generates requests for PutV1DepartmentsId with any type of body
func NewPutV1DepartmentsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/departments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1DepartmentsIdHistoryRequest generates requests for GetV1DepartmentsIdHistory
func NewGetV1DepartmentsIdHistoryRequest(server string, id string, params *GetV1DepartmentsIdHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/departments/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1DepartmentsIdHistoryRequest calls the generic PostV1DepartmentsIdHistory builder with application/json body
func NewPostV1DepartmentsIdHistoryRequest(server string, id string, body PostV1DepartmentsIdHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1DepartmentsIdHistoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1DepartmentsIdHistoryRequestWithBody generates requests for PostV1DepartmentsIdHistory with any type of body
func NewPostV1DepartmentsIdHistoryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/departments/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1DeployPackageRequest calls the generic PostV1DeployPackage builder with application/json body
func NewPostV1DeployPackageRequest(server string, params *PostV1DeployPackageParams, body PostV1DeployPackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1DeployPackageRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV1DeployPackageRequestWithBody generates requests for PostV1DeployPackage with any type of body
func NewPostV1DeployPackageRequestWithBody(server string, params *PostV1DeployPackageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/deploy-package")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Verbose != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verbose", runtime.ParamLocationQuery, *params.Verbose); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1DeviceCommunicationSettingsRequest generates requests for GetV1DeviceCommunicationSettings
func NewGetV1DeviceCommunicationSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-communication-settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1DeviceCommunicationSettingsRequest calls the generic PutV1DeviceCommunicationSettings builder with application/json body
func NewPutV1DeviceCommunicationSettingsRequest(server string, body PutV1DeviceCommunicationSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1DeviceCommunicationSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1DeviceCommunicationSettingsRequestWithBody generates requests for PutV1DeviceCommunicationSettings with any type of body
func NewPutV1DeviceCommunicationSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-communication-settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1DeviceCommunicationSettingsHistoryRequest generates requests for GetV1DeviceCommunicationSettingsHistory
func NewGetV1DeviceCommunicationSettingsHistoryRequest(server string, params *GetV1DeviceCommunicationSettingsHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-communication-settings/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1DeviceCommunicationSettingsHistoryRequest calls the generic PostV1DeviceCommunicationSettingsHistory builder with application/json body
func NewPostV1DeviceCommunicationSettingsHistoryRequest(server string, body PostV1DeviceCommunicationSettingsHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1DeviceCommunicationSettingsHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1DeviceCommunicationSettingsHistoryRequestWithBody generates requests for PostV1DeviceCommunicationSettingsHistory with any type of body
func NewPostV1DeviceCommunicationSettingsHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-communication-settings/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1DeviceEnrollmentsRequest generates requests for GetV1DeviceEnrollments
func NewGetV1DeviceEnrollmentsRequest(server string, params *GetV1DeviceEnrollmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-enrollments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DeviceEnrollmentsPublicKeyRequest generates requests for GetV1DeviceEnrollmentsPublicKey
func NewGetV1DeviceEnrollmentsPublicKeyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-enrollments/public-key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DeviceEnrollmentsSyncsRequest generates requests for GetV1DeviceEnrollmentsSyncs
func NewGetV1DeviceEnrollmentsSyncsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-enrollments/syncs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1DeviceEnrollmentsUploadTokenRequest calls the generic PostV1DeviceEnrollmentsUploadToken builder with application/json body
func NewPostV1DeviceEnrollmentsUploadTokenRequest(server string, body PostV1DeviceEnrollmentsUploadTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1DeviceEnrollmentsUploadTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1DeviceEnrollmentsUploadTokenRequestWithBody generates requests for PostV1DeviceEnrollmentsUploadToken with any type of body
func NewPostV1DeviceEnrollmentsUploadTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-enrollments/upload-token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1DeviceEnrollmentsIdRequest generates requests for DeleteV1DeviceEnrollmentsId
func NewDeleteV1DeviceEnrollmentsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-enrollments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DeviceEnrollmentsIdRequest generates requests for GetV1DeviceEnrollmentsId
func NewGetV1DeviceEnrollmentsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-enrollments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1DeviceEnrollmentsIdRequest calls the generic PutV1DeviceEnrollmentsId builder with application/json body
func NewPutV1DeviceEnrollmentsIdRequest(server string, id string, body PutV1DeviceEnrollmentsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1DeviceEnrollmentsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1DeviceEnrollmentsIdRequestWithBody generates requests for PutV1DeviceEnrollmentsId with any type of body
func NewPutV1DeviceEnrollmentsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-enrollments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1DeviceEnrollmentsIdDevicesRequest generates requests for GetV1DeviceEnrollmentsIdDevices
func NewGetV1DeviceEnrollmentsIdDevicesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-enrollments/%s/devices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1DeviceEnrollmentsIdDisownRequest calls the generic PostV1DeviceEnrollmentsIdDisown builder with application/json body
func NewPostV1DeviceEnrollmentsIdDisownRequest(server string, id string, body PostV1DeviceEnrollmentsIdDisownJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1DeviceEnrollmentsIdDisownRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1DeviceEnrollmentsIdDisownRequestWithBody generates requests for PostV1DeviceEnrollmentsIdDisown with any type of body
func NewPostV1DeviceEnrollmentsIdDisownRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-enrollments/%s/disown", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1DeviceEnrollmentsIdHistoryRequest generates requests for GetV1DeviceEnrollmentsIdHistory
func NewGetV1DeviceEnrollmentsIdHistoryRequest(server string, id string, params *GetV1DeviceEnrollmentsIdHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-enrollments/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1DeviceEnrollmentsIdHistoryRequest calls the generic PostV1DeviceEnrollmentsIdHistory builder with application/json body
func NewPostV1DeviceEnrollmentsIdHistoryRequest(server string, id string, body PostV1DeviceEnrollmentsIdHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1DeviceEnrollmentsIdHistoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1DeviceEnrollmentsIdHistoryRequestWithBody generates requests for PostV1DeviceEnrollmentsIdHistory with any type of body
func NewPostV1DeviceEnrollmentsIdHistoryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-enrollments/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1DeviceEnrollmentsIdSyncsRequest generates requests for GetV1DeviceEnrollmentsIdSyncs
func NewGetV1DeviceEnrollmentsIdSyncsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-enrollments/%s/syncs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DeviceEnrollmentsIdSyncsLatestRequest generates requests for GetV1DeviceEnrollmentsIdSyncsLatest
func NewGetV1DeviceEnrollmentsIdSyncsLatestRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-enrollments/%s/syncs/latest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1DeviceEnrollmentsIdUploadTokenRequest calls the generic PutV1DeviceEnrollmentsIdUploadToken builder with application/json body
func NewPutV1DeviceEnrollmentsIdUploadTokenRequest(server string, id string, body PutV1DeviceEnrollmentsIdUploadTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1DeviceEnrollmentsIdUploadTokenRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1DeviceEnrollmentsIdUploadTokenRequestWithBody generates requests for PutV1DeviceEnrollmentsIdUploadToken with any type of body
func NewPutV1DeviceEnrollmentsIdUploadTokenRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/device-enrollments/%s/upload-token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1EbooksRequest generates requests for GetV1Ebooks
func NewGetV1EbooksRequest(server string, params *GetV1EbooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ebooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EbooksIdRequest generates requests for GetV1EbooksId
func NewGetV1EbooksIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ebooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EbooksIdScopeRequest generates requests for GetV1EbooksIdScope
func NewGetV1EbooksIdScopeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ebooks/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EngageRequest generates requests for GetV1Engage
func NewGetV1EngageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/engage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1EngageRequest calls the generic PutV1Engage builder with application/json body
func NewPutV1EngageRequest(server string, body PutV1EngageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1EngageRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1EngageRequestWithBody generates requests for PutV1Engage with any type of body
func NewPutV1EngageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/engage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1EngageHistoryRequest generates requests for GetV1EngageHistory
func NewGetV1EngageHistoryRequest(server string, params *GetV1EngageHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/engage/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1EngageHistoryRequest calls the generic PostV1EngageHistory builder with application/json body
func NewPostV1EngageHistoryRequest(server string, body PostV1EngageHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1EngageHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1EngageHistoryRequestWithBody generates requests for PostV1EngageHistory with any type of body
func NewPostV1EngageHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/engage/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1EnrollmentRequest generates requests for GetV1Enrollment
func NewGetV1EnrollmentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1EnrollmentRequest calls the generic PutV1Enrollment builder with application/json body
func NewPutV1EnrollmentRequest(server string, body PutV1EnrollmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1EnrollmentRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1EnrollmentRequestWithBody generates requests for PutV1Enrollment with any type of body
func NewPutV1EnrollmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1EnrollmentCustomizationRequest generates requests for GetV1EnrollmentCustomization
func NewGetV1EnrollmentCustomizationRequest(server string, params *GetV1EnrollmentCustomizationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1EnrollmentCustomizationRequest calls the generic PostV1EnrollmentCustomization builder with application/json body
func NewPostV1EnrollmentCustomizationRequest(server string, body PostV1EnrollmentCustomizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1EnrollmentCustomizationRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1EnrollmentCustomizationRequestWithBody generates requests for PostV1EnrollmentCustomization with any type of body
func NewPostV1EnrollmentCustomizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1EnrollmentCustomizationImagesRequestWithBody generates requests for PostV1EnrollmentCustomizationImages with any type of body
func NewPostV1EnrollmentCustomizationImagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/images")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1EnrollmentCustomizationParseMarkdownRequest calls the generic PostV1EnrollmentCustomizationParseMarkdown builder with application/json body
func NewPostV1EnrollmentCustomizationParseMarkdownRequest(server string, body PostV1EnrollmentCustomizationParseMarkdownJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1EnrollmentCustomizationParseMarkdownRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1EnrollmentCustomizationParseMarkdownRequestWithBody generates requests for PostV1EnrollmentCustomizationParseMarkdown with any type of body
func NewPostV1EnrollmentCustomizationParseMarkdownRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/parse-markdown")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1EnrollmentCustomizationIdRequest generates requests for DeleteV1EnrollmentCustomizationId
func NewDeleteV1EnrollmentCustomizationIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EnrollmentCustomizationIdRequest generates requests for GetV1EnrollmentCustomizationId
func NewGetV1EnrollmentCustomizationIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1EnrollmentCustomizationIdRequest calls the generic PutV1EnrollmentCustomizationId builder with application/json body
func NewPutV1EnrollmentCustomizationIdRequest(server string, id int, body PutV1EnrollmentCustomizationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1EnrollmentCustomizationIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1EnrollmentCustomizationIdRequestWithBody generates requests for PutV1EnrollmentCustomizationId with any type of body
func NewPutV1EnrollmentCustomizationIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1EnrollmentCustomizationIdAllRequest generates requests for GetV1EnrollmentCustomizationIdAll
func NewGetV1EnrollmentCustomizationIdAllRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/all", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1EnrollmentCustomizationIdAllPanelIdRequest generates requests for DeleteV1EnrollmentCustomizationIdAllPanelId
func NewDeleteV1EnrollmentCustomizationIdAllPanelIdRequest(server string, id int, panelId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "panel-id", runtime.ParamLocationPath, panelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/all/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EnrollmentCustomizationIdAllPanelIdRequest generates requests for GetV1EnrollmentCustomizationIdAllPanelId
func NewGetV1EnrollmentCustomizationIdAllPanelIdRequest(server string, id int, panelId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "panel-id", runtime.ParamLocationPath, panelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/all/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EnrollmentCustomizationIdHistoryRequest generates requests for GetV1EnrollmentCustomizationIdHistory
func NewGetV1EnrollmentCustomizationIdHistoryRequest(server string, id int, params *GetV1EnrollmentCustomizationIdHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1EnrollmentCustomizationIdHistoryRequest calls the generic PostV1EnrollmentCustomizationIdHistory builder with application/json body
func NewPostV1EnrollmentCustomizationIdHistoryRequest(server string, id int, body PostV1EnrollmentCustomizationIdHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1EnrollmentCustomizationIdHistoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1EnrollmentCustomizationIdHistoryRequestWithBody generates requests for PostV1EnrollmentCustomizationIdHistory with any type of body
func NewPostV1EnrollmentCustomizationIdHistoryRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1EnrollmentCustomizationIdLdapRequest calls the generic PostV1EnrollmentCustomizationIdLdap builder with application/json body
func NewPostV1EnrollmentCustomizationIdLdapRequest(server string, id int, body PostV1EnrollmentCustomizationIdLdapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1EnrollmentCustomizationIdLdapRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1EnrollmentCustomizationIdLdapRequestWithBody generates requests for PostV1EnrollmentCustomizationIdLdap with any type of body
func NewPostV1EnrollmentCustomizationIdLdapRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/ldap", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1EnrollmentCustomizationIdLdapPanelIdRequest generates requests for DeleteV1EnrollmentCustomizationIdLdapPanelId
func NewDeleteV1EnrollmentCustomizationIdLdapPanelIdRequest(server string, id int, panelId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "panel-id", runtime.ParamLocationPath, panelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/ldap/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EnrollmentCustomizationIdLdapPanelIdRequest generates requests for GetV1EnrollmentCustomizationIdLdapPanelId
func NewGetV1EnrollmentCustomizationIdLdapPanelIdRequest(server string, id int, panelId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "panel-id", runtime.ParamLocationPath, panelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/ldap/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1EnrollmentCustomizationIdLdapPanelIdRequest calls the generic PutV1EnrollmentCustomizationIdLdapPanelId builder with application/json body
func NewPutV1EnrollmentCustomizationIdLdapPanelIdRequest(server string, id int, panelId int, body PutV1EnrollmentCustomizationIdLdapPanelIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1EnrollmentCustomizationIdLdapPanelIdRequestWithBody(server, id, panelId, "application/json", bodyReader)
}

// NewPutV1EnrollmentCustomizationIdLdapPanelIdRequestWithBody generates requests for PutV1EnrollmentCustomizationIdLdapPanelId with any type of body
func NewPutV1EnrollmentCustomizationIdLdapPanelIdRequestWithBody(server string, id int, panelId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "panel-id", runtime.ParamLocationPath, panelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/ldap/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1EnrollmentCustomizationIdPrestagesRequest generates requests for GetV1EnrollmentCustomizationIdPrestages
func NewGetV1EnrollmentCustomizationIdPrestagesRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/prestages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1EnrollmentCustomizationIdSsoRequest calls the generic PostV1EnrollmentCustomizationIdSso builder with application/json body
func NewPostV1EnrollmentCustomizationIdSsoRequest(server string, id int, body PostV1EnrollmentCustomizationIdSsoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1EnrollmentCustomizationIdSsoRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1EnrollmentCustomizationIdSsoRequestWithBody generates requests for PostV1EnrollmentCustomizationIdSso with any type of body
func NewPostV1EnrollmentCustomizationIdSsoRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/sso", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1EnrollmentCustomizationIdSsoPanelIdRequest generates requests for DeleteV1EnrollmentCustomizationIdSsoPanelId
func NewDeleteV1EnrollmentCustomizationIdSsoPanelIdRequest(server string, id int, panelId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "panel-id", runtime.ParamLocationPath, panelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/sso/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EnrollmentCustomizationIdSsoPanelIdRequest generates requests for GetV1EnrollmentCustomizationIdSsoPanelId
func NewGetV1EnrollmentCustomizationIdSsoPanelIdRequest(server string, id int, panelId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "panel-id", runtime.ParamLocationPath, panelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/sso/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1EnrollmentCustomizationIdSsoPanelIdRequest calls the generic PutV1EnrollmentCustomizationIdSsoPanelId builder with application/json body
func NewPutV1EnrollmentCustomizationIdSsoPanelIdRequest(server string, id int, panelId int, body PutV1EnrollmentCustomizationIdSsoPanelIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1EnrollmentCustomizationIdSsoPanelIdRequestWithBody(server, id, panelId, "application/json", bodyReader)
}

// NewPutV1EnrollmentCustomizationIdSsoPanelIdRequestWithBody generates requests for PutV1EnrollmentCustomizationIdSsoPanelId with any type of body
func NewPutV1EnrollmentCustomizationIdSsoPanelIdRequestWithBody(server string, id int, panelId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "panel-id", runtime.ParamLocationPath, panelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/sso/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1EnrollmentCustomizationIdTextRequest calls the generic PostV1EnrollmentCustomizationIdText builder with application/json body
func NewPostV1EnrollmentCustomizationIdTextRequest(server string, id int, body PostV1EnrollmentCustomizationIdTextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1EnrollmentCustomizationIdTextRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1EnrollmentCustomizationIdTextRequestWithBody generates requests for PostV1EnrollmentCustomizationIdText with any type of body
func NewPostV1EnrollmentCustomizationIdTextRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/text", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1EnrollmentCustomizationIdTextPanelIdRequest generates requests for DeleteV1EnrollmentCustomizationIdTextPanelId
func NewDeleteV1EnrollmentCustomizationIdTextPanelIdRequest(server string, id int, panelId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "panel-id", runtime.ParamLocationPath, panelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/text/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EnrollmentCustomizationIdTextPanelIdRequest generates requests for GetV1EnrollmentCustomizationIdTextPanelId
func NewGetV1EnrollmentCustomizationIdTextPanelIdRequest(server string, id int, panelId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "panel-id", runtime.ParamLocationPath, panelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/text/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1EnrollmentCustomizationIdTextPanelIdRequest calls the generic PutV1EnrollmentCustomizationIdTextPanelId builder with application/json body
func NewPutV1EnrollmentCustomizationIdTextPanelIdRequest(server string, id int, panelId int, body PutV1EnrollmentCustomizationIdTextPanelIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1EnrollmentCustomizationIdTextPanelIdRequestWithBody(server, id, panelId, "application/json", bodyReader)
}

// NewPutV1EnrollmentCustomizationIdTextPanelIdRequestWithBody generates requests for PutV1EnrollmentCustomizationIdTextPanelId with any type of body
func NewPutV1EnrollmentCustomizationIdTextPanelIdRequestWithBody(server string, id int, panelId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "panel-id", runtime.ParamLocationPath, panelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/text/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1EnrollmentCustomizationIdTextPanelIdMarkdownRequest generates requests for GetV1EnrollmentCustomizationIdTextPanelIdMarkdown
func NewGetV1EnrollmentCustomizationIdTextPanelIdMarkdownRequest(server string, id int, panelId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "panel-id", runtime.ParamLocationPath, panelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment-customization/%s/text/%s/markdown", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EnrollmentAccessGroupsRequest generates requests for GetV1EnrollmentAccessGroups
func NewGetV1EnrollmentAccessGroupsRequest(server string, params *GetV1EnrollmentAccessGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment/access-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1EnrollmentAccessGroupsGroupKeyRequest generates requests for DeleteV1EnrollmentAccessGroupsGroupKey
func NewDeleteV1EnrollmentAccessGroupsGroupKeyRequest(server string, groupKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group-key", runtime.ParamLocationPath, groupKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment/access-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EnrollmentAccessGroupsGroupKeyRequest generates requests for GetV1EnrollmentAccessGroupsGroupKey
func NewGetV1EnrollmentAccessGroupsGroupKeyRequest(server string, groupKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group-key", runtime.ParamLocationPath, groupKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment/access-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1EnrollmentAccessGroupsGroupKeyRequest calls the generic PutV1EnrollmentAccessGroupsGroupKey builder with application/json body
func NewPutV1EnrollmentAccessGroupsGroupKeyRequest(server string, groupKey string, body PutV1EnrollmentAccessGroupsGroupKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1EnrollmentAccessGroupsGroupKeyRequestWithBody(server, groupKey, "application/json", bodyReader)
}

// NewPutV1EnrollmentAccessGroupsGroupKeyRequestWithBody generates requests for PutV1EnrollmentAccessGroupsGroupKey with any type of body
func NewPutV1EnrollmentAccessGroupsGroupKeyRequestWithBody(server string, groupKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group-key", runtime.ParamLocationPath, groupKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment/access-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1EnrollmentFilteredLanguageCodesRequest generates requests for GetV1EnrollmentFilteredLanguageCodes
func NewGetV1EnrollmentFilteredLanguageCodesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment/filtered-language-codes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EnrollmentHistoryRequest generates requests for GetV1EnrollmentHistory
func NewGetV1EnrollmentHistoryRequest(server string, params *GetV1EnrollmentHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1EnrollmentHistoryRequest calls the generic PostV1EnrollmentHistory builder with application/json body
func NewPostV1EnrollmentHistoryRequest(server string, body PostV1EnrollmentHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1EnrollmentHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1EnrollmentHistoryRequestWithBody generates requests for PostV1EnrollmentHistory with any type of body
func NewPostV1EnrollmentHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1EnrollmentLanguageCodesRequest generates requests for GetV1EnrollmentLanguageCodes
func NewGetV1EnrollmentLanguageCodesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment/language-codes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EnrollmentLanguagesRequest generates requests for GetV1EnrollmentLanguages
func NewGetV1EnrollmentLanguagesRequest(server string, params *GetV1EnrollmentLanguagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment/languages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1EnrollmentLanguagesLanguageRequest generates requests for DeleteV1EnrollmentLanguagesLanguage
func NewDeleteV1EnrollmentLanguagesLanguageRequest(server string, language string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment/languages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1EnrollmentLanguagesLanguageRequest generates requests for GetV1EnrollmentLanguagesLanguage
func NewGetV1EnrollmentLanguagesLanguageRequest(server string, language string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment/languages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1EnrollmentLanguagesLanguageRequest calls the generic PutV1EnrollmentLanguagesLanguage builder with application/json body
func NewPutV1EnrollmentLanguagesLanguageRequest(server string, language string, body PutV1EnrollmentLanguagesLanguageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1EnrollmentLanguagesLanguageRequestWithBody(server, language, "application/json", bodyReader)
}

// NewPutV1EnrollmentLanguagesLanguageRequestWithBody generates requests for PutV1EnrollmentLanguagesLanguage with any type of body
func NewPutV1EnrollmentLanguagesLanguageRequestWithBody(server string, language string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrollment/languages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1IconRequestWithBody generates requests for PostV1Icon with any type of body
func NewPostV1IconRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/icon")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1IconIdRequest generates requests for GetV1IconId
func NewGetV1IconIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/icon/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1InventoryInformationRequest generates requests for GetV1InventoryInformation
func NewGetV1InventoryInformationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory-information")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1InventoryPreloadRequest generates requests for DeleteV1InventoryPreload
func NewDeleteV1InventoryPreloadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory-preload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1InventoryPreloadRequest generates requests for GetV1InventoryPreload
func NewGetV1InventoryPreloadRequest(server string, params *GetV1InventoryPreloadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory-preload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1InventoryPreloadRequest calls the generic PostV1InventoryPreload builder with application/json body
func NewPostV1InventoryPreloadRequest(server string, body PostV1InventoryPreloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1InventoryPreloadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1InventoryPreloadRequestWithBody generates requests for PostV1InventoryPreload with any type of body
func NewPostV1InventoryPreloadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory-preload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1InventoryPreloadCsvTemplateRequest generates requests for GetV1InventoryPreloadCsvTemplate
func NewGetV1InventoryPreloadCsvTemplateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory-preload/csv-template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1InventoryPreloadHistoryRequest generates requests for GetV1InventoryPreloadHistory
func NewGetV1InventoryPreloadHistoryRequest(server string, params *GetV1InventoryPreloadHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory-preload/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1InventoryPreloadHistoryRequest calls the generic PostV1InventoryPreloadHistory builder with application/json body
func NewPostV1InventoryPreloadHistoryRequest(server string, body PostV1InventoryPreloadHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1InventoryPreloadHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1InventoryPreloadHistoryRequestWithBody generates requests for PostV1InventoryPreloadHistory with any type of body
func NewPostV1InventoryPreloadHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory-preload/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1InventoryPreloadValidateCsvRequestWithBody generates requests for PostV1InventoryPreloadValidateCsv with any type of body
func NewPostV1InventoryPreloadValidateCsvRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory-preload/validate-csv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1InventoryPreloadIdRequest generates requests for DeleteV1InventoryPreloadId
func NewDeleteV1InventoryPreloadIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory-preload/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1InventoryPreloadIdRequest generates requests for GetV1InventoryPreloadId
func NewGetV1InventoryPreloadIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory-preload/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1InventoryPreloadIdRequest calls the generic PutV1InventoryPreloadId builder with application/json body
func NewPutV1InventoryPreloadIdRequest(server string, id int, body PutV1InventoryPreloadIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1InventoryPreloadIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1InventoryPreloadIdRequestWithBody generates requests for PutV1InventoryPreloadId with any type of body
func NewPutV1InventoryPreloadIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory-preload/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1JamfConnectRequest generates requests for GetV1JamfConnect
func NewGetV1JamfConnectRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-connect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1JamfConnectConfigProfilesRequest generates requests for GetV1JamfConnectConfigProfiles
func NewGetV1JamfConnectConfigProfilesRequest(server string, params *GetV1JamfConnectConfigProfilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-connect/config-profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1JamfConnectConfigProfilesIdRequest calls the generic PutV1JamfConnectConfigProfilesId builder with application/json body
func NewPutV1JamfConnectConfigProfilesIdRequest(server string, id string, body PutV1JamfConnectConfigProfilesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1JamfConnectConfigProfilesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1JamfConnectConfigProfilesIdRequestWithBody generates requests for PutV1JamfConnectConfigProfilesId with any type of body
func NewPutV1JamfConnectConfigProfilesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-connect/config-profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1JamfConnectDeploymentsIdTasksRequest generates requests for GetV1JamfConnectDeploymentsIdTasks
func NewGetV1JamfConnectDeploymentsIdTasksRequest(server string, id string, params *GetV1JamfConnectDeploymentsIdTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-connect/deployments/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1JamfConnectDeploymentsIdTasksRetryRequest calls the generic PostV1JamfConnectDeploymentsIdTasksRetry builder with application/json body
func NewPostV1JamfConnectDeploymentsIdTasksRetryRequest(server string, id string, body PostV1JamfConnectDeploymentsIdTasksRetryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1JamfConnectDeploymentsIdTasksRetryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1JamfConnectDeploymentsIdTasksRetryRequestWithBody generates requests for PostV1JamfConnectDeploymentsIdTasksRetry with any type of body
func NewPostV1JamfConnectDeploymentsIdTasksRetryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-connect/deployments/%s/tasks/retry", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1JamfConnectHistoryRequest generates requests for GetV1JamfConnectHistory
func NewGetV1JamfConnectHistoryRequest(server string, params *GetV1JamfConnectHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-connect/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1JamfConnectHistoryRequest calls the generic PostV1JamfConnectHistory builder with application/json body
func NewPostV1JamfConnectHistoryRequest(server string, body PostV1JamfConnectHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1JamfConnectHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1JamfConnectHistoryRequestWithBody generates requests for PostV1JamfConnectHistory with any type of body
func NewPostV1JamfConnectHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-connect/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1JamfManagementFrameworkRedeployIdRequest generates requests for PostV1JamfManagementFrameworkRedeployId
func NewPostV1JamfManagementFrameworkRedeployIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-management-framework/redeploy/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1JamfPackageRequest generates requests for GetV1JamfPackage
func NewGetV1JamfPackageRequest(server string, params *GetV1JamfPackageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-package")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, params.Application); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1JamfProInformationRequest generates requests for GetV1JamfProInformation
func NewGetV1JamfProInformationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-pro-information")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1JamfProServerUrlRequest generates requests for GetV1JamfProServerUrl
func NewGetV1JamfProServerUrlRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-pro-server-url")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1JamfProServerUrlRequest calls the generic PutV1JamfProServerUrl builder with application/json body
func NewPutV1JamfProServerUrlRequest(server string, body PutV1JamfProServerUrlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1JamfProServerUrlRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1JamfProServerUrlRequestWithBody generates requests for PutV1JamfProServerUrl with any type of body
func NewPutV1JamfProServerUrlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-pro-server-url")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1JamfProServerUrlHistoryRequest generates requests for GetV1JamfProServerUrlHistory
func NewGetV1JamfProServerUrlHistoryRequest(server string, params *GetV1JamfProServerUrlHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-pro-server-url/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1JamfProServerUrlHistoryRequest calls the generic PostV1JamfProServerUrlHistory builder with application/json body
func NewPostV1JamfProServerUrlHistoryRequest(server string, body PostV1JamfProServerUrlHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1JamfProServerUrlHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1JamfProServerUrlHistoryRequestWithBody generates requests for PostV1JamfProServerUrlHistory with any type of body
func NewPostV1JamfProServerUrlHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-pro-server-url/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1JamfProVersionRequest generates requests for GetV1JamfProVersion
func NewGetV1JamfProVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-pro-version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1JamfProtectRequest generates requests for DeleteV1JamfProtect
func NewDeleteV1JamfProtectRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-protect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1JamfProtectRequest generates requests for GetV1JamfProtect
func NewGetV1JamfProtectRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-protect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1JamfProtectRequest calls the generic PutV1JamfProtect builder with application/json body
func NewPutV1JamfProtectRequest(server string, body PutV1JamfProtectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1JamfProtectRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1JamfProtectRequestWithBody generates requests for PutV1JamfProtect with any type of body
func NewPutV1JamfProtectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-protect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1JamfProtectDeploymentsIdTasksRequest generates requests for GetV1JamfProtectDeploymentsIdTasks
func NewGetV1JamfProtectDeploymentsIdTasksRequest(server string, id string, params *GetV1JamfProtectDeploymentsIdTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-protect/deployments/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1JamfProtectDeploymentsIdTasksRetryRequest calls the generic PostV1JamfProtectDeploymentsIdTasksRetry builder with application/json body
func NewPostV1JamfProtectDeploymentsIdTasksRetryRequest(server string, id string, body PostV1JamfProtectDeploymentsIdTasksRetryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1JamfProtectDeploymentsIdTasksRetryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1JamfProtectDeploymentsIdTasksRetryRequestWithBody generates requests for PostV1JamfProtectDeploymentsIdTasksRetry with any type of body
func NewPostV1JamfProtectDeploymentsIdTasksRetryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-protect/deployments/%s/tasks/retry", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1JamfProtectHistoryRequest generates requests for GetV1JamfProtectHistory
func NewGetV1JamfProtectHistoryRequest(server string, params *GetV1JamfProtectHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-protect/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1JamfProtectHistoryRequest calls the generic PostV1JamfProtectHistory builder with application/json body
func NewPostV1JamfProtectHistoryRequest(server string, body PostV1JamfProtectHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1JamfProtectHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1JamfProtectHistoryRequestWithBody generates requests for PostV1JamfProtectHistory with any type of body
func NewPostV1JamfProtectHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-protect/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1JamfProtectPlansRequest generates requests for GetV1JamfProtectPlans
func NewGetV1JamfProtectPlansRequest(server string, params *GetV1JamfProtectPlansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-protect/plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1JamfProtectPlansSyncRequest generates requests for PostV1JamfProtectPlansSync
func NewPostV1JamfProtectPlansSyncRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-protect/plans/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1JamfProtectRegisterRequest calls the generic PostV1JamfProtectRegister builder with application/json body
func NewPostV1JamfProtectRegisterRequest(server string, body PostV1JamfProtectRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1JamfProtectRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1JamfProtectRegisterRequestWithBody generates requests for PostV1JamfProtectRegister with any type of body
func NewPostV1JamfProtectRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jamf-protect/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1LdapKeystoreVerifyRequest calls the generic PostV1LdapKeystoreVerify builder with application/json body
func NewPostV1LdapKeystoreVerifyRequest(server string, body PostV1LdapKeystoreVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1LdapKeystoreVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1LdapKeystoreVerifyRequestWithBody generates requests for PostV1LdapKeystoreVerify with any type of body
func NewPostV1LdapKeystoreVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ldap-keystore/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1LdapGroupsRequest generates requests for GetV1LdapGroups
func NewGetV1LdapGroupsRequest(server string, params *GetV1LdapGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ldap/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Q != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1LdapLdapServersRequest generates requests for GetV1LdapLdapServers
func NewGetV1LdapLdapServersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ldap/ldap-servers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1LdapServersRequest generates requests for GetV1LdapServers
func NewGetV1LdapServersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ldap/servers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1LocalesRequest generates requests for GetV1Locales
func NewGetV1LocalesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/locales")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MacosManagedSoftwareUpdatesAvailableUpdatesRequest generates requests for GetV1MacosManagedSoftwareUpdatesAvailableUpdates
func NewGetV1MacosManagedSoftwareUpdatesAvailableUpdatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/macos-managed-software-updates/available-updates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1MacosManagedSoftwareUpdatesSendUpdatesRequest calls the generic PostV1MacosManagedSoftwareUpdatesSendUpdates builder with application/json body
func NewPostV1MacosManagedSoftwareUpdatesSendUpdatesRequest(server string, body PostV1MacosManagedSoftwareUpdatesSendUpdatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1MacosManagedSoftwareUpdatesSendUpdatesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1MacosManagedSoftwareUpdatesSendUpdatesRequestWithBody generates requests for PostV1MacosManagedSoftwareUpdatesSendUpdates with any type of body
func NewPostV1MacosManagedSoftwareUpdatesSendUpdatesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/macos-managed-software-updates/send-updates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1MdmCommandsRequest generates requests for GetV1MdmCommands
func NewGetV1MdmCommandsRequest(server string, params *GetV1MdmCommandsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mdm/commands")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uuids", runtime.ParamLocationQuery, params.Uuids); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1MdmRenewProfileRequest calls the generic PostV1MdmRenewProfile builder with application/json body
func NewPostV1MdmRenewProfileRequest(server string, body PostV1MdmRenewProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1MdmRenewProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1MdmRenewProfileRequestWithBody generates requests for PostV1MdmRenewProfile with any type of body
func NewPostV1MdmRenewProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mdm/renew-profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1MobileDeviceEnrollmentProfileIdDownloadProfileRequest generates requests for GetV1MobileDeviceEnrollmentProfileIdDownloadProfile
func NewGetV1MobileDeviceEnrollmentProfileIdDownloadProfileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-enrollment-profile/%s/download-profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MobileDeviceGroupsRequest generates requests for GetV1MobileDeviceGroups
func NewGetV1MobileDeviceGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MobileDevicePrestagesRequest generates requests for GetV1MobileDevicePrestages
func NewGetV1MobileDevicePrestagesRequest(server string, params *GetV1MobileDevicePrestagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1MobileDevicePrestagesRequest calls the generic PostV1MobileDevicePrestages builder with application/json body
func NewPostV1MobileDevicePrestagesRequest(server string, body PostV1MobileDevicePrestagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1MobileDevicePrestagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1MobileDevicePrestagesRequestWithBody generates requests for PostV1MobileDevicePrestages with any type of body
func NewPostV1MobileDevicePrestagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1MobileDevicePrestagesScopeRequest generates requests for GetV1MobileDevicePrestagesScope
func NewGetV1MobileDevicePrestagesScopeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/scope")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MobileDevicePrestagesSyncRequest generates requests for GetV1MobileDevicePrestagesSync
func NewGetV1MobileDevicePrestagesSyncRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MobileDevicePrestagesSyncIdRequest generates requests for GetV1MobileDevicePrestagesSyncId
func NewGetV1MobileDevicePrestagesSyncIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/sync/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MobileDevicePrestagesSyncIdLatestRequest generates requests for GetV1MobileDevicePrestagesSyncIdLatest
func NewGetV1MobileDevicePrestagesSyncIdLatestRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/sync/%s/latest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1MobileDevicePrestagesIdRequest generates requests for DeleteV1MobileDevicePrestagesId
func NewDeleteV1MobileDevicePrestagesIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MobileDevicePrestagesIdRequest generates requests for GetV1MobileDevicePrestagesId
func NewGetV1MobileDevicePrestagesIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1MobileDevicePrestagesIdRequest calls the generic PutV1MobileDevicePrestagesId builder with application/json body
func NewPutV1MobileDevicePrestagesIdRequest(server string, id int, body PutV1MobileDevicePrestagesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1MobileDevicePrestagesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1MobileDevicePrestagesIdRequestWithBody generates requests for PutV1MobileDevicePrestagesId with any type of body
func NewPutV1MobileDevicePrestagesIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1MobileDevicePrestagesIdAttachmentsRequest calls the generic DeleteV1MobileDevicePrestagesIdAttachments builder with application/json body
func NewDeleteV1MobileDevicePrestagesIdAttachmentsRequest(server string, id int, body DeleteV1MobileDevicePrestagesIdAttachmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV1MobileDevicePrestagesIdAttachmentsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteV1MobileDevicePrestagesIdAttachmentsRequestWithBody generates requests for DeleteV1MobileDevicePrestagesIdAttachments with any type of body
func NewDeleteV1MobileDevicePrestagesIdAttachmentsRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1MobileDevicePrestagesIdAttachmentsRequest generates requests for GetV1MobileDevicePrestagesIdAttachments
func NewGetV1MobileDevicePrestagesIdAttachmentsRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1MobileDevicePrestagesIdAttachmentsRequestWithBody generates requests for PostV1MobileDevicePrestagesIdAttachments with any type of body
func NewPostV1MobileDevicePrestagesIdAttachmentsRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1MobileDevicePrestagesIdHistoryRequest generates requests for GetV1MobileDevicePrestagesIdHistory
func NewGetV1MobileDevicePrestagesIdHistoryRequest(server string, id int, params *GetV1MobileDevicePrestagesIdHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1MobileDevicePrestagesIdHistoryRequest calls the generic PostV1MobileDevicePrestagesIdHistory builder with application/json body
func NewPostV1MobileDevicePrestagesIdHistoryRequest(server string, id int, body PostV1MobileDevicePrestagesIdHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1MobileDevicePrestagesIdHistoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1MobileDevicePrestagesIdHistoryRequestWithBody generates requests for PostV1MobileDevicePrestagesIdHistory with any type of body
func NewPostV1MobileDevicePrestagesIdHistoryRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1MobileDevicePrestagesIdScopeRequest calls the generic DeleteV1MobileDevicePrestagesIdScope builder with application/json body
func NewDeleteV1MobileDevicePrestagesIdScopeRequest(server string, id int, body DeleteV1MobileDevicePrestagesIdScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteV1MobileDevicePrestagesIdScopeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewDeleteV1MobileDevicePrestagesIdScopeRequestWithBody generates requests for DeleteV1MobileDevicePrestagesIdScope with any type of body
func NewDeleteV1MobileDevicePrestagesIdScopeRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1MobileDevicePrestagesIdScopeRequest generates requests for GetV1MobileDevicePrestagesIdScope
func NewGetV1MobileDevicePrestagesIdScopeRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1MobileDevicePrestagesIdScopeRequest calls the generic PostV1MobileDevicePrestagesIdScope builder with application/json body
func NewPostV1MobileDevicePrestagesIdScopeRequest(server string, id int, body PostV1MobileDevicePrestagesIdScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1MobileDevicePrestagesIdScopeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1MobileDevicePrestagesIdScopeRequestWithBody generates requests for PostV1MobileDevicePrestagesIdScope with any type of body
func NewPostV1MobileDevicePrestagesIdScopeRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV1MobileDevicePrestagesIdScopeRequest calls the generic PutV1MobileDevicePrestagesIdScope builder with application/json body
func NewPutV1MobileDevicePrestagesIdScopeRequest(server string, id int, body PutV1MobileDevicePrestagesIdScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1MobileDevicePrestagesIdScopeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1MobileDevicePrestagesIdScopeRequestWithBody generates requests for PutV1MobileDevicePrestagesIdScope with any type of body
func NewPutV1MobileDevicePrestagesIdScopeRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-device-prestages/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1MobileDevicesRequest generates requests for GetV1MobileDevices
func NewGetV1MobileDevicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-devices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1MobileDevicesIdRequest generates requests for GetV1MobileDevicesId
func NewGetV1MobileDevicesIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1MobileDevicesIdRequest calls the generic PatchV1MobileDevicesId builder with application/json body
func NewPatchV1MobileDevicesIdRequest(server string, id int, body PatchV1MobileDevicesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1MobileDevicesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchV1MobileDevicesIdRequestWithBody generates requests for PatchV1MobileDevicesId with any type of body
func NewPatchV1MobileDevicesIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1MobileDevicesIdDetailRequest generates requests for GetV1MobileDevicesIdDetail
func NewGetV1MobileDevicesIdDetailRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-devices/%s/detail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1MobileDevicesIdRecalculateSmartGroupsRequest generates requests for PostV1MobileDevicesIdRecalculateSmartGroups
func NewPostV1MobileDevicesIdRecalculateSmartGroupsRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/mobile-devices/%s/recalculate-smart-groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1NotificationsRequest generates requests for GetV1Notifications
func NewGetV1NotificationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1NotificationsTypeIdRequest generates requests for DeleteV1NotificationsTypeId
func NewDeleteV1NotificationsTypeIdRequest(server string, pType NotificationType, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ParentAppRequest generates requests for GetV1ParentApp
func NewGetV1ParentAppRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/parent-app")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1ParentAppRequest calls the generic PutV1ParentApp builder with application/json body
func NewPutV1ParentAppRequest(server string, body PutV1ParentAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ParentAppRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1ParentAppRequestWithBody generates requests for PutV1ParentApp with any type of body
func NewPutV1ParentAppRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/parent-app")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ParentAppHistoryRequest generates requests for GetV1ParentAppHistory
func NewGetV1ParentAppHistoryRequest(server string, params *GetV1ParentAppHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/parent-app/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ParentAppHistoryRequest calls the generic PostV1ParentAppHistory builder with application/json body
func NewPostV1ParentAppHistoryRequest(server string, body PostV1ParentAppHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ParentAppHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1ParentAppHistoryRequestWithBody generates requests for PostV1ParentAppHistory with any type of body
func NewPostV1ParentAppHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/parent-app/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1PkiCertificateAuthorityActiveRequest generates requests for GetV1PkiCertificateAuthorityActive
func NewGetV1PkiCertificateAuthorityActiveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/certificate-authority/active")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1PkiCertificateAuthorityActiveDerRequest generates requests for GetV1PkiCertificateAuthorityActiveDer
func NewGetV1PkiCertificateAuthorityActiveDerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/certificate-authority/active/der")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1PkiCertificateAuthorityActivePemRequest generates requests for GetV1PkiCertificateAuthorityActivePem
func NewGetV1PkiCertificateAuthorityActivePemRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/certificate-authority/active/pem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1PkiCertificateAuthorityIdRequest generates requests for GetV1PkiCertificateAuthorityId
func NewGetV1PkiCertificateAuthorityIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/certificate-authority/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1PkiCertificateAuthorityIdDerRequest generates requests for GetV1PkiCertificateAuthorityIdDer
func NewGetV1PkiCertificateAuthorityIdDerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/certificate-authority/%s/der", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1PkiCertificateAuthorityIdPemRequest generates requests for GetV1PkiCertificateAuthorityIdPem
func NewGetV1PkiCertificateAuthorityIdPemRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/certificate-authority/%s/pem", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1PkiVenafiRequest calls the generic PostV1PkiVenafi builder with application/json body
func NewPostV1PkiVenafiRequest(server string, body PostV1PkiVenafiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1PkiVenafiRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1PkiVenafiRequestWithBody generates requests for PostV1PkiVenafi with any type of body
func NewPostV1PkiVenafiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/venafi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1PkiVenafiIdRequest generates requests for DeleteV1PkiVenafiId
func NewDeleteV1PkiVenafiIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/venafi/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1PkiVenafiIdRequest generates requests for GetV1PkiVenafiId
func NewGetV1PkiVenafiIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/venafi/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1PkiVenafiIdRequest calls the generic PatchV1PkiVenafiId builder with application/json body
func NewPatchV1PkiVenafiIdRequest(server string, id string, body PatchV1PkiVenafiIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV1PkiVenafiIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchV1PkiVenafiIdRequestWithBody generates requests for PatchV1PkiVenafiId with any type of body
func NewPatchV1PkiVenafiIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/venafi/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1PkiVenafiIdConnectionStatusRequest generates requests for GetV1PkiVenafiIdConnectionStatus
func NewGetV1PkiVenafiIdConnectionStatusRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/venafi/%s/connection-status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1PkiVenafiIdDependentProfilesRequest generates requests for GetV1PkiVenafiIdDependentProfiles
func NewGetV1PkiVenafiIdDependentProfilesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/venafi/%s/dependent-profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1PkiVenafiIdHistoryRequest generates requests for GetV1PkiVenafiIdHistory
func NewGetV1PkiVenafiIdHistoryRequest(server string, id string, params *GetV1PkiVenafiIdHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/venafi/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1PkiVenafiIdHistoryRequest calls the generic PostV1PkiVenafiIdHistory builder with application/json body
func NewPostV1PkiVenafiIdHistoryRequest(server string, id string, body PostV1PkiVenafiIdHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1PkiVenafiIdHistoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1PkiVenafiIdHistoryRequestWithBody generates requests for PostV1PkiVenafiIdHistory with any type of body
func NewPostV1PkiVenafiIdHistoryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/venafi/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1PkiVenafiIdJamfPublicKeyRequest generates requests for GetV1PkiVenafiIdJamfPublicKey
func NewGetV1PkiVenafiIdJamfPublicKeyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/venafi/%s/jamf-public-key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1PkiVenafiIdJamfPublicKeyRegenerateRequest generates requests for PostV1PkiVenafiIdJamfPublicKeyRegenerate
func NewPostV1PkiVenafiIdJamfPublicKeyRegenerateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/venafi/%s/jamf-public-key/regenerate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1PkiVenafiIdProxyTrustStoreRequest generates requests for DeleteV1PkiVenafiIdProxyTrustStore
func NewDeleteV1PkiVenafiIdProxyTrustStoreRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/venafi/%s/proxy-trust-store", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1PkiVenafiIdProxyTrustStoreRequest generates requests for GetV1PkiVenafiIdProxyTrustStore
func NewGetV1PkiVenafiIdProxyTrustStoreRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/venafi/%s/proxy-trust-store", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1PkiVenafiIdProxyTrustStoreRequestWithBody generates requests for PostV1PkiVenafiIdProxyTrustStore with any type of body
func NewPostV1PkiVenafiIdProxyTrustStoreRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pki/venafi/%s/proxy-trust-store", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1PolicyPropertiesRequest generates requests for GetV1PolicyProperties
func NewGetV1PolicyPropertiesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policy-properties")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1PolicyPropertiesRequest calls the generic PutV1PolicyProperties builder with application/json body
func NewPutV1PolicyPropertiesRequest(server string, body PutV1PolicyPropertiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1PolicyPropertiesRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1PolicyPropertiesRequestWithBody generates requests for PutV1PolicyProperties with any type of body
func NewPutV1PolicyPropertiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/policy-properties")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ReenrollmentRequest generates requests for GetV1Reenrollment
func NewGetV1ReenrollmentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/reenrollment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1ReenrollmentRequest calls the generic PutV1Reenrollment builder with application/json body
func NewPutV1ReenrollmentRequest(server string, body PutV1ReenrollmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ReenrollmentRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1ReenrollmentRequestWithBody generates requests for PutV1Reenrollment with any type of body
func NewPutV1ReenrollmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/reenrollment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ReenrollmentHistoryRequest generates requests for GetV1ReenrollmentHistory
func NewGetV1ReenrollmentHistoryRequest(server string, params *GetV1ReenrollmentHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/reenrollment/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ReenrollmentHistoryRequest calls the generic PostV1ReenrollmentHistory builder with application/json body
func NewPostV1ReenrollmentHistoryRequest(server string, body PostV1ReenrollmentHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ReenrollmentHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1ReenrollmentHistoryRequestWithBody generates requests for PostV1ReenrollmentHistory with any type of body
func NewPostV1ReenrollmentHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/reenrollment/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1ReenrollmentHistoryExportRequest calls the generic PostV1ReenrollmentHistoryExport builder with application/json body
func NewPostV1ReenrollmentHistoryExportRequest(server string, params *PostV1ReenrollmentHistoryExportParams, body PostV1ReenrollmentHistoryExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ReenrollmentHistoryExportRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV1ReenrollmentHistoryExportRequestWithBody generates requests for PostV1ReenrollmentHistoryExport with any type of body
func NewPostV1ReenrollmentHistoryExportRequestWithBody(server string, params *PostV1ReenrollmentHistoryExportParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/reenrollment/history/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ExportFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export-fields", runtime.ParamLocationQuery, *params.ExportFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExportLabels != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export-labels", runtime.ParamLocationQuery, *params.ExportLabels); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ScriptsRequest generates requests for GetV1Scripts
func NewGetV1ScriptsRequest(server string, params *GetV1ScriptsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ScriptsRequest calls the generic PostV1Scripts builder with application/json body
func NewPostV1ScriptsRequest(server string, body PostV1ScriptsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ScriptsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1ScriptsRequestWithBody generates requests for PostV1Scripts with any type of body
func NewPostV1ScriptsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1ScriptsIdRequest generates requests for DeleteV1ScriptsId
func NewDeleteV1ScriptsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ScriptsIdRequest generates requests for GetV1ScriptsId
func NewGetV1ScriptsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1ScriptsIdRequest calls the generic PutV1ScriptsId builder with application/json body
func NewPutV1ScriptsIdRequest(server string, id string, body PutV1ScriptsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1ScriptsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1ScriptsIdRequestWithBody generates requests for PutV1ScriptsId with any type of body
func NewPutV1ScriptsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ScriptsIdDownloadRequest generates requests for GetV1ScriptsIdDownload
func NewGetV1ScriptsIdDownloadRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ScriptsIdHistoryRequest generates requests for GetV1ScriptsIdHistory
func NewGetV1ScriptsIdHistoryRequest(server string, id string, params *GetV1ScriptsIdHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ScriptsIdHistoryRequest calls the generic PostV1ScriptsIdHistory builder with application/json body
func NewPostV1ScriptsIdHistoryRequest(server string, id string, body PostV1ScriptsIdHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ScriptsIdHistoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1ScriptsIdHistoryRequestWithBody generates requests for PostV1ScriptsIdHistory with any type of body
func NewPostV1ScriptsIdHistoryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1SearchMobileDevicesRequest calls the generic PostV1SearchMobileDevices builder with application/json body
func NewPostV1SearchMobileDevicesRequest(server string, body PostV1SearchMobileDevicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SearchMobileDevicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SearchMobileDevicesRequestWithBody generates requests for PostV1SearchMobileDevices with any type of body
func NewPostV1SearchMobileDevicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/search-mobile-devices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1SelfServiceBrandingIosRequest generates requests for GetV1SelfServiceBrandingIos
func NewGetV1SelfServiceBrandingIosRequest(server string, params *GetV1SelfServiceBrandingIosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/self-service/branding/ios")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SelfServiceBrandingIosRequest calls the generic PostV1SelfServiceBrandingIos builder with application/json body
func NewPostV1SelfServiceBrandingIosRequest(server string, body PostV1SelfServiceBrandingIosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SelfServiceBrandingIosRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SelfServiceBrandingIosRequestWithBody generates requests for PostV1SelfServiceBrandingIos with any type of body
func NewPostV1SelfServiceBrandingIosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/self-service/branding/ios")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1SelfServiceBrandingIosIdRequest generates requests for DeleteV1SelfServiceBrandingIosId
func NewDeleteV1SelfServiceBrandingIosIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/self-service/branding/ios/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1SelfServiceBrandingIosIdRequest generates requests for GetV1SelfServiceBrandingIosId
func NewGetV1SelfServiceBrandingIosIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/self-service/branding/ios/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1SelfServiceBrandingIosIdRequest calls the generic PutV1SelfServiceBrandingIosId builder with application/json body
func NewPutV1SelfServiceBrandingIosIdRequest(server string, id string, body PutV1SelfServiceBrandingIosIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1SelfServiceBrandingIosIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1SelfServiceBrandingIosIdRequestWithBody generates requests for PutV1SelfServiceBrandingIosId with any type of body
func NewPutV1SelfServiceBrandingIosIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/self-service/branding/ios/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1SelfServiceBrandingMacosRequest generates requests for GetV1SelfServiceBrandingMacos
func NewGetV1SelfServiceBrandingMacosRequest(server string, params *GetV1SelfServiceBrandingMacosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/self-service/branding/macos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SelfServiceBrandingMacosRequest calls the generic PostV1SelfServiceBrandingMacos builder with application/json body
func NewPostV1SelfServiceBrandingMacosRequest(server string, body PostV1SelfServiceBrandingMacosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SelfServiceBrandingMacosRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SelfServiceBrandingMacosRequestWithBody generates requests for PostV1SelfServiceBrandingMacos with any type of body
func NewPostV1SelfServiceBrandingMacosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/self-service/branding/macos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1SelfServiceBrandingMacosIdRequest generates requests for DeleteV1SelfServiceBrandingMacosId
func NewDeleteV1SelfServiceBrandingMacosIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/self-service/branding/macos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1SelfServiceBrandingMacosIdRequest generates requests for GetV1SelfServiceBrandingMacosId
func NewGetV1SelfServiceBrandingMacosIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/self-service/branding/macos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1SelfServiceBrandingMacosIdRequest calls the generic PutV1SelfServiceBrandingMacosId builder with application/json body
func NewPutV1SelfServiceBrandingMacosIdRequest(server string, id string, body PutV1SelfServiceBrandingMacosIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1SelfServiceBrandingMacosIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1SelfServiceBrandingMacosIdRequestWithBody generates requests for PutV1SelfServiceBrandingMacosId with any type of body
func NewPutV1SelfServiceBrandingMacosIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/self-service/branding/macos/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1SelfServiceSettingsRequest generates requests for GetV1SelfServiceSettings
func NewGetV1SelfServiceSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/self-service/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1SelfServiceSettingsRequest calls the generic PutV1SelfServiceSettings builder with application/json body
func NewPutV1SelfServiceSettingsRequest(server string, body PutV1SelfServiceSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1SelfServiceSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1SelfServiceSettingsRequestWithBody generates requests for PutV1SelfServiceSettings with any type of body
func NewPutV1SelfServiceSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/self-service/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1SitesRequest generates requests for GetV1Sites
func NewGetV1SitesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SmartComputerGroupsIdRecalculateRequest generates requests for PostV1SmartComputerGroupsIdRecalculate
func NewPostV1SmartComputerGroupsIdRecalculateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/smart-computer-groups/%s/recalculate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SmartMobileDeviceGroupsIdRecalculateRequest generates requests for PostV1SmartMobileDeviceGroupsIdRecalculate
func NewPostV1SmartMobileDeviceGroupsIdRecalculateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/smart-mobile-device-groups/%s/recalculate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SmartUserGroupsIdRecalculateRequest generates requests for PostV1SmartUserGroupsIdRecalculate
func NewPostV1SmartUserGroupsIdRecalculateRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/smart-user-groups/%s/recalculate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1SsoRequest generates requests for GetV1Sso
func NewGetV1SsoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1SsoRequest calls the generic PutV1Sso builder with application/json body
func NewPutV1SsoRequest(server string, body PutV1SsoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1SsoRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1SsoRequestWithBody generates requests for PutV1Sso with any type of body
func NewPutV1SsoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1SsoCertRequest generates requests for DeleteV1SsoCert
func NewDeleteV1SsoCertRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/cert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1SsoCertRequest generates requests for GetV1SsoCert
func NewGetV1SsoCertRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/cert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SsoCertRequest generates requests for PostV1SsoCert
func NewPostV1SsoCertRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/cert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1SsoCertRequest calls the generic PutV1SsoCert builder with application/json body
func NewPutV1SsoCertRequest(server string, body PutV1SsoCertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1SsoCertRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1SsoCertRequestWithBody generates requests for PutV1SsoCert with any type of body
func NewPutV1SsoCertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/cert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1SsoCertDownloadRequest generates requests for GetV1SsoCertDownload
func NewGetV1SsoCertDownloadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/cert/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SsoCertParseRequest calls the generic PostV1SsoCertParse builder with application/json body
func NewPostV1SsoCertParseRequest(server string, body PostV1SsoCertParseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SsoCertParseRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SsoCertParseRequestWithBody generates requests for PostV1SsoCertParse with any type of body
func NewPostV1SsoCertParseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/cert/parse")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1SsoDependenciesRequest generates requests for GetV1SsoDependencies
func NewGetV1SsoDependenciesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/dependencies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SsoDisableRequest generates requests for PostV1SsoDisable
func NewPostV1SsoDisableRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/disable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1SsoHistoryRequest generates requests for GetV1SsoHistory
func NewGetV1SsoHistoryRequest(server string, params *GetV1SsoHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SsoHistoryRequest calls the generic PostV1SsoHistory builder with application/json body
func NewPostV1SsoHistoryRequest(server string, body PostV1SsoHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SsoHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SsoHistoryRequestWithBody generates requests for PostV1SsoHistory with any type of body
func NewPostV1SsoHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1SsoMetadataDownloadRequest generates requests for GetV1SsoMetadataDownload
func NewGetV1SsoMetadataDownloadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/metadata/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SsoValidateRequest calls the generic PostV1SsoValidate builder with application/json body
func NewPostV1SsoValidateRequest(server string, body PostV1SsoValidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SsoValidateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SsoValidateRequestWithBody generates requests for PostV1SsoValidate with any type of body
func NewPostV1SsoValidateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso/validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1StaticUserGroupsRequest generates requests for GetV1StaticUserGroups
func NewGetV1StaticUserGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/static-user-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1StaticUserGroupsIdRequest generates requests for GetV1StaticUserGroupsId
func NewGetV1StaticUserGroupsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/static-user-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1SupervisionIdentitiesRequest generates requests for GetV1SupervisionIdentities
func NewGetV1SupervisionIdentitiesRequest(server string, params *GetV1SupervisionIdentitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/supervision-identities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Size != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pagesize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagesize", runtime.ParamLocationQuery, *params.Pagesize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SupervisionIdentitiesRequest calls the generic PostV1SupervisionIdentities builder with application/json body
func NewPostV1SupervisionIdentitiesRequest(server string, body PostV1SupervisionIdentitiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SupervisionIdentitiesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SupervisionIdentitiesRequestWithBody generates requests for PostV1SupervisionIdentities with any type of body
func NewPostV1SupervisionIdentitiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/supervision-identities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1SupervisionIdentitiesUploadRequest calls the generic PostV1SupervisionIdentitiesUpload builder with application/json body
func NewPostV1SupervisionIdentitiesUploadRequest(server string, body PostV1SupervisionIdentitiesUploadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SupervisionIdentitiesUploadRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SupervisionIdentitiesUploadRequestWithBody generates requests for PostV1SupervisionIdentitiesUpload with any type of body
func NewPostV1SupervisionIdentitiesUploadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/supervision-identities/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1SupervisionIdentitiesIdRequest generates requests for DeleteV1SupervisionIdentitiesId
func NewDeleteV1SupervisionIdentitiesIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/supervision-identities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1SupervisionIdentitiesIdRequest generates requests for GetV1SupervisionIdentitiesId
func NewGetV1SupervisionIdentitiesIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/supervision-identities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1SupervisionIdentitiesIdRequest calls the generic PutV1SupervisionIdentitiesId builder with application/json body
func NewPutV1SupervisionIdentitiesIdRequest(server string, id int, body PutV1SupervisionIdentitiesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1SupervisionIdentitiesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1SupervisionIdentitiesIdRequestWithBody generates requests for PutV1SupervisionIdentitiesId with any type of body
func NewPutV1SupervisionIdentitiesIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/supervision-identities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1SupervisionIdentitiesIdDownloadRequest generates requests for GetV1SupervisionIdentitiesIdDownload
func NewGetV1SupervisionIdentitiesIdDownloadRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/supervision-identities/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1SystemInitializeRequest calls the generic PostV1SystemInitialize builder with application/json body
func NewPostV1SystemInitializeRequest(server string, body PostV1SystemInitializeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SystemInitializeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SystemInitializeRequestWithBody generates requests for PostV1SystemInitialize with any type of body
func NewPostV1SystemInitializeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/system/initialize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1SystemInitializeDatabaseConnectionRequest calls the generic PostV1SystemInitializeDatabaseConnection builder with application/json body
func NewPostV1SystemInitializeDatabaseConnectionRequest(server string, body PostV1SystemInitializeDatabaseConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SystemInitializeDatabaseConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SystemInitializeDatabaseConnectionRequestWithBody generates requests for PostV1SystemInitializeDatabaseConnection with any type of body
func NewPostV1SystemInitializeDatabaseConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/system/initialize-database-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1TeacherAppRequest generates requests for GetV1TeacherApp
func NewGetV1TeacherAppRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teacher-app")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1TeacherAppRequest calls the generic PutV1TeacherApp builder with application/json body
func NewPutV1TeacherAppRequest(server string, body PutV1TeacherAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1TeacherAppRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV1TeacherAppRequestWithBody generates requests for PutV1TeacherApp with any type of body
func NewPutV1TeacherAppRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teacher-app")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1TeacherAppHistoryRequest generates requests for GetV1TeacherAppHistory
func NewGetV1TeacherAppHistoryRequest(server string, params *GetV1TeacherAppHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teacher-app/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1TeacherAppHistoryRequest calls the generic PostV1TeacherAppHistory builder with application/json body
func NewPostV1TeacherAppHistoryRequest(server string, body PostV1TeacherAppHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1TeacherAppHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1TeacherAppHistoryRequestWithBody generates requests for PostV1TeacherAppHistory with any type of body
func NewPostV1TeacherAppHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/teacher-app/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1TimeZonesRequest generates requests for GetV1TimeZones
func NewGetV1TimeZonesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/time-zones")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV1UserPreferencesKeyIdRequest generates requests for DeleteV1UserPreferencesKeyId
func NewDeleteV1UserPreferencesKeyIdRequest(server string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/preferences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1UserPreferencesKeyIdRequest generates requests for GetV1UserPreferencesKeyId
func NewGetV1UserPreferencesKeyIdRequest(server string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/preferences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1UserPreferencesKeyIdRequest calls the generic PutV1UserPreferencesKeyId builder with application/json body
func NewPutV1UserPreferencesKeyIdRequest(server string, keyId string, body PutV1UserPreferencesKeyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1UserPreferencesKeyIdRequestWithBody(server, keyId, "application/json", bodyReader)
}

// NewPutV1UserPreferencesKeyIdRequestWithBody generates requests for PutV1UserPreferencesKeyId with any type of body
func NewPutV1UserPreferencesKeyIdRequestWithBody(server string, keyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keyId", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/preferences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1UsersIdRecalculateSmartGroupsRequest generates requests for PostV1UsersIdRecalculateSmartGroups
func NewPostV1UsersIdRecalculateSmartGroupsRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s/recalculate-smart-groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1VolumePurchasingLocationsRequest generates requests for GetV1VolumePurchasingLocations
func NewGetV1VolumePurchasingLocationsRequest(server string, params *GetV1VolumePurchasingLocationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/volume-purchasing-locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1VolumePurchasingLocationsRequest calls the generic PostV1VolumePurchasingLocations builder with application/json body
func NewPostV1VolumePurchasingLocationsRequest(server string, body PostV1VolumePurchasingLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1VolumePurchasingLocationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1VolumePurchasingLocationsRequestWithBody generates requests for PostV1VolumePurchasingLocations with any type of body
func NewPostV1VolumePurchasingLocationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/volume-purchasing-locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1VolumePurchasingLocationsIdRequest generates requests for DeleteV1VolumePurchasingLocationsId
func NewDeleteV1VolumePurchasingLocationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/volume-purchasing-locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1VolumePurchasingLocationsIdRequest generates requests for GetV1VolumePurchasingLocationsId
func NewGetV1VolumePurchasingLocationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/volume-purchasing-locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV1VolumePurchasingLocationsIdRequestWithBody generates requests for PatchV1VolumePurchasingLocationsId with any type of body
func NewPatchV1VolumePurchasingLocationsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/volume-purchasing-locations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1VolumePurchasingLocationsIdHistoryRequest generates requests for GetV1VolumePurchasingLocationsIdHistory
func NewGetV1VolumePurchasingLocationsIdHistoryRequest(server string, id string, params *GetV1VolumePurchasingLocationsIdHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/volume-purchasing-locations/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1VolumePurchasingLocationsIdReclaimRequest generates requests for PostV1VolumePurchasingLocationsIdReclaim
func NewPostV1VolumePurchasingLocationsIdReclaimRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/volume-purchasing-locations/%s/reclaim", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1VolumePurchasingLocationsIdRevokeLicensesRequest generates requests for PostV1VolumePurchasingLocationsIdRevokeLicenses
func NewPostV1VolumePurchasingLocationsIdRevokeLicensesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/volume-purchasing-locations/%s/revoke-licenses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1VolumePurchasingSubscriptionsRequest generates requests for GetV1VolumePurchasingSubscriptions
func NewGetV1VolumePurchasingSubscriptionsRequest(server string, params *GetV1VolumePurchasingSubscriptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/volume-purchasing-subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1VolumePurchasingSubscriptionsRequest calls the generic PostV1VolumePurchasingSubscriptions builder with application/json body
func NewPostV1VolumePurchasingSubscriptionsRequest(server string, body PostV1VolumePurchasingSubscriptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1VolumePurchasingSubscriptionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1VolumePurchasingSubscriptionsRequestWithBody generates requests for PostV1VolumePurchasingSubscriptions with any type of body
func NewPostV1VolumePurchasingSubscriptionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/volume-purchasing-subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1VolumePurchasingSubscriptionsIdRequest generates requests for DeleteV1VolumePurchasingSubscriptionsId
func NewDeleteV1VolumePurchasingSubscriptionsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/volume-purchasing-subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1VolumePurchasingSubscriptionsIdRequest generates requests for GetV1VolumePurchasingSubscriptionsId
func NewGetV1VolumePurchasingSubscriptionsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/volume-purchasing-subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1VolumePurchasingSubscriptionsIdRequest calls the generic PutV1VolumePurchasingSubscriptionsId builder with application/json body
func NewPutV1VolumePurchasingSubscriptionsIdRequest(server string, id string, body PutV1VolumePurchasingSubscriptionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1VolumePurchasingSubscriptionsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1VolumePurchasingSubscriptionsIdRequestWithBody generates requests for PutV1VolumePurchasingSubscriptionsId with any type of body
func NewPutV1VolumePurchasingSubscriptionsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/volume-purchasing-subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2CheckInRequest generates requests for GetV2CheckIn
func NewGetV2CheckInRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/check-in")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV2CheckInRequest calls the generic PutV2CheckIn builder with application/json body
func NewPutV2CheckInRequest(server string, body PutV2CheckInJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2CheckInRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV2CheckInRequestWithBody generates requests for PutV2CheckIn with any type of body
func NewPutV2CheckInRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/check-in")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2CheckInHistoryRequest generates requests for GetV2CheckInHistory
func NewGetV2CheckInHistoryRequest(server string, params *GetV2CheckInHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/check-in/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2CheckInHistoryRequest calls the generic PostV2CheckInHistory builder with application/json body
func NewPostV2CheckInHistoryRequest(server string, body PostV2CheckInHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2CheckInHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2CheckInHistoryRequestWithBody generates requests for PostV2CheckInHistory with any type of body
func NewPostV2CheckInHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/check-in/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV2CloudLdapsRequest calls the generic PostV2CloudLdaps builder with application/json body
func NewPostV2CloudLdapsRequest(server string, body PostV2CloudLdapsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2CloudLdapsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2CloudLdapsRequestWithBody generates requests for PostV2CloudLdaps with any type of body
func NewPostV2CloudLdapsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/cloud-ldaps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2CloudLdapsDefaultsProviderMappingsRequest generates requests for GetV2CloudLdapsDefaultsProviderMappings
func NewGetV2CloudLdapsDefaultsProviderMappingsRequest(server string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/cloud-ldaps/defaults/%s/mappings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2CloudLdapsDefaultsProviderServerConfigurationRequest generates requests for GetV2CloudLdapsDefaultsProviderServerConfiguration
func NewGetV2CloudLdapsDefaultsProviderServerConfigurationRequest(server string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/cloud-ldaps/defaults/%s/server-configuration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV2CloudLdapsIdRequest generates requests for DeleteV2CloudLdapsId
func NewDeleteV2CloudLdapsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/cloud-ldaps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2CloudLdapsIdRequest generates requests for GetV2CloudLdapsId
func NewGetV2CloudLdapsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/cloud-ldaps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV2CloudLdapsIdRequest calls the generic PutV2CloudLdapsId builder with application/json body
func NewPutV2CloudLdapsIdRequest(server string, id string, body PutV2CloudLdapsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2CloudLdapsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV2CloudLdapsIdRequestWithBody generates requests for PutV2CloudLdapsId with any type of body
func NewPutV2CloudLdapsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/cloud-ldaps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2CloudLdapsIdConnectionBindRequest generates requests for GetV2CloudLdapsIdConnectionBind
func NewGetV2CloudLdapsIdConnectionBindRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/cloud-ldaps/%s/connection/bind", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2CloudLdapsIdConnectionSearchRequest generates requests for GetV2CloudLdapsIdConnectionSearch
func NewGetV2CloudLdapsIdConnectionSearchRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/cloud-ldaps/%s/connection/search", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2CloudLdapsIdConnectionStatusRequest generates requests for GetV2CloudLdapsIdConnectionStatus
func NewGetV2CloudLdapsIdConnectionStatusRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/cloud-ldaps/%s/connection/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2CloudLdapsIdMappingsRequest generates requests for GetV2CloudLdapsIdMappings
func NewGetV2CloudLdapsIdMappingsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/cloud-ldaps/%s/mappings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV2CloudLdapsIdMappingsRequest calls the generic PutV2CloudLdapsIdMappings builder with application/json body
func NewPutV2CloudLdapsIdMappingsRequest(server string, id string, body PutV2CloudLdapsIdMappingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2CloudLdapsIdMappingsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV2CloudLdapsIdMappingsRequestWithBody generates requests for PutV2CloudLdapsIdMappings with any type of body
func NewPutV2CloudLdapsIdMappingsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/cloud-ldaps/%s/mappings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2ComputerPrestagesRequest generates requests for GetV2ComputerPrestages
func NewGetV2ComputerPrestagesRequest(server string, params *GetV2ComputerPrestagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/computer-prestages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2ComputerPrestagesRequest calls the generic PostV2ComputerPrestages builder with application/json body
func NewPostV2ComputerPrestagesRequest(server string, body PostV2ComputerPrestagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2ComputerPrestagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2ComputerPrestagesRequestWithBody generates requests for PostV2ComputerPrestages with any type of body
func NewPostV2ComputerPrestagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/computer-prestages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2ComputerPrestagesScopeRequest generates requests for GetV2ComputerPrestagesScope
func NewGetV2ComputerPrestagesScopeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/computer-prestages/scope")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV2ComputerPrestagesIdRequest generates requests for DeleteV2ComputerPrestagesId
func NewDeleteV2ComputerPrestagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/computer-prestages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2ComputerPrestagesIdRequest generates requests for GetV2ComputerPrestagesId
func NewGetV2ComputerPrestagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/computer-prestages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV2ComputerPrestagesIdRequest calls the generic PutV2ComputerPrestagesId builder with application/json body
func NewPutV2ComputerPrestagesIdRequest(server string, id string, body PutV2ComputerPrestagesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2ComputerPrestagesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV2ComputerPrestagesIdRequestWithBody generates requests for PutV2ComputerPrestagesId with any type of body
func NewPutV2ComputerPrestagesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/computer-prestages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2ComputerPrestagesIdScopeRequest generates requests for GetV2ComputerPrestagesIdScope
func NewGetV2ComputerPrestagesIdScopeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/computer-prestages/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2ComputerPrestagesIdScopeRequest calls the generic PostV2ComputerPrestagesIdScope builder with application/json body
func NewPostV2ComputerPrestagesIdScopeRequest(server string, id string, body PostV2ComputerPrestagesIdScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2ComputerPrestagesIdScopeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV2ComputerPrestagesIdScopeRequestWithBody generates requests for PostV2ComputerPrestagesIdScope with any type of body
func NewPostV2ComputerPrestagesIdScopeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/computer-prestages/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV2ComputerPrestagesIdScopeRequest calls the generic PutV2ComputerPrestagesIdScope builder with application/json body
func NewPutV2ComputerPrestagesIdScopeRequest(server string, id string, body PutV2ComputerPrestagesIdScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2ComputerPrestagesIdScopeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV2ComputerPrestagesIdScopeRequestWithBody generates requests for PutV2ComputerPrestagesIdScope with any type of body
func NewPutV2ComputerPrestagesIdScopeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/computer-prestages/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV2ComputerPrestagesIdScopeDeleteMultipleRequest calls the generic PostV2ComputerPrestagesIdScopeDeleteMultiple builder with application/json body
func NewPostV2ComputerPrestagesIdScopeDeleteMultipleRequest(server string, id string, body PostV2ComputerPrestagesIdScopeDeleteMultipleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2ComputerPrestagesIdScopeDeleteMultipleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV2ComputerPrestagesIdScopeDeleteMultipleRequestWithBody generates requests for PostV2ComputerPrestagesIdScopeDeleteMultiple with any type of body
func NewPostV2ComputerPrestagesIdScopeDeleteMultipleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/computer-prestages/%s/scope/delete-multiple", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2EnrollmentRequest generates requests for GetV2Enrollment
func NewGetV2EnrollmentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV2EnrollmentRequest calls the generic PutV2Enrollment builder with application/json body
func NewPutV2EnrollmentRequest(server string, body PutV2EnrollmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2EnrollmentRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV2EnrollmentRequestWithBody generates requests for PutV2Enrollment with any type of body
func NewPutV2EnrollmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2EnrollmentCustomizationsRequest generates requests for GetV2EnrollmentCustomizations
func NewGetV2EnrollmentCustomizationsRequest(server string, params *GetV2EnrollmentCustomizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment-customizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2EnrollmentCustomizationsRequest calls the generic PostV2EnrollmentCustomizations builder with application/json body
func NewPostV2EnrollmentCustomizationsRequest(server string, body PostV2EnrollmentCustomizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2EnrollmentCustomizationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2EnrollmentCustomizationsRequestWithBody generates requests for PostV2EnrollmentCustomizations with any type of body
func NewPostV2EnrollmentCustomizationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment-customizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV2EnrollmentCustomizationsImagesRequestWithBody generates requests for PostV2EnrollmentCustomizationsImages with any type of body
func NewPostV2EnrollmentCustomizationsImagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment-customizations/images")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV2EnrollmentCustomizationsIdRequest generates requests for DeleteV2EnrollmentCustomizationsId
func NewDeleteV2EnrollmentCustomizationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment-customizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2EnrollmentCustomizationsIdRequest generates requests for GetV2EnrollmentCustomizationsId
func NewGetV2EnrollmentCustomizationsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment-customizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV2EnrollmentCustomizationsIdRequest calls the generic PutV2EnrollmentCustomizationsId builder with application/json body
func NewPutV2EnrollmentCustomizationsIdRequest(server string, id string, body PutV2EnrollmentCustomizationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2EnrollmentCustomizationsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV2EnrollmentCustomizationsIdRequestWithBody generates requests for PutV2EnrollmentCustomizationsId with any type of body
func NewPutV2EnrollmentCustomizationsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment-customizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2EnrollmentCustomizationsIdHistoryRequest generates requests for GetV2EnrollmentCustomizationsIdHistory
func NewGetV2EnrollmentCustomizationsIdHistoryRequest(server string, id string, params *GetV2EnrollmentCustomizationsIdHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment-customizations/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2EnrollmentCustomizationsIdHistoryRequest calls the generic PostV2EnrollmentCustomizationsIdHistory builder with application/json body
func NewPostV2EnrollmentCustomizationsIdHistoryRequest(server string, id string, body PostV2EnrollmentCustomizationsIdHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2EnrollmentCustomizationsIdHistoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV2EnrollmentCustomizationsIdHistoryRequestWithBody generates requests for PostV2EnrollmentCustomizationsIdHistory with any type of body
func NewPostV2EnrollmentCustomizationsIdHistoryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment-customizations/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2EnrollmentCustomizationsIdPrestagesRequest generates requests for GetV2EnrollmentCustomizationsIdPrestages
func NewGetV2EnrollmentCustomizationsIdPrestagesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment-customizations/%s/prestages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2EnrollmentAccessGroupsRequest generates requests for GetV2EnrollmentAccessGroups
func NewGetV2EnrollmentAccessGroupsRequest(server string, params *GetV2EnrollmentAccessGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/access-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AllUsersOptionFirst != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "all-users-option-first", runtime.ParamLocationQuery, *params.AllUsersOptionFirst); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2EnrollmentAccessGroupsRequest calls the generic PostV2EnrollmentAccessGroups builder with application/json body
func NewPostV2EnrollmentAccessGroupsRequest(server string, body PostV2EnrollmentAccessGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2EnrollmentAccessGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2EnrollmentAccessGroupsRequestWithBody generates requests for PostV2EnrollmentAccessGroups with any type of body
func NewPostV2EnrollmentAccessGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/access-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV2EnrollmentAccessGroupsServerIdGroupIdRequest generates requests for DeleteV2EnrollmentAccessGroupsServerIdGroupId
func NewDeleteV2EnrollmentAccessGroupsServerIdGroupIdRequest(server string, serverId string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serverId", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/access-groups/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2EnrollmentAccessGroupsServerIdGroupIdRequest generates requests for GetV2EnrollmentAccessGroupsServerIdGroupId
func NewGetV2EnrollmentAccessGroupsServerIdGroupIdRequest(server string, serverId string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serverId", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/access-groups/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV2EnrollmentAccessGroupsServerIdGroupIdRequest calls the generic PutV2EnrollmentAccessGroupsServerIdGroupId builder with application/json body
func NewPutV2EnrollmentAccessGroupsServerIdGroupIdRequest(server string, serverId string, groupId string, body PutV2EnrollmentAccessGroupsServerIdGroupIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2EnrollmentAccessGroupsServerIdGroupIdRequestWithBody(server, serverId, groupId, "application/json", bodyReader)
}

// NewPutV2EnrollmentAccessGroupsServerIdGroupIdRequestWithBody generates requests for PutV2EnrollmentAccessGroupsServerIdGroupId with any type of body
func NewPutV2EnrollmentAccessGroupsServerIdGroupIdRequestWithBody(server string, serverId string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serverId", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/access-groups/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2EnrollmentFilteredLanguageCodesRequest generates requests for GetV2EnrollmentFilteredLanguageCodes
func NewGetV2EnrollmentFilteredLanguageCodesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/filtered-language-codes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2EnrollmentHistoryRequest generates requests for GetV2EnrollmentHistory
func NewGetV2EnrollmentHistoryRequest(server string, params *GetV2EnrollmentHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2EnrollmentHistoryRequest calls the generic PostV2EnrollmentHistory builder with application/json body
func NewPostV2EnrollmentHistoryRequest(server string, body PostV2EnrollmentHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2EnrollmentHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2EnrollmentHistoryRequestWithBody generates requests for PostV2EnrollmentHistory with any type of body
func NewPostV2EnrollmentHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV2EnrollmentHistoryExportRequest calls the generic PostV2EnrollmentHistoryExport builder with application/json body
func NewPostV2EnrollmentHistoryExportRequest(server string, params *PostV2EnrollmentHistoryExportParams, body PostV2EnrollmentHistoryExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2EnrollmentHistoryExportRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV2EnrollmentHistoryExportRequestWithBody generates requests for PostV2EnrollmentHistoryExport with any type of body
func NewPostV2EnrollmentHistoryExportRequestWithBody(server string, params *PostV2EnrollmentHistoryExportParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/history/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ExportFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export-fields", runtime.ParamLocationQuery, *params.ExportFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExportLabels != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export-labels", runtime.ParamLocationQuery, *params.ExportLabels); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2EnrollmentLanguageCodesRequest generates requests for GetV2EnrollmentLanguageCodes
func NewGetV2EnrollmentLanguageCodesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/language-codes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2EnrollmentLanguagesRequest generates requests for GetV2EnrollmentLanguages
func NewGetV2EnrollmentLanguagesRequest(server string, params *GetV2EnrollmentLanguagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/languages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2EnrollmentLanguagesDeleteMultipleRequest calls the generic PostV2EnrollmentLanguagesDeleteMultiple builder with application/json body
func NewPostV2EnrollmentLanguagesDeleteMultipleRequest(server string, body PostV2EnrollmentLanguagesDeleteMultipleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2EnrollmentLanguagesDeleteMultipleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2EnrollmentLanguagesDeleteMultipleRequestWithBody generates requests for PostV2EnrollmentLanguagesDeleteMultiple with any type of body
func NewPostV2EnrollmentLanguagesDeleteMultipleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/languages/delete-multiple")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV2EnrollmentLanguagesLanguageIdRequest generates requests for DeleteV2EnrollmentLanguagesLanguageId
func NewDeleteV2EnrollmentLanguagesLanguageIdRequest(server string, languageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "languageId", runtime.ParamLocationPath, languageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/languages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2EnrollmentLanguagesLanguageIdRequest generates requests for GetV2EnrollmentLanguagesLanguageId
func NewGetV2EnrollmentLanguagesLanguageIdRequest(server string, languageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "languageId", runtime.ParamLocationPath, languageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/languages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV2EnrollmentLanguagesLanguageIdRequest calls the generic PutV2EnrollmentLanguagesLanguageId builder with application/json body
func NewPutV2EnrollmentLanguagesLanguageIdRequest(server string, languageId string, body PutV2EnrollmentLanguagesLanguageIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2EnrollmentLanguagesLanguageIdRequestWithBody(server, languageId, "application/json", bodyReader)
}

// NewPutV2EnrollmentLanguagesLanguageIdRequestWithBody generates requests for PutV2EnrollmentLanguagesLanguageId with any type of body
func NewPutV2EnrollmentLanguagesLanguageIdRequestWithBody(server string, languageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "languageId", runtime.ParamLocationPath, languageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/enrollment/languages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2InventoryPreloadCsvRequest generates requests for GetV2InventoryPreloadCsv
func NewGetV2InventoryPreloadCsvRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/inventory-preload/csv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2InventoryPreloadCsvRequestWithBody generates requests for PostV2InventoryPreloadCsv with any type of body
func NewPostV2InventoryPreloadCsvRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/inventory-preload/csv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2InventoryPreloadCsvTemplateRequest generates requests for GetV2InventoryPreloadCsvTemplate
func NewGetV2InventoryPreloadCsvTemplateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/inventory-preload/csv-template")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2InventoryPreloadCsvValidateRequestWithBody generates requests for PostV2InventoryPreloadCsvValidate with any type of body
func NewPostV2InventoryPreloadCsvValidateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/inventory-preload/csv-validate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2InventoryPreloadEaColumnsRequest generates requests for GetV2InventoryPreloadEaColumns
func NewGetV2InventoryPreloadEaColumnsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/inventory-preload/ea-columns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2InventoryPreloadExportRequest calls the generic PostV2InventoryPreloadExport builder with application/json body
func NewPostV2InventoryPreloadExportRequest(server string, params *PostV2InventoryPreloadExportParams, body PostV2InventoryPreloadExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2InventoryPreloadExportRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV2InventoryPreloadExportRequestWithBody generates requests for PostV2InventoryPreloadExport with any type of body
func NewPostV2InventoryPreloadExportRequestWithBody(server string, params *PostV2InventoryPreloadExportParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/inventory-preload/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ExportFields != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export-fields", runtime.ParamLocationQuery, *params.ExportFields); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExportLabels != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export-labels", runtime.ParamLocationQuery, *params.ExportLabels); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2InventoryPreloadHistoryRequest generates requests for GetV2InventoryPreloadHistory
func NewGetV2InventoryPreloadHistoryRequest(server string, params *GetV2InventoryPreloadHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/inventory-preload/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2InventoryPreloadHistoryRequest calls the generic PostV2InventoryPreloadHistory builder with application/json body
func NewPostV2InventoryPreloadHistoryRequest(server string, body PostV2InventoryPreloadHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2InventoryPreloadHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2InventoryPreloadHistoryRequestWithBody generates requests for PostV2InventoryPreloadHistory with any type of body
func NewPostV2InventoryPreloadHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/inventory-preload/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2InventoryPreloadRecordsRequest generates requests for GetV2InventoryPreloadRecords
func NewGetV2InventoryPreloadRecordsRequest(server string, params *GetV2InventoryPreloadRecordsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/inventory-preload/records")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2InventoryPreloadRecordsRequest calls the generic PostV2InventoryPreloadRecords builder with application/json body
func NewPostV2InventoryPreloadRecordsRequest(server string, body PostV2InventoryPreloadRecordsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2InventoryPreloadRecordsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2InventoryPreloadRecordsRequestWithBody generates requests for PostV2InventoryPreloadRecords with any type of body
func NewPostV2InventoryPreloadRecordsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/inventory-preload/records")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV2InventoryPreloadRecordsDeleteAllRequest generates requests for PostV2InventoryPreloadRecordsDeleteAll
func NewPostV2InventoryPreloadRecordsDeleteAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/inventory-preload/records/delete-all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV2InventoryPreloadRecordsIdRequest generates requests for DeleteV2InventoryPreloadRecordsId
func NewDeleteV2InventoryPreloadRecordsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/inventory-preload/records/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2InventoryPreloadRecordsIdRequest generates requests for GetV2InventoryPreloadRecordsId
func NewGetV2InventoryPreloadRecordsIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/inventory-preload/records/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV2InventoryPreloadRecordsIdRequest calls the generic PutV2InventoryPreloadRecordsId builder with application/json body
func NewPutV2InventoryPreloadRecordsIdRequest(server string, id string, body PutV2InventoryPreloadRecordsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2InventoryPreloadRecordsIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV2InventoryPreloadRecordsIdRequestWithBody generates requests for PutV2InventoryPreloadRecordsId with any type of body
func NewPutV2InventoryPreloadRecordsIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/inventory-preload/records/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2JamfPackageRequest generates requests for GetV2JamfPackage
func NewGetV2JamfPackageRequest(server string, params *GetV2JamfPackageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/jamf-package")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, params.Application); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2JamfProInformationRequest generates requests for GetV2JamfProInformation
func NewGetV2JamfProInformationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/jamf-pro-information")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2MobileDevicePrestagesRequest generates requests for GetV2MobileDevicePrestages
func NewGetV2MobileDevicePrestagesRequest(server string, params *GetV2MobileDevicePrestagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2MobileDevicePrestagesRequest calls the generic PostV2MobileDevicePrestages builder with application/json body
func NewPostV2MobileDevicePrestagesRequest(server string, body PostV2MobileDevicePrestagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2MobileDevicePrestagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2MobileDevicePrestagesRequestWithBody generates requests for PostV2MobileDevicePrestages with any type of body
func NewPostV2MobileDevicePrestagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2MobileDevicePrestagesScopeRequest generates requests for GetV2MobileDevicePrestagesScope
func NewGetV2MobileDevicePrestagesScopeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/scope")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2MobileDevicePrestagesSyncsRequest generates requests for GetV2MobileDevicePrestagesSyncs
func NewGetV2MobileDevicePrestagesSyncsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/syncs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV2MobileDevicePrestagesIdRequest generates requests for DeleteV2MobileDevicePrestagesId
func NewDeleteV2MobileDevicePrestagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2MobileDevicePrestagesIdRequest generates requests for GetV2MobileDevicePrestagesId
func NewGetV2MobileDevicePrestagesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV2MobileDevicePrestagesIdRequest calls the generic PutV2MobileDevicePrestagesId builder with application/json body
func NewPutV2MobileDevicePrestagesIdRequest(server string, id string, body PutV2MobileDevicePrestagesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2MobileDevicePrestagesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV2MobileDevicePrestagesIdRequestWithBody generates requests for PutV2MobileDevicePrestagesId with any type of body
func NewPutV2MobileDevicePrestagesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2MobileDevicePrestagesIdAttachmentsRequest generates requests for GetV2MobileDevicePrestagesIdAttachments
func NewGetV2MobileDevicePrestagesIdAttachmentsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2MobileDevicePrestagesIdAttachmentsRequestWithBody generates requests for PostV2MobileDevicePrestagesIdAttachments with any type of body
func NewPostV2MobileDevicePrestagesIdAttachmentsRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/%s/attachments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleRequest calls the generic PostV2MobileDevicePrestagesIdAttachmentsDeleteMultiple builder with application/json body
func NewPostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleRequest(server string, id string, body PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleRequestWithBody generates requests for PostV2MobileDevicePrestagesIdAttachmentsDeleteMultiple with any type of body
func NewPostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/%s/attachments/delete-multiple", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2MobileDevicePrestagesIdHistoryRequest generates requests for GetV2MobileDevicePrestagesIdHistory
func NewGetV2MobileDevicePrestagesIdHistoryRequest(server string, id string, params *GetV2MobileDevicePrestagesIdHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2MobileDevicePrestagesIdHistoryRequest calls the generic PostV2MobileDevicePrestagesIdHistory builder with application/json body
func NewPostV2MobileDevicePrestagesIdHistoryRequest(server string, id string, body PostV2MobileDevicePrestagesIdHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2MobileDevicePrestagesIdHistoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV2MobileDevicePrestagesIdHistoryRequestWithBody generates requests for PostV2MobileDevicePrestagesIdHistory with any type of body
func NewPostV2MobileDevicePrestagesIdHistoryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2MobileDevicePrestagesIdScopeRequest generates requests for GetV2MobileDevicePrestagesIdScope
func NewGetV2MobileDevicePrestagesIdScopeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2MobileDevicePrestagesIdScopeRequest calls the generic PostV2MobileDevicePrestagesIdScope builder with application/json body
func NewPostV2MobileDevicePrestagesIdScopeRequest(server string, id string, body PostV2MobileDevicePrestagesIdScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2MobileDevicePrestagesIdScopeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV2MobileDevicePrestagesIdScopeRequestWithBody generates requests for PostV2MobileDevicePrestagesIdScope with any type of body
func NewPostV2MobileDevicePrestagesIdScopeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutV2MobileDevicePrestagesIdScopeRequest calls the generic PutV2MobileDevicePrestagesIdScope builder with application/json body
func NewPutV2MobileDevicePrestagesIdScopeRequest(server string, id string, body PutV2MobileDevicePrestagesIdScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2MobileDevicePrestagesIdScopeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV2MobileDevicePrestagesIdScopeRequestWithBody generates requests for PutV2MobileDevicePrestagesIdScope with any type of body
func NewPutV2MobileDevicePrestagesIdScopeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/%s/scope", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV2MobileDevicePrestagesIdScopeDeleteMultipleRequest calls the generic PostV2MobileDevicePrestagesIdScopeDeleteMultiple builder with application/json body
func NewPostV2MobileDevicePrestagesIdScopeDeleteMultipleRequest(server string, id string, body PostV2MobileDevicePrestagesIdScopeDeleteMultipleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2MobileDevicePrestagesIdScopeDeleteMultipleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV2MobileDevicePrestagesIdScopeDeleteMultipleRequestWithBody generates requests for PostV2MobileDevicePrestagesIdScopeDeleteMultiple with any type of body
func NewPostV2MobileDevicePrestagesIdScopeDeleteMultipleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/%s/scope/delete-multiple", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2MobileDevicePrestagesIdSyncsRequest generates requests for GetV2MobileDevicePrestagesIdSyncs
func NewGetV2MobileDevicePrestagesIdSyncsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/%s/syncs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2MobileDevicePrestagesIdSyncsLatestRequest generates requests for GetV2MobileDevicePrestagesIdSyncsLatest
func NewGetV2MobileDevicePrestagesIdSyncsLatestRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-device-prestages/%s/syncs/latest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2MobileDevicesRequest generates requests for GetV2MobileDevices
func NewGetV2MobileDevicesRequest(server string, params *GetV2MobileDevicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-devices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2MobileDevicesIdRequest generates requests for GetV2MobileDevicesId
func NewGetV2MobileDevicesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchV2MobileDevicesIdRequest calls the generic PatchV2MobileDevicesId builder with application/json body
func NewPatchV2MobileDevicesIdRequest(server string, id string, body PatchV2MobileDevicesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchV2MobileDevicesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchV2MobileDevicesIdRequestWithBody generates requests for PatchV2MobileDevicesId with any type of body
func NewPatchV2MobileDevicesIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2MobileDevicesIdDetailRequest generates requests for GetV2MobileDevicesIdDetail
func NewGetV2MobileDevicesIdDetailRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/mobile-devices/%s/detail", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteV2SsoCertRequest generates requests for DeleteV2SsoCert
func NewDeleteV2SsoCertRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sso/cert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2SsoCertRequest generates requests for GetV2SsoCert
func NewGetV2SsoCertRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sso/cert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2SsoCertRequest generates requests for PostV2SsoCert
func NewPostV2SsoCertRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sso/cert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV2SsoCertRequest calls the generic PutV2SsoCert builder with application/json body
func NewPutV2SsoCertRequest(server string, body PutV2SsoCertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV2SsoCertRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV2SsoCertRequestWithBody generates requests for PutV2SsoCert with any type of body
func NewPutV2SsoCertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sso/cert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2SsoCertDownloadRequest generates requests for GetV2SsoCertDownload
func NewGetV2SsoCertDownloadRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sso/cert/download")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV2SsoCertParseRequest calls the generic PostV2SsoCertParse builder with application/json body
func NewPostV2SsoCertParseRequest(server string, body PostV2SsoCertParseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV2SsoCertParseRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV2SsoCertParseRequestWithBody generates requests for PostV2SsoCertParse with any type of body
func NewPostV2SsoCertParseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sso/cert/parse")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3CheckInRequest generates requests for GetV3CheckIn
func NewGetV3CheckInRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/check-in")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV3CheckInRequest calls the generic PutV3CheckIn builder with application/json body
func NewPutV3CheckInRequest(server string, body PutV3CheckInJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV3CheckInRequestWithBody(server, "application/json", bodyReader)
}

// NewPutV3CheckInRequestWithBody generates requests for PutV3CheckIn with any type of body
func NewPutV3CheckInRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/check-in")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV3CheckInHistoryRequest generates requests for GetV3CheckInHistory
func NewGetV3CheckInHistoryRequest(server string, params *GetV3CheckInHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/check-in/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page-size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV3CheckInHistoryRequest calls the generic PostV3CheckInHistory builder with application/json body
func NewPostV3CheckInHistoryRequest(server string, body PostV3CheckInHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV3CheckInHistoryRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV3CheckInHistoryRequestWithBody generates requests for PostV3CheckInHistory with any type of body
func NewPostV3CheckInHistoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v3/check-in/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVppAdminAccountsRequest generates requests for GetVppAdminAccounts
func NewGetVppAdminAccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vpp/admin-accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVppSubscriptionsRequest generates requests for GetVppSubscriptions
func NewGetVppSubscriptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vpp/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVppSubscriptionsIdRequest generates requests for GetVppSubscriptionsId
func NewGetVppSubscriptionsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vpp/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAuth request
	GetAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthResponse, error)

	// PostAuthCurrent request
	PostAuthCurrentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAuthCurrentResponse, error)

	// PostAuthInvalidateToken request
	PostAuthInvalidateTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAuthInvalidateTokenResponse, error)

	// PostAuthKeepAlive request
	PostAuthKeepAliveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAuthKeepAliveResponse, error)

	// PostAuthTokens request
	PostAuthTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAuthTokensResponse, error)

	// GetDevicesExtensionAttributes request
	GetDevicesExtensionAttributesWithResponse(ctx context.Context, params *GetDevicesExtensionAttributesParams, reqEditors ...RequestEditorFn) (*GetDevicesExtensionAttributesResponse, error)

	// DeleteInventoryPreload request
	DeleteInventoryPreloadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteInventoryPreloadResponse, error)

	// GetInventoryPreload request
	GetInventoryPreloadWithResponse(ctx context.Context, params *GetInventoryPreloadParams, reqEditors ...RequestEditorFn) (*GetInventoryPreloadResponse, error)

	// PostInventoryPreload request with any body
	PostInventoryPreloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryPreloadResponse, error)

	PostInventoryPreloadWithResponse(ctx context.Context, body PostInventoryPreloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInventoryPreloadResponse, error)

	// GetInventoryPreloadCsvTemplate request
	GetInventoryPreloadCsvTemplateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInventoryPreloadCsvTemplateResponse, error)

	// GetInventoryPreloadHistory request
	GetInventoryPreloadHistoryWithResponse(ctx context.Context, params *GetInventoryPreloadHistoryParams, reqEditors ...RequestEditorFn) (*GetInventoryPreloadHistoryResponse, error)

	// PostInventoryPreloadHistoryNotes request with any body
	PostInventoryPreloadHistoryNotesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryPreloadHistoryNotesResponse, error)

	PostInventoryPreloadHistoryNotesWithResponse(ctx context.Context, body PostInventoryPreloadHistoryNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInventoryPreloadHistoryNotesResponse, error)

	// PostInventoryPreloadValidateCsv request with any body
	PostInventoryPreloadValidateCsvWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryPreloadValidateCsvResponse, error)

	// DeleteInventoryPreloadId request
	DeleteInventoryPreloadIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteInventoryPreloadIdResponse, error)

	// GetInventoryPreloadId request
	GetInventoryPreloadIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetInventoryPreloadIdResponse, error)

	// PutInventoryPreloadId request with any body
	PutInventoryPreloadIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInventoryPreloadIdResponse, error)

	PutInventoryPreloadIdWithResponse(ctx context.Context, id int, body PutInventoryPreloadIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInventoryPreloadIdResponse, error)

	// GetLdapGroups request
	GetLdapGroupsWithResponse(ctx context.Context, params *GetLdapGroupsParams, reqEditors ...RequestEditorFn) (*GetLdapGroupsResponse, error)

	// GetLdapServers request
	GetLdapServersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLdapServersResponse, error)

	// GetNotificationsAlerts request
	GetNotificationsAlertsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNotificationsAlertsResponse, error)

	// DeleteNotificationsAlertsId request
	DeleteNotificationsAlertsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteNotificationsAlertsIdResponse, error)

	// DeleteNotificationsAlertsTypeId request
	DeleteNotificationsAlertsTypeIdWithResponse(ctx context.Context, pType NotificationType, id int, reqEditors ...RequestEditorFn) (*DeleteNotificationsAlertsTypeIdResponse, error)

	// PostPatchDisclaimerAgree request
	PostPatchDisclaimerAgreeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostPatchDisclaimerAgreeResponse, error)

	// GetPatchObjPolicyId request
	GetPatchObjPolicyIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjPolicyIdResponse, error)

	// GetPatchObjPolicyIdLogsEligibleRetryCount request
	GetPatchObjPolicyIdLogsEligibleRetryCountWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjPolicyIdLogsEligibleRetryCountResponse, error)

	// GetPatchObjPolicyIdSoftwareTitleConfigurationId request
	GetPatchObjPolicyIdSoftwareTitleConfigurationIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjPolicyIdSoftwareTitleConfigurationIdResponse, error)

	// GetPatchObjSoftwareTitleIdPolicies request
	GetPatchObjSoftwareTitleIdPoliciesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjSoftwareTitleIdPoliciesResponse, error)

	// GetPatchObjSoftwareTitleConfigurationId request
	GetPatchObjSoftwareTitleConfigurationIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjSoftwareTitleConfigurationIdResponse, error)

	// GetPatchObjId request
	GetPatchObjIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjIdResponse, error)

	// PutPatchObjId request with any body
	PutPatchObjIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPatchObjIdResponse, error)

	PutPatchObjIdWithResponse(ctx context.Context, id int, body PutPatchObjIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPatchObjIdResponse, error)

	// GetPatchObjIdVersions request
	GetPatchObjIdVersionsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjIdVersionsResponse, error)

	// GetPatchObjsPolicyId request
	GetPatchObjsPolicyIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjsPolicyIdResponse, error)

	// GetPatchOnDashboard request
	GetPatchOnDashboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPatchOnDashboardResponse, error)

	// GetPatchPatchPolicies request
	GetPatchPatchPoliciesWithResponse(ctx context.Context, params *GetPatchPatchPoliciesParams, reqEditors ...RequestEditorFn) (*GetPatchPatchPoliciesResponse, error)

	// DeletePatchPatchPoliciesIdDashboard request
	DeletePatchPatchPoliciesIdDashboardWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeletePatchPatchPoliciesIdDashboardResponse, error)

	// GetPatchPatchPoliciesIdDashboard request
	GetPatchPatchPoliciesIdDashboardWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchPatchPoliciesIdDashboardResponse, error)

	// PostPatchPatchPoliciesIdDashboard request
	PostPatchPatchPoliciesIdDashboardWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostPatchPatchPoliciesIdDashboardResponse, error)

	// GetPatchPatchPoliciesIdLogs request
	GetPatchPatchPoliciesIdLogsWithResponse(ctx context.Context, id int, params *GetPatchPatchPoliciesIdLogsParams, reqEditors ...RequestEditorFn) (*GetPatchPatchPoliciesIdLogsResponse, error)

	// PostPatchRetryPolicy request with any body
	PostPatchRetryPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPatchRetryPolicyResponse, error)

	PostPatchRetryPolicyWithResponse(ctx context.Context, body PostPatchRetryPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPatchRetryPolicyResponse, error)

	// PostPatchSearchActivePatchHistory request with any body
	PostPatchSearchActivePatchHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPatchSearchActivePatchHistoryResponse, error)

	PostPatchSearchActivePatchHistoryWithResponse(ctx context.Context, body PostPatchSearchActivePatchHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPatchSearchActivePatchHistoryResponse, error)

	// PostPatchSearchPatchPolicyLogs request with any body
	PostPatchSearchPatchPolicyLogsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPatchSearchPatchPolicyLogsResponse, error)

	PostPatchSearchPatchPolicyLogsWithResponse(ctx context.Context, body PostPatchSearchPatchPolicyLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPatchSearchPatchPolicyLogsResponse, error)

	// PostPatchSvcDisclaimerAgree request
	PostPatchSvcDisclaimerAgreeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostPatchSvcDisclaimerAgreeResponse, error)

	// PostPatchSvcRetryPolicy request with any body
	PostPatchSvcRetryPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPatchSvcRetryPolicyResponse, error)

	PostPatchSvcRetryPolicyWithResponse(ctx context.Context, body PostPatchSvcRetryPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPatchSvcRetryPolicyResponse, error)

	// GetPatchId request
	GetPatchIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchIdResponse, error)

	// PutPatchId request with any body
	PutPatchIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPatchIdResponse, error)

	PutPatchIdWithResponse(ctx context.Context, id int, body PutPatchIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPatchIdResponse, error)

	// GetPatchIdVersions request
	GetPatchIdVersionsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchIdVersionsResponse, error)

	// GetPreviewComputers request
	GetPreviewComputersWithResponse(ctx context.Context, params *GetPreviewComputersParams, reqEditors ...RequestEditorFn) (*GetPreviewComputersResponse, error)

	// GetPreviewEnrollmentAccessGroups request
	GetPreviewEnrollmentAccessGroupsWithResponse(ctx context.Context, params *GetPreviewEnrollmentAccessGroupsParams, reqEditors ...RequestEditorFn) (*GetPreviewEnrollmentAccessGroupsResponse, error)

	// PostPreviewEnrollmentAccessGroups request with any body
	PostPreviewEnrollmentAccessGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPreviewEnrollmentAccessGroupsResponse, error)

	PostPreviewEnrollmentAccessGroupsWithResponse(ctx context.Context, body PostPreviewEnrollmentAccessGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPreviewEnrollmentAccessGroupsResponse, error)

	// DeletePreviewEnrollmentAccessGroupsId request
	DeletePreviewEnrollmentAccessGroupsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePreviewEnrollmentAccessGroupsIdResponse, error)

	// GetPreviewEnrollmentAccessGroupsId request
	GetPreviewEnrollmentAccessGroupsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPreviewEnrollmentAccessGroupsIdResponse, error)

	// PutPreviewEnrollmentAccessGroupsId request with any body
	PutPreviewEnrollmentAccessGroupsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPreviewEnrollmentAccessGroupsIdResponse, error)

	PutPreviewEnrollmentAccessGroupsIdWithResponse(ctx context.Context, id string, body PutPreviewEnrollmentAccessGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPreviewEnrollmentAccessGroupsIdResponse, error)

	// PostPreviewMdmCommands request with any body
	PostPreviewMdmCommandsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPreviewMdmCommandsResponse, error)

	PostPreviewMdmCommandsWithResponse(ctx context.Context, body PostPreviewMdmCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPreviewMdmCommandsResponse, error)

	// GetPreviewRemoteAdministrationConfigurations request
	GetPreviewRemoteAdministrationConfigurationsWithResponse(ctx context.Context, params *GetPreviewRemoteAdministrationConfigurationsParams, reqEditors ...RequestEditorFn) (*GetPreviewRemoteAdministrationConfigurationsResponse, error)

	// PostPreviewRemoteAdministrationConfigurationsTeamViewer request with any body
	PostPreviewRemoteAdministrationConfigurationsTeamViewerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerResponse, error)

	PostPreviewRemoteAdministrationConfigurationsTeamViewerWithResponse(ctx context.Context, body PostPreviewRemoteAdministrationConfigurationsTeamViewerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerResponse, error)

	// GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessions request
	GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsWithResponse(ctx context.Context, configurationId string, params *GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsParams, reqEditors ...RequestEditorFn) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse, error)

	// PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessions request with any body
	PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsWithBodyWithResponse(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse, error)

	PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsWithResponse(ctx context.Context, configurationId string, body PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse, error)

	// GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionId request
	GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdWithResponse(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResponse, error)

	// PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClose request
	PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseWithResponse(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseResponse, error)

	// PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotification request
	PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationWithResponse(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationResponse, error)

	// GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatus request
	GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusWithResponse(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusResponse, error)

	// DeletePreviewRemoteAdministrationConfigurationsTeamViewerId request
	DeletePreviewRemoteAdministrationConfigurationsTeamViewerIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePreviewRemoteAdministrationConfigurationsTeamViewerIdResponse, error)

	// GetPreviewRemoteAdministrationConfigurationsTeamViewerId request
	GetPreviewRemoteAdministrationConfigurationsTeamViewerIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse, error)

	// PatchPreviewRemoteAdministrationConfigurationsTeamViewerId request with any body
	PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse, error)

	PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdWithResponse(ctx context.Context, id string, body PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse, error)

	// GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatus request
	GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusResponse, error)

	// PostSelfServiceBrandingImages request with any body
	PostSelfServiceBrandingImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSelfServiceBrandingImagesResponse, error)

	// PostSettingsIssueTomcatSslCertificate request
	PostSettingsIssueTomcatSslCertificateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSettingsIssueTomcatSslCertificateResponse, error)

	// GetSettingsObjPolicyProperties request
	GetSettingsObjPolicyPropertiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsObjPolicyPropertiesResponse, error)

	// PutSettingsObjPolicyProperties request with any body
	PutSettingsObjPolicyPropertiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsObjPolicyPropertiesResponse, error)

	PutSettingsObjPolicyPropertiesWithResponse(ctx context.Context, body PutSettingsObjPolicyPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsObjPolicyPropertiesResponse, error)

	// GetSettingsSites request
	GetSettingsSitesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsSitesResponse, error)

	// GetStartupStatus request
	GetStartupStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStartupStatusResponse, error)

	// PostSystemInitialize request with any body
	PostSystemInitializeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemInitializeResponse, error)

	PostSystemInitializeWithResponse(ctx context.Context, body PostSystemInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemInitializeResponse, error)

	// PostSystemInitializeDatabaseConnection request with any body
	PostSystemInitializeDatabaseConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemInitializeDatabaseConnectionResponse, error)

	PostSystemInitializeDatabaseConnectionWithResponse(ctx context.Context, body PostSystemInitializeDatabaseConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemInitializeDatabaseConnectionResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// DeleteUserObjPreferenceKey request
	DeleteUserObjPreferenceKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteUserObjPreferenceKeyResponse, error)

	// GetUserObjPreferenceKey request
	GetUserObjPreferenceKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetUserObjPreferenceKeyResponse, error)

	// PutUserObjPreferenceKey request with any body
	PutUserObjPreferenceKeyWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserObjPreferenceKeyResponse, error)

	PutUserObjPreferenceKeyWithResponse(ctx context.Context, key string, body PutUserObjPreferenceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserObjPreferenceKeyResponse, error)

	// PostUserUpdateSession request with any body
	PostUserUpdateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUpdateSessionResponse, error)

	PostUserUpdateSessionWithResponse(ctx context.Context, body PostUserUpdateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUpdateSessionResponse, error)

	// GetV1AdueSessionTokenSettings request
	GetV1AdueSessionTokenSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AdueSessionTokenSettingsResponse, error)

	// PutV1AdueSessionTokenSettings request with any body
	PutV1AdueSessionTokenSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1AdueSessionTokenSettingsResponse, error)

	PutV1AdueSessionTokenSettingsWithResponse(ctx context.Context, body PutV1AdueSessionTokenSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1AdueSessionTokenSettingsResponse, error)

	// GetV1AdvancedMobileDeviceSearches request
	GetV1AdvancedMobileDeviceSearchesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AdvancedMobileDeviceSearchesResponse, error)

	// PostV1AdvancedMobileDeviceSearches request with any body
	PostV1AdvancedMobileDeviceSearchesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AdvancedMobileDeviceSearchesResponse, error)

	PostV1AdvancedMobileDeviceSearchesWithResponse(ctx context.Context, body PostV1AdvancedMobileDeviceSearchesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AdvancedMobileDeviceSearchesResponse, error)

	// GetV1AdvancedMobileDeviceSearchesChoices request
	GetV1AdvancedMobileDeviceSearchesChoicesWithResponse(ctx context.Context, params *GetV1AdvancedMobileDeviceSearchesChoicesParams, reqEditors ...RequestEditorFn) (*GetV1AdvancedMobileDeviceSearchesChoicesResponse, error)

	// PostV1AdvancedMobileDeviceSearchesDeleteMultiple request with any body
	PostV1AdvancedMobileDeviceSearchesDeleteMultipleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AdvancedMobileDeviceSearchesDeleteMultipleResponse, error)

	PostV1AdvancedMobileDeviceSearchesDeleteMultipleWithResponse(ctx context.Context, body PostV1AdvancedMobileDeviceSearchesDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AdvancedMobileDeviceSearchesDeleteMultipleResponse, error)

	// DeleteV1AdvancedMobileDeviceSearchesId request
	DeleteV1AdvancedMobileDeviceSearchesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1AdvancedMobileDeviceSearchesIdResponse, error)

	// GetV1AdvancedMobileDeviceSearchesId request
	GetV1AdvancedMobileDeviceSearchesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1AdvancedMobileDeviceSearchesIdResponse, error)

	// PutV1AdvancedMobileDeviceSearchesId request with any body
	PutV1AdvancedMobileDeviceSearchesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1AdvancedMobileDeviceSearchesIdResponse, error)

	PutV1AdvancedMobileDeviceSearchesIdWithResponse(ctx context.Context, id string, body PutV1AdvancedMobileDeviceSearchesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1AdvancedMobileDeviceSearchesIdResponse, error)

	// GetV1AdvancedUserContentSearches request
	GetV1AdvancedUserContentSearchesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AdvancedUserContentSearchesResponse, error)

	// PostV1AdvancedUserContentSearches request with any body
	PostV1AdvancedUserContentSearchesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AdvancedUserContentSearchesResponse, error)

	PostV1AdvancedUserContentSearchesWithResponse(ctx context.Context, body PostV1AdvancedUserContentSearchesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AdvancedUserContentSearchesResponse, error)

	// DeleteV1AdvancedUserContentSearchesId request
	DeleteV1AdvancedUserContentSearchesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1AdvancedUserContentSearchesIdResponse, error)

	// GetV1AdvancedUserContentSearchesId request
	GetV1AdvancedUserContentSearchesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1AdvancedUserContentSearchesIdResponse, error)

	// PutV1AdvancedUserContentSearchesId request with any body
	PutV1AdvancedUserContentSearchesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1AdvancedUserContentSearchesIdResponse, error)

	PutV1AdvancedUserContentSearchesIdWithResponse(ctx context.Context, id string, body PutV1AdvancedUserContentSearchesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1AdvancedUserContentSearchesIdResponse, error)

	// GetV1AppDynamicsScriptConfiguration request
	GetV1AppDynamicsScriptConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AppDynamicsScriptConfigurationResponse, error)

	// GetV1AppRequestFormInputFields request
	GetV1AppRequestFormInputFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AppRequestFormInputFieldsResponse, error)

	// PostV1AppRequestFormInputFields request with any body
	PostV1AppRequestFormInputFieldsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AppRequestFormInputFieldsResponse, error)

	PostV1AppRequestFormInputFieldsWithResponse(ctx context.Context, body PostV1AppRequestFormInputFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AppRequestFormInputFieldsResponse, error)

	// PutV1AppRequestFormInputFields request with any body
	PutV1AppRequestFormInputFieldsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1AppRequestFormInputFieldsResponse, error)

	PutV1AppRequestFormInputFieldsWithResponse(ctx context.Context, body PutV1AppRequestFormInputFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1AppRequestFormInputFieldsResponse, error)

	// DeleteV1AppRequestFormInputFieldsId request
	DeleteV1AppRequestFormInputFieldsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteV1AppRequestFormInputFieldsIdResponse, error)

	// GetV1AppRequestFormInputFieldsId request
	GetV1AppRequestFormInputFieldsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1AppRequestFormInputFieldsIdResponse, error)

	// PutV1AppRequestFormInputFieldsId request with any body
	PutV1AppRequestFormInputFieldsIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1AppRequestFormInputFieldsIdResponse, error)

	PutV1AppRequestFormInputFieldsIdWithResponse(ctx context.Context, id int, body PutV1AppRequestFormInputFieldsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1AppRequestFormInputFieldsIdResponse, error)

	// GetV1AppRequestSettings request
	GetV1AppRequestSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AppRequestSettingsResponse, error)

	// PutV1AppRequestSettings request with any body
	PutV1AppRequestSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1AppRequestSettingsResponse, error)

	PutV1AppRequestSettingsWithResponse(ctx context.Context, body PutV1AppRequestSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1AppRequestSettingsResponse, error)

	// GetV1AppStoreCountryCodes request
	GetV1AppStoreCountryCodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AppStoreCountryCodesResponse, error)

	// GetV1Auth request
	GetV1AuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AuthResponse, error)

	// PostV1AuthInvalidateToken request
	PostV1AuthInvalidateTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV1AuthInvalidateTokenResponse, error)

	// PostV1AuthKeepAlive request
	PostV1AuthKeepAliveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV1AuthKeepAliveResponse, error)

	// PostV1AuthToken request
	PostV1AuthTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV1AuthTokenResponse, error)

	// PostV1AzureAdMigrationReports request with any body
	PostV1AzureAdMigrationReportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AzureAdMigrationReportsResponse, error)

	PostV1AzureAdMigrationReportsWithResponse(ctx context.Context, body PostV1AzureAdMigrationReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AzureAdMigrationReportsResponse, error)

	// GetV1AzureAdMigrationReportsPending request
	GetV1AzureAdMigrationReportsPendingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AzureAdMigrationReportsPendingResponse, error)

	// GetV1AzureAdMigrationReportsId request
	GetV1AzureAdMigrationReportsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1AzureAdMigrationReportsIdResponse, error)

	// GetV1AzureAdMigrationReportsIdDownload request
	GetV1AzureAdMigrationReportsIdDownloadWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1AzureAdMigrationReportsIdDownloadResponse, error)

	// GetV1Buildings request
	GetV1BuildingsWithResponse(ctx context.Context, params *GetV1BuildingsParams, reqEditors ...RequestEditorFn) (*GetV1BuildingsResponse, error)

	// PostV1Buildings request with any body
	PostV1BuildingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1BuildingsResponse, error)

	PostV1BuildingsWithResponse(ctx context.Context, body PostV1BuildingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1BuildingsResponse, error)

	// PostV1BuildingsDeleteMultiple request with any body
	PostV1BuildingsDeleteMultipleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1BuildingsDeleteMultipleResponse, error)

	PostV1BuildingsDeleteMultipleWithResponse(ctx context.Context, body PostV1BuildingsDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1BuildingsDeleteMultipleResponse, error)

	// DeleteV1BuildingsId request
	DeleteV1BuildingsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1BuildingsIdResponse, error)

	// GetV1BuildingsId request
	GetV1BuildingsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1BuildingsIdResponse, error)

	// PutV1BuildingsId request with any body
	PutV1BuildingsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1BuildingsIdResponse, error)

	PutV1BuildingsIdWithResponse(ctx context.Context, id string, body PutV1BuildingsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1BuildingsIdResponse, error)

	// GetV1BuildingsIdHistory request
	GetV1BuildingsIdHistoryWithResponse(ctx context.Context, id string, params *GetV1BuildingsIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1BuildingsIdHistoryResponse, error)

	// PostV1BuildingsIdHistory request with any body
	PostV1BuildingsIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1BuildingsIdHistoryResponse, error)

	PostV1BuildingsIdHistoryWithResponse(ctx context.Context, id string, body PostV1BuildingsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1BuildingsIdHistoryResponse, error)

	// GetV1CacheSettings request
	GetV1CacheSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1CacheSettingsResponse, error)

	// PutV1CacheSettings request with any body
	PutV1CacheSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1CacheSettingsResponse, error)

	PutV1CacheSettingsWithResponse(ctx context.Context, body PutV1CacheSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1CacheSettingsResponse, error)

	// GetV1Categories request
	GetV1CategoriesWithResponse(ctx context.Context, params *GetV1CategoriesParams, reqEditors ...RequestEditorFn) (*GetV1CategoriesResponse, error)

	// PostV1Categories request with any body
	PostV1CategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CategoriesResponse, error)

	PostV1CategoriesWithResponse(ctx context.Context, body PostV1CategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CategoriesResponse, error)

	// PostV1CategoriesDeleteMultiple request with any body
	PostV1CategoriesDeleteMultipleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CategoriesDeleteMultipleResponse, error)

	PostV1CategoriesDeleteMultipleWithResponse(ctx context.Context, body PostV1CategoriesDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CategoriesDeleteMultipleResponse, error)

	// DeleteV1CategoriesId request
	DeleteV1CategoriesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1CategoriesIdResponse, error)

	// GetV1CategoriesId request
	GetV1CategoriesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1CategoriesIdResponse, error)

	// PutV1CategoriesId request with any body
	PutV1CategoriesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1CategoriesIdResponse, error)

	PutV1CategoriesIdWithResponse(ctx context.Context, id string, body PutV1CategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1CategoriesIdResponse, error)

	// GetV1CategoriesIdHistory request
	GetV1CategoriesIdHistoryWithResponse(ctx context.Context, id string, params *GetV1CategoriesIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1CategoriesIdHistoryResponse, error)

	// PostV1CategoriesIdHistory request with any body
	PostV1CategoriesIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CategoriesIdHistoryResponse, error)

	PostV1CategoriesIdHistoryWithResponse(ctx context.Context, id string, body PostV1CategoriesIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CategoriesIdHistoryResponse, error)

	// GetV1ClassicLdapId request
	GetV1ClassicLdapIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1ClassicLdapIdResponse, error)

	// PostV1CloudAzure request with any body
	PostV1CloudAzureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CloudAzureResponse, error)

	PostV1CloudAzureWithResponse(ctx context.Context, body PostV1CloudAzureJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CloudAzureResponse, error)

	// GetV1CloudAzureDefaultsMappings request
	GetV1CloudAzureDefaultsMappingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1CloudAzureDefaultsMappingsResponse, error)

	// GetV1CloudAzureDefaultsServerConfiguration request
	GetV1CloudAzureDefaultsServerConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1CloudAzureDefaultsServerConfigurationResponse, error)

	// DeleteV1CloudAzureId request
	DeleteV1CloudAzureIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1CloudAzureIdResponse, error)

	// GetV1CloudAzureId request
	GetV1CloudAzureIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1CloudAzureIdResponse, error)

	// PutV1CloudAzureId request with any body
	PutV1CloudAzureIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1CloudAzureIdResponse, error)

	PutV1CloudAzureIdWithResponse(ctx context.Context, id string, body PutV1CloudAzureIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1CloudAzureIdResponse, error)

	// GetV1CloudIdp request
	GetV1CloudIdpWithResponse(ctx context.Context, params *GetV1CloudIdpParams, reqEditors ...RequestEditorFn) (*GetV1CloudIdpResponse, error)

	// PostV1CloudIdpExport request with any body
	PostV1CloudIdpExportWithBodyWithResponse(ctx context.Context, params *PostV1CloudIdpExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CloudIdpExportResponse, error)

	PostV1CloudIdpExportWithResponse(ctx context.Context, params *PostV1CloudIdpExportParams, body PostV1CloudIdpExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CloudIdpExportResponse, error)

	// GetV1CloudIdpId request
	GetV1CloudIdpIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1CloudIdpIdResponse, error)

	// GetV1CloudIdpIdHistory request
	GetV1CloudIdpIdHistoryWithResponse(ctx context.Context, id string, params *GetV1CloudIdpIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1CloudIdpIdHistoryResponse, error)

	// PostV1CloudIdpIdHistory request with any body
	PostV1CloudIdpIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdHistoryResponse, error)

	PostV1CloudIdpIdHistoryWithResponse(ctx context.Context, id string, body PostV1CloudIdpIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdHistoryResponse, error)

	// PostV1CloudIdpIdTestGroup request with any body
	PostV1CloudIdpIdTestGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdTestGroupResponse, error)

	PostV1CloudIdpIdTestGroupWithResponse(ctx context.Context, id string, body PostV1CloudIdpIdTestGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdTestGroupResponse, error)

	// PostV1CloudIdpIdTestUser request with any body
	PostV1CloudIdpIdTestUserWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdTestUserResponse, error)

	PostV1CloudIdpIdTestUserWithResponse(ctx context.Context, id string, body PostV1CloudIdpIdTestUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdTestUserResponse, error)

	// PostV1CloudIdpIdTestUserMembership request with any body
	PostV1CloudIdpIdTestUserMembershipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdTestUserMembershipResponse, error)

	PostV1CloudIdpIdTestUserMembershipWithResponse(ctx context.Context, id string, body PostV1CloudIdpIdTestUserMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdTestUserMembershipResponse, error)

	// GetV1ComputerInventoryCollectionSettings request
	GetV1ComputerInventoryCollectionSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ComputerInventoryCollectionSettingsResponse, error)

	// PatchV1ComputerInventoryCollectionSettings request with any body
	PatchV1ComputerInventoryCollectionSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ComputerInventoryCollectionSettingsResponse, error)

	PatchV1ComputerInventoryCollectionSettingsWithResponse(ctx context.Context, body PatchV1ComputerInventoryCollectionSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ComputerInventoryCollectionSettingsResponse, error)

	// PostV1ComputerInventoryCollectionSettingsCustomPath request with any body
	PostV1ComputerInventoryCollectionSettingsCustomPathWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ComputerInventoryCollectionSettingsCustomPathResponse, error)

	PostV1ComputerInventoryCollectionSettingsCustomPathWithResponse(ctx context.Context, body PostV1ComputerInventoryCollectionSettingsCustomPathJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ComputerInventoryCollectionSettingsCustomPathResponse, error)

	// DeleteV1ComputerInventoryCollectionSettingsCustomPathId request
	DeleteV1ComputerInventoryCollectionSettingsCustomPathIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1ComputerInventoryCollectionSettingsCustomPathIdResponse, error)

	// GetV1ComputerPrestages request
	GetV1ComputerPrestagesWithResponse(ctx context.Context, params *GetV1ComputerPrestagesParams, reqEditors ...RequestEditorFn) (*GetV1ComputerPrestagesResponse, error)

	// PostV1ComputerPrestages request with any body
	PostV1ComputerPrestagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ComputerPrestagesResponse, error)

	PostV1ComputerPrestagesWithResponse(ctx context.Context, body PostV1ComputerPrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ComputerPrestagesResponse, error)

	// GetV1ComputerPrestagesScope request
	GetV1ComputerPrestagesScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ComputerPrestagesScopeResponse, error)

	// DeleteV1ComputerPrestagesId request
	DeleteV1ComputerPrestagesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteV1ComputerPrestagesIdResponse, error)

	// GetV1ComputerPrestagesId request
	GetV1ComputerPrestagesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1ComputerPrestagesIdResponse, error)

	// PutV1ComputerPrestagesId request with any body
	PutV1ComputerPrestagesIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ComputerPrestagesIdResponse, error)

	PutV1ComputerPrestagesIdWithResponse(ctx context.Context, id int, body PutV1ComputerPrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ComputerPrestagesIdResponse, error)

	// DeleteV1ComputerPrestagesIdScope request with any body
	DeleteV1ComputerPrestagesIdScopeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV1ComputerPrestagesIdScopeResponse, error)

	DeleteV1ComputerPrestagesIdScopeWithResponse(ctx context.Context, id int, body DeleteV1ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV1ComputerPrestagesIdScopeResponse, error)

	// GetV1ComputerPrestagesIdScope request
	GetV1ComputerPrestagesIdScopeWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1ComputerPrestagesIdScopeResponse, error)

	// PostV1ComputerPrestagesIdScope request with any body
	PostV1ComputerPrestagesIdScopeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ComputerPrestagesIdScopeResponse, error)

	PostV1ComputerPrestagesIdScopeWithResponse(ctx context.Context, id int, body PostV1ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ComputerPrestagesIdScopeResponse, error)

	// PutV1ComputerPrestagesIdScope request with any body
	PutV1ComputerPrestagesIdScopeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ComputerPrestagesIdScopeResponse, error)

	PutV1ComputerPrestagesIdScopeWithResponse(ctx context.Context, id int, body PutV1ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ComputerPrestagesIdScopeResponse, error)

	// GetV1ComputersInventory request
	GetV1ComputersInventoryWithResponse(ctx context.Context, params *GetV1ComputersInventoryParams, reqEditors ...RequestEditorFn) (*GetV1ComputersInventoryResponse, error)

	// GetV1ComputersInventoryDetailId request
	GetV1ComputersInventoryDetailIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1ComputersInventoryDetailIdResponse, error)

	// PatchV1ComputersInventoryDetailId request with any body
	PatchV1ComputersInventoryDetailIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ComputersInventoryDetailIdResponse, error)

	PatchV1ComputersInventoryDetailIdWithResponse(ctx context.Context, id string, body PatchV1ComputersInventoryDetailIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ComputersInventoryDetailIdResponse, error)

	// DeleteV1ComputersInventoryId request
	DeleteV1ComputersInventoryIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1ComputersInventoryIdResponse, error)

	// GetV1ComputersInventoryId request
	GetV1ComputersInventoryIdWithResponse(ctx context.Context, id string, params *GetV1ComputersInventoryIdParams, reqEditors ...RequestEditorFn) (*GetV1ComputersInventoryIdResponse, error)

	// PostV1ComputersInventoryIdAttachments request with any body
	PostV1ComputersInventoryIdAttachmentsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ComputersInventoryIdAttachmentsResponse, error)

	// DeleteV1ComputersInventoryIdAttachmentsAttachmentId request
	DeleteV1ComputersInventoryIdAttachmentsAttachmentIdWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*DeleteV1ComputersInventoryIdAttachmentsAttachmentIdResponse, error)

	// GetV1ComputersInventoryIdAttachmentsAttachmentId request
	GetV1ComputersInventoryIdAttachmentsAttachmentIdWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*GetV1ComputersInventoryIdAttachmentsAttachmentIdResponse, error)

	// GetV1ComputersInventoryIdViewRecoveryLockPassword request
	GetV1ComputersInventoryIdViewRecoveryLockPasswordWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1ComputersInventoryIdViewRecoveryLockPasswordResponse, error)

	// PostV1ComputersIdRecalculateSmartGroups request
	PostV1ComputersIdRecalculateSmartGroupsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostV1ComputersIdRecalculateSmartGroupsResponse, error)

	// GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceId request
	GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdResponse, error)

	// GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceId request
	GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdResponse, error)

	// DeleteV1CsaToken request
	DeleteV1CsaTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteV1CsaTokenResponse, error)

	// GetV1CsaToken request
	GetV1CsaTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1CsaTokenResponse, error)

	// PostV1CsaToken request with any body
	PostV1CsaTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CsaTokenResponse, error)

	PostV1CsaTokenWithResponse(ctx context.Context, body PostV1CsaTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CsaTokenResponse, error)

	// PutV1CsaToken request with any body
	PutV1CsaTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1CsaTokenResponse, error)

	PutV1CsaTokenWithResponse(ctx context.Context, body PutV1CsaTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1CsaTokenResponse, error)

	// GetV1Departments request
	GetV1DepartmentsWithResponse(ctx context.Context, params *GetV1DepartmentsParams, reqEditors ...RequestEditorFn) (*GetV1DepartmentsResponse, error)

	// PostV1Departments request with any body
	PostV1DepartmentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DepartmentsResponse, error)

	PostV1DepartmentsWithResponse(ctx context.Context, body PostV1DepartmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DepartmentsResponse, error)

	// PostV1DepartmentsDeleteMultiple request with any body
	PostV1DepartmentsDeleteMultipleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DepartmentsDeleteMultipleResponse, error)

	PostV1DepartmentsDeleteMultipleWithResponse(ctx context.Context, body PostV1DepartmentsDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DepartmentsDeleteMultipleResponse, error)

	// DeleteV1DepartmentsId request
	DeleteV1DepartmentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1DepartmentsIdResponse, error)

	// GetV1DepartmentsId request
	GetV1DepartmentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1DepartmentsIdResponse, error)

	// PutV1DepartmentsId request with any body
	PutV1DepartmentsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1DepartmentsIdResponse, error)

	PutV1DepartmentsIdWithResponse(ctx context.Context, id string, body PutV1DepartmentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1DepartmentsIdResponse, error)

	// GetV1DepartmentsIdHistory request
	GetV1DepartmentsIdHistoryWithResponse(ctx context.Context, id string, params *GetV1DepartmentsIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1DepartmentsIdHistoryResponse, error)

	// PostV1DepartmentsIdHistory request with any body
	PostV1DepartmentsIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DepartmentsIdHistoryResponse, error)

	PostV1DepartmentsIdHistoryWithResponse(ctx context.Context, id string, body PostV1DepartmentsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DepartmentsIdHistoryResponse, error)

	// PostV1DeployPackage request with any body
	PostV1DeployPackageWithBodyWithResponse(ctx context.Context, params *PostV1DeployPackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DeployPackageResponse, error)

	PostV1DeployPackageWithResponse(ctx context.Context, params *PostV1DeployPackageParams, body PostV1DeployPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DeployPackageResponse, error)

	// GetV1DeviceCommunicationSettings request
	GetV1DeviceCommunicationSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1DeviceCommunicationSettingsResponse, error)

	// PutV1DeviceCommunicationSettings request with any body
	PutV1DeviceCommunicationSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1DeviceCommunicationSettingsResponse, error)

	PutV1DeviceCommunicationSettingsWithResponse(ctx context.Context, body PutV1DeviceCommunicationSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1DeviceCommunicationSettingsResponse, error)

	// GetV1DeviceCommunicationSettingsHistory request
	GetV1DeviceCommunicationSettingsHistoryWithResponse(ctx context.Context, params *GetV1DeviceCommunicationSettingsHistoryParams, reqEditors ...RequestEditorFn) (*GetV1DeviceCommunicationSettingsHistoryResponse, error)

	// PostV1DeviceCommunicationSettingsHistory request with any body
	PostV1DeviceCommunicationSettingsHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DeviceCommunicationSettingsHistoryResponse, error)

	PostV1DeviceCommunicationSettingsHistoryWithResponse(ctx context.Context, body PostV1DeviceCommunicationSettingsHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DeviceCommunicationSettingsHistoryResponse, error)

	// GetV1DeviceEnrollments request
	GetV1DeviceEnrollmentsWithResponse(ctx context.Context, params *GetV1DeviceEnrollmentsParams, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsResponse, error)

	// GetV1DeviceEnrollmentsPublicKey request
	GetV1DeviceEnrollmentsPublicKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsPublicKeyResponse, error)

	// GetV1DeviceEnrollmentsSyncs request
	GetV1DeviceEnrollmentsSyncsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsSyncsResponse, error)

	// PostV1DeviceEnrollmentsUploadToken request with any body
	PostV1DeviceEnrollmentsUploadTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DeviceEnrollmentsUploadTokenResponse, error)

	PostV1DeviceEnrollmentsUploadTokenWithResponse(ctx context.Context, body PostV1DeviceEnrollmentsUploadTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DeviceEnrollmentsUploadTokenResponse, error)

	// DeleteV1DeviceEnrollmentsId request
	DeleteV1DeviceEnrollmentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1DeviceEnrollmentsIdResponse, error)

	// GetV1DeviceEnrollmentsId request
	GetV1DeviceEnrollmentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsIdResponse, error)

	// PutV1DeviceEnrollmentsId request with any body
	PutV1DeviceEnrollmentsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1DeviceEnrollmentsIdResponse, error)

	PutV1DeviceEnrollmentsIdWithResponse(ctx context.Context, id string, body PutV1DeviceEnrollmentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1DeviceEnrollmentsIdResponse, error)

	// GetV1DeviceEnrollmentsIdDevices request
	GetV1DeviceEnrollmentsIdDevicesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsIdDevicesResponse, error)

	// PostV1DeviceEnrollmentsIdDisown request with any body
	PostV1DeviceEnrollmentsIdDisownWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DeviceEnrollmentsIdDisownResponse, error)

	PostV1DeviceEnrollmentsIdDisownWithResponse(ctx context.Context, id string, body PostV1DeviceEnrollmentsIdDisownJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DeviceEnrollmentsIdDisownResponse, error)

	// GetV1DeviceEnrollmentsIdHistory request
	GetV1DeviceEnrollmentsIdHistoryWithResponse(ctx context.Context, id string, params *GetV1DeviceEnrollmentsIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsIdHistoryResponse, error)

	// PostV1DeviceEnrollmentsIdHistory request with any body
	PostV1DeviceEnrollmentsIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DeviceEnrollmentsIdHistoryResponse, error)

	PostV1DeviceEnrollmentsIdHistoryWithResponse(ctx context.Context, id string, body PostV1DeviceEnrollmentsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DeviceEnrollmentsIdHistoryResponse, error)

	// GetV1DeviceEnrollmentsIdSyncs request
	GetV1DeviceEnrollmentsIdSyncsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsIdSyncsResponse, error)

	// GetV1DeviceEnrollmentsIdSyncsLatest request
	GetV1DeviceEnrollmentsIdSyncsLatestWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsIdSyncsLatestResponse, error)

	// PutV1DeviceEnrollmentsIdUploadToken request with any body
	PutV1DeviceEnrollmentsIdUploadTokenWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1DeviceEnrollmentsIdUploadTokenResponse, error)

	PutV1DeviceEnrollmentsIdUploadTokenWithResponse(ctx context.Context, id string, body PutV1DeviceEnrollmentsIdUploadTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1DeviceEnrollmentsIdUploadTokenResponse, error)

	// GetV1Ebooks request
	GetV1EbooksWithResponse(ctx context.Context, params *GetV1EbooksParams, reqEditors ...RequestEditorFn) (*GetV1EbooksResponse, error)

	// GetV1EbooksId request
	GetV1EbooksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1EbooksIdResponse, error)

	// GetV1EbooksIdScope request
	GetV1EbooksIdScopeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1EbooksIdScopeResponse, error)

	// GetV1Engage request
	GetV1EngageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1EngageResponse, error)

	// PutV1Engage request with any body
	PutV1EngageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EngageResponse, error)

	PutV1EngageWithResponse(ctx context.Context, body PutV1EngageJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EngageResponse, error)

	// GetV1EngageHistory request
	GetV1EngageHistoryWithResponse(ctx context.Context, params *GetV1EngageHistoryParams, reqEditors ...RequestEditorFn) (*GetV1EngageHistoryResponse, error)

	// PostV1EngageHistory request with any body
	PostV1EngageHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EngageHistoryResponse, error)

	PostV1EngageHistoryWithResponse(ctx context.Context, body PostV1EngageHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EngageHistoryResponse, error)

	// GetV1Enrollment request
	GetV1EnrollmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1EnrollmentResponse, error)

	// PutV1Enrollment request with any body
	PutV1EnrollmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EnrollmentResponse, error)

	PutV1EnrollmentWithResponse(ctx context.Context, body PutV1EnrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EnrollmentResponse, error)

	// GetV1EnrollmentCustomization request
	GetV1EnrollmentCustomizationWithResponse(ctx context.Context, params *GetV1EnrollmentCustomizationParams, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationResponse, error)

	// PostV1EnrollmentCustomization request with any body
	PostV1EnrollmentCustomizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationResponse, error)

	PostV1EnrollmentCustomizationWithResponse(ctx context.Context, body PostV1EnrollmentCustomizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationResponse, error)

	// PostV1EnrollmentCustomizationImages request with any body
	PostV1EnrollmentCustomizationImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationImagesResponse, error)

	// PostV1EnrollmentCustomizationParseMarkdown request with any body
	PostV1EnrollmentCustomizationParseMarkdownWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationParseMarkdownResponse, error)

	PostV1EnrollmentCustomizationParseMarkdownWithResponse(ctx context.Context, body PostV1EnrollmentCustomizationParseMarkdownJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationParseMarkdownResponse, error)

	// DeleteV1EnrollmentCustomizationId request
	DeleteV1EnrollmentCustomizationIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteV1EnrollmentCustomizationIdResponse, error)

	// GetV1EnrollmentCustomizationId request
	GetV1EnrollmentCustomizationIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdResponse, error)

	// PutV1EnrollmentCustomizationId request with any body
	PutV1EnrollmentCustomizationIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdResponse, error)

	PutV1EnrollmentCustomizationIdWithResponse(ctx context.Context, id int, body PutV1EnrollmentCustomizationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdResponse, error)

	// GetV1EnrollmentCustomizationIdAll request
	GetV1EnrollmentCustomizationIdAllWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdAllResponse, error)

	// DeleteV1EnrollmentCustomizationIdAllPanelId request
	DeleteV1EnrollmentCustomizationIdAllPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*DeleteV1EnrollmentCustomizationIdAllPanelIdResponse, error)

	// GetV1EnrollmentCustomizationIdAllPanelId request
	GetV1EnrollmentCustomizationIdAllPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdAllPanelIdResponse, error)

	// GetV1EnrollmentCustomizationIdHistory request
	GetV1EnrollmentCustomizationIdHistoryWithResponse(ctx context.Context, id int, params *GetV1EnrollmentCustomizationIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdHistoryResponse, error)

	// PostV1EnrollmentCustomizationIdHistory request with any body
	PostV1EnrollmentCustomizationIdHistoryWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdHistoryResponse, error)

	PostV1EnrollmentCustomizationIdHistoryWithResponse(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdHistoryResponse, error)

	// PostV1EnrollmentCustomizationIdLdap request with any body
	PostV1EnrollmentCustomizationIdLdapWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdLdapResponse, error)

	PostV1EnrollmentCustomizationIdLdapWithResponse(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdLdapJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdLdapResponse, error)

	// DeleteV1EnrollmentCustomizationIdLdapPanelId request
	DeleteV1EnrollmentCustomizationIdLdapPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*DeleteV1EnrollmentCustomizationIdLdapPanelIdResponse, error)

	// GetV1EnrollmentCustomizationIdLdapPanelId request
	GetV1EnrollmentCustomizationIdLdapPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdLdapPanelIdResponse, error)

	// PutV1EnrollmentCustomizationIdLdapPanelId request with any body
	PutV1EnrollmentCustomizationIdLdapPanelIdWithBodyWithResponse(ctx context.Context, id int, panelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdLdapPanelIdResponse, error)

	PutV1EnrollmentCustomizationIdLdapPanelIdWithResponse(ctx context.Context, id int, panelId int, body PutV1EnrollmentCustomizationIdLdapPanelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdLdapPanelIdResponse, error)

	// GetV1EnrollmentCustomizationIdPrestages request
	GetV1EnrollmentCustomizationIdPrestagesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdPrestagesResponse, error)

	// PostV1EnrollmentCustomizationIdSso request with any body
	PostV1EnrollmentCustomizationIdSsoWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdSsoResponse, error)

	PostV1EnrollmentCustomizationIdSsoWithResponse(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdSsoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdSsoResponse, error)

	// DeleteV1EnrollmentCustomizationIdSsoPanelId request
	DeleteV1EnrollmentCustomizationIdSsoPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*DeleteV1EnrollmentCustomizationIdSsoPanelIdResponse, error)

	// GetV1EnrollmentCustomizationIdSsoPanelId request
	GetV1EnrollmentCustomizationIdSsoPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdSsoPanelIdResponse, error)

	// PutV1EnrollmentCustomizationIdSsoPanelId request with any body
	PutV1EnrollmentCustomizationIdSsoPanelIdWithBodyWithResponse(ctx context.Context, id int, panelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdSsoPanelIdResponse, error)

	PutV1EnrollmentCustomizationIdSsoPanelIdWithResponse(ctx context.Context, id int, panelId int, body PutV1EnrollmentCustomizationIdSsoPanelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdSsoPanelIdResponse, error)

	// PostV1EnrollmentCustomizationIdText request with any body
	PostV1EnrollmentCustomizationIdTextWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdTextResponse, error)

	PostV1EnrollmentCustomizationIdTextWithResponse(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdTextJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdTextResponse, error)

	// DeleteV1EnrollmentCustomizationIdTextPanelId request
	DeleteV1EnrollmentCustomizationIdTextPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*DeleteV1EnrollmentCustomizationIdTextPanelIdResponse, error)

	// GetV1EnrollmentCustomizationIdTextPanelId request
	GetV1EnrollmentCustomizationIdTextPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdTextPanelIdResponse, error)

	// PutV1EnrollmentCustomizationIdTextPanelId request with any body
	PutV1EnrollmentCustomizationIdTextPanelIdWithBodyWithResponse(ctx context.Context, id int, panelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdTextPanelIdResponse, error)

	PutV1EnrollmentCustomizationIdTextPanelIdWithResponse(ctx context.Context, id int, panelId int, body PutV1EnrollmentCustomizationIdTextPanelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdTextPanelIdResponse, error)

	// GetV1EnrollmentCustomizationIdTextPanelIdMarkdown request
	GetV1EnrollmentCustomizationIdTextPanelIdMarkdownWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdTextPanelIdMarkdownResponse, error)

	// GetV1EnrollmentAccessGroups request
	GetV1EnrollmentAccessGroupsWithResponse(ctx context.Context, params *GetV1EnrollmentAccessGroupsParams, reqEditors ...RequestEditorFn) (*GetV1EnrollmentAccessGroupsResponse, error)

	// DeleteV1EnrollmentAccessGroupsGroupKey request
	DeleteV1EnrollmentAccessGroupsGroupKeyWithResponse(ctx context.Context, groupKey string, reqEditors ...RequestEditorFn) (*DeleteV1EnrollmentAccessGroupsGroupKeyResponse, error)

	// GetV1EnrollmentAccessGroupsGroupKey request
	GetV1EnrollmentAccessGroupsGroupKeyWithResponse(ctx context.Context, groupKey string, reqEditors ...RequestEditorFn) (*GetV1EnrollmentAccessGroupsGroupKeyResponse, error)

	// PutV1EnrollmentAccessGroupsGroupKey request with any body
	PutV1EnrollmentAccessGroupsGroupKeyWithBodyWithResponse(ctx context.Context, groupKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EnrollmentAccessGroupsGroupKeyResponse, error)

	PutV1EnrollmentAccessGroupsGroupKeyWithResponse(ctx context.Context, groupKey string, body PutV1EnrollmentAccessGroupsGroupKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EnrollmentAccessGroupsGroupKeyResponse, error)

	// GetV1EnrollmentFilteredLanguageCodes request
	GetV1EnrollmentFilteredLanguageCodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1EnrollmentFilteredLanguageCodesResponse, error)

	// GetV1EnrollmentHistory request
	GetV1EnrollmentHistoryWithResponse(ctx context.Context, params *GetV1EnrollmentHistoryParams, reqEditors ...RequestEditorFn) (*GetV1EnrollmentHistoryResponse, error)

	// PostV1EnrollmentHistory request with any body
	PostV1EnrollmentHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentHistoryResponse, error)

	PostV1EnrollmentHistoryWithResponse(ctx context.Context, body PostV1EnrollmentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrollmentHistoryResponse, error)

	// GetV1EnrollmentLanguageCodes request
	GetV1EnrollmentLanguageCodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1EnrollmentLanguageCodesResponse, error)

	// GetV1EnrollmentLanguages request
	GetV1EnrollmentLanguagesWithResponse(ctx context.Context, params *GetV1EnrollmentLanguagesParams, reqEditors ...RequestEditorFn) (*GetV1EnrollmentLanguagesResponse, error)

	// DeleteV1EnrollmentLanguagesLanguage request
	DeleteV1EnrollmentLanguagesLanguageWithResponse(ctx context.Context, language string, reqEditors ...RequestEditorFn) (*DeleteV1EnrollmentLanguagesLanguageResponse, error)

	// GetV1EnrollmentLanguagesLanguage request
	GetV1EnrollmentLanguagesLanguageWithResponse(ctx context.Context, language string, reqEditors ...RequestEditorFn) (*GetV1EnrollmentLanguagesLanguageResponse, error)

	// PutV1EnrollmentLanguagesLanguage request with any body
	PutV1EnrollmentLanguagesLanguageWithBodyWithResponse(ctx context.Context, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EnrollmentLanguagesLanguageResponse, error)

	PutV1EnrollmentLanguagesLanguageWithResponse(ctx context.Context, language string, body PutV1EnrollmentLanguagesLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EnrollmentLanguagesLanguageResponse, error)

	// PostV1Icon request with any body
	PostV1IconWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IconResponse, error)

	// GetV1IconId request
	GetV1IconIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1IconIdResponse, error)

	// GetV1InventoryInformation request
	GetV1InventoryInformationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1InventoryInformationResponse, error)

	// DeleteV1InventoryPreload request
	DeleteV1InventoryPreloadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteV1InventoryPreloadResponse, error)

	// GetV1InventoryPreload request
	GetV1InventoryPreloadWithResponse(ctx context.Context, params *GetV1InventoryPreloadParams, reqEditors ...RequestEditorFn) (*GetV1InventoryPreloadResponse, error)

	// PostV1InventoryPreload request with any body
	PostV1InventoryPreloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1InventoryPreloadResponse, error)

	PostV1InventoryPreloadWithResponse(ctx context.Context, body PostV1InventoryPreloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1InventoryPreloadResponse, error)

	// GetV1InventoryPreloadCsvTemplate request
	GetV1InventoryPreloadCsvTemplateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1InventoryPreloadCsvTemplateResponse, error)

	// GetV1InventoryPreloadHistory request
	GetV1InventoryPreloadHistoryWithResponse(ctx context.Context, params *GetV1InventoryPreloadHistoryParams, reqEditors ...RequestEditorFn) (*GetV1InventoryPreloadHistoryResponse, error)

	// PostV1InventoryPreloadHistory request with any body
	PostV1InventoryPreloadHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1InventoryPreloadHistoryResponse, error)

	PostV1InventoryPreloadHistoryWithResponse(ctx context.Context, body PostV1InventoryPreloadHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1InventoryPreloadHistoryResponse, error)

	// PostV1InventoryPreloadValidateCsv request with any body
	PostV1InventoryPreloadValidateCsvWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1InventoryPreloadValidateCsvResponse, error)

	// DeleteV1InventoryPreloadId request
	DeleteV1InventoryPreloadIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteV1InventoryPreloadIdResponse, error)

	// GetV1InventoryPreloadId request
	GetV1InventoryPreloadIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1InventoryPreloadIdResponse, error)

	// PutV1InventoryPreloadId request with any body
	PutV1InventoryPreloadIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1InventoryPreloadIdResponse, error)

	PutV1InventoryPreloadIdWithResponse(ctx context.Context, id int, body PutV1InventoryPreloadIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1InventoryPreloadIdResponse, error)

	// GetV1JamfConnect request
	GetV1JamfConnectWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1JamfConnectResponse, error)

	// GetV1JamfConnectConfigProfiles request
	GetV1JamfConnectConfigProfilesWithResponse(ctx context.Context, params *GetV1JamfConnectConfigProfilesParams, reqEditors ...RequestEditorFn) (*GetV1JamfConnectConfigProfilesResponse, error)

	// PutV1JamfConnectConfigProfilesId request with any body
	PutV1JamfConnectConfigProfilesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1JamfConnectConfigProfilesIdResponse, error)

	PutV1JamfConnectConfigProfilesIdWithResponse(ctx context.Context, id string, body PutV1JamfConnectConfigProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1JamfConnectConfigProfilesIdResponse, error)

	// GetV1JamfConnectDeploymentsIdTasks request
	GetV1JamfConnectDeploymentsIdTasksWithResponse(ctx context.Context, id string, params *GetV1JamfConnectDeploymentsIdTasksParams, reqEditors ...RequestEditorFn) (*GetV1JamfConnectDeploymentsIdTasksResponse, error)

	// PostV1JamfConnectDeploymentsIdTasksRetry request with any body
	PostV1JamfConnectDeploymentsIdTasksRetryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1JamfConnectDeploymentsIdTasksRetryResponse, error)

	PostV1JamfConnectDeploymentsIdTasksRetryWithResponse(ctx context.Context, id string, body PostV1JamfConnectDeploymentsIdTasksRetryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1JamfConnectDeploymentsIdTasksRetryResponse, error)

	// GetV1JamfConnectHistory request
	GetV1JamfConnectHistoryWithResponse(ctx context.Context, params *GetV1JamfConnectHistoryParams, reqEditors ...RequestEditorFn) (*GetV1JamfConnectHistoryResponse, error)

	// PostV1JamfConnectHistory request with any body
	PostV1JamfConnectHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1JamfConnectHistoryResponse, error)

	PostV1JamfConnectHistoryWithResponse(ctx context.Context, body PostV1JamfConnectHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1JamfConnectHistoryResponse, error)

	// PostV1JamfManagementFrameworkRedeployId request
	PostV1JamfManagementFrameworkRedeployIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostV1JamfManagementFrameworkRedeployIdResponse, error)

	// GetV1JamfPackage request
	GetV1JamfPackageWithResponse(ctx context.Context, params *GetV1JamfPackageParams, reqEditors ...RequestEditorFn) (*GetV1JamfPackageResponse, error)

	// GetV1JamfProInformation request
	GetV1JamfProInformationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1JamfProInformationResponse, error)

	// GetV1JamfProServerUrl request
	GetV1JamfProServerUrlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1JamfProServerUrlResponse, error)

	// PutV1JamfProServerUrl request with any body
	PutV1JamfProServerUrlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1JamfProServerUrlResponse, error)

	PutV1JamfProServerUrlWithResponse(ctx context.Context, body PutV1JamfProServerUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1JamfProServerUrlResponse, error)

	// GetV1JamfProServerUrlHistory request
	GetV1JamfProServerUrlHistoryWithResponse(ctx context.Context, params *GetV1JamfProServerUrlHistoryParams, reqEditors ...RequestEditorFn) (*GetV1JamfProServerUrlHistoryResponse, error)

	// PostV1JamfProServerUrlHistory request with any body
	PostV1JamfProServerUrlHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1JamfProServerUrlHistoryResponse, error)

	PostV1JamfProServerUrlHistoryWithResponse(ctx context.Context, body PostV1JamfProServerUrlHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1JamfProServerUrlHistoryResponse, error)

	// GetV1JamfProVersion request
	GetV1JamfProVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1JamfProVersionResponse, error)

	// DeleteV1JamfProtect request
	DeleteV1JamfProtectWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteV1JamfProtectResponse, error)

	// GetV1JamfProtect request
	GetV1JamfProtectWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1JamfProtectResponse, error)

	// PutV1JamfProtect request with any body
	PutV1JamfProtectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1JamfProtectResponse, error)

	PutV1JamfProtectWithResponse(ctx context.Context, body PutV1JamfProtectJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1JamfProtectResponse, error)

	// GetV1JamfProtectDeploymentsIdTasks request
	GetV1JamfProtectDeploymentsIdTasksWithResponse(ctx context.Context, id string, params *GetV1JamfProtectDeploymentsIdTasksParams, reqEditors ...RequestEditorFn) (*GetV1JamfProtectDeploymentsIdTasksResponse, error)

	// PostV1JamfProtectDeploymentsIdTasksRetry request with any body
	PostV1JamfProtectDeploymentsIdTasksRetryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1JamfProtectDeploymentsIdTasksRetryResponse, error)

	PostV1JamfProtectDeploymentsIdTasksRetryWithResponse(ctx context.Context, id string, body PostV1JamfProtectDeploymentsIdTasksRetryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1JamfProtectDeploymentsIdTasksRetryResponse, error)

	// GetV1JamfProtectHistory request
	GetV1JamfProtectHistoryWithResponse(ctx context.Context, params *GetV1JamfProtectHistoryParams, reqEditors ...RequestEditorFn) (*GetV1JamfProtectHistoryResponse, error)

	// PostV1JamfProtectHistory request with any body
	PostV1JamfProtectHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1JamfProtectHistoryResponse, error)

	PostV1JamfProtectHistoryWithResponse(ctx context.Context, body PostV1JamfProtectHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1JamfProtectHistoryResponse, error)

	// GetV1JamfProtectPlans request
	GetV1JamfProtectPlansWithResponse(ctx context.Context, params *GetV1JamfProtectPlansParams, reqEditors ...RequestEditorFn) (*GetV1JamfProtectPlansResponse, error)

	// PostV1JamfProtectPlansSync request
	PostV1JamfProtectPlansSyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV1JamfProtectPlansSyncResponse, error)

	// PostV1JamfProtectRegister request with any body
	PostV1JamfProtectRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1JamfProtectRegisterResponse, error)

	PostV1JamfProtectRegisterWithResponse(ctx context.Context, body PostV1JamfProtectRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1JamfProtectRegisterResponse, error)

	// PostV1LdapKeystoreVerify request with any body
	PostV1LdapKeystoreVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1LdapKeystoreVerifyResponse, error)

	PostV1LdapKeystoreVerifyWithResponse(ctx context.Context, body PostV1LdapKeystoreVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1LdapKeystoreVerifyResponse, error)

	// GetV1LdapGroups request
	GetV1LdapGroupsWithResponse(ctx context.Context, params *GetV1LdapGroupsParams, reqEditors ...RequestEditorFn) (*GetV1LdapGroupsResponse, error)

	// GetV1LdapLdapServers request
	GetV1LdapLdapServersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1LdapLdapServersResponse, error)

	// GetV1LdapServers request
	GetV1LdapServersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1LdapServersResponse, error)

	// GetV1Locales request
	GetV1LocalesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1LocalesResponse, error)

	// GetV1MacosManagedSoftwareUpdatesAvailableUpdates request
	GetV1MacosManagedSoftwareUpdatesAvailableUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MacosManagedSoftwareUpdatesAvailableUpdatesResponse, error)

	// PostV1MacosManagedSoftwareUpdatesSendUpdates request with any body
	PostV1MacosManagedSoftwareUpdatesSendUpdatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MacosManagedSoftwareUpdatesSendUpdatesResponse, error)

	PostV1MacosManagedSoftwareUpdatesSendUpdatesWithResponse(ctx context.Context, body PostV1MacosManagedSoftwareUpdatesSendUpdatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MacosManagedSoftwareUpdatesSendUpdatesResponse, error)

	// GetV1MdmCommands request
	GetV1MdmCommandsWithResponse(ctx context.Context, params *GetV1MdmCommandsParams, reqEditors ...RequestEditorFn) (*GetV1MdmCommandsResponse, error)

	// PostV1MdmRenewProfile request with any body
	PostV1MdmRenewProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MdmRenewProfileResponse, error)

	PostV1MdmRenewProfileWithResponse(ctx context.Context, body PostV1MdmRenewProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MdmRenewProfileResponse, error)

	// GetV1MobileDeviceEnrollmentProfileIdDownloadProfile request
	GetV1MobileDeviceEnrollmentProfileIdDownloadProfileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1MobileDeviceEnrollmentProfileIdDownloadProfileResponse, error)

	// GetV1MobileDeviceGroups request
	GetV1MobileDeviceGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MobileDeviceGroupsResponse, error)

	// GetV1MobileDevicePrestages request
	GetV1MobileDevicePrestagesWithResponse(ctx context.Context, params *GetV1MobileDevicePrestagesParams, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesResponse, error)

	// PostV1MobileDevicePrestages request with any body
	PostV1MobileDevicePrestagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MobileDevicePrestagesResponse, error)

	PostV1MobileDevicePrestagesWithResponse(ctx context.Context, body PostV1MobileDevicePrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MobileDevicePrestagesResponse, error)

	// GetV1MobileDevicePrestagesScope request
	GetV1MobileDevicePrestagesScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesScopeResponse, error)

	// GetV1MobileDevicePrestagesSync request
	GetV1MobileDevicePrestagesSyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesSyncResponse, error)

	// GetV1MobileDevicePrestagesSyncId request
	GetV1MobileDevicePrestagesSyncIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesSyncIdResponse, error)

	// GetV1MobileDevicePrestagesSyncIdLatest request
	GetV1MobileDevicePrestagesSyncIdLatestWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesSyncIdLatestResponse, error)

	// DeleteV1MobileDevicePrestagesId request
	DeleteV1MobileDevicePrestagesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteV1MobileDevicePrestagesIdResponse, error)

	// GetV1MobileDevicePrestagesId request
	GetV1MobileDevicePrestagesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesIdResponse, error)

	// PutV1MobileDevicePrestagesId request with any body
	PutV1MobileDevicePrestagesIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1MobileDevicePrestagesIdResponse, error)

	PutV1MobileDevicePrestagesIdWithResponse(ctx context.Context, id int, body PutV1MobileDevicePrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1MobileDevicePrestagesIdResponse, error)

	// DeleteV1MobileDevicePrestagesIdAttachments request with any body
	DeleteV1MobileDevicePrestagesIdAttachmentsWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV1MobileDevicePrestagesIdAttachmentsResponse, error)

	DeleteV1MobileDevicePrestagesIdAttachmentsWithResponse(ctx context.Context, id int, body DeleteV1MobileDevicePrestagesIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV1MobileDevicePrestagesIdAttachmentsResponse, error)

	// GetV1MobileDevicePrestagesIdAttachments request
	GetV1MobileDevicePrestagesIdAttachmentsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesIdAttachmentsResponse, error)

	// PostV1MobileDevicePrestagesIdAttachments request with any body
	PostV1MobileDevicePrestagesIdAttachmentsWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MobileDevicePrestagesIdAttachmentsResponse, error)

	// GetV1MobileDevicePrestagesIdHistory request
	GetV1MobileDevicePrestagesIdHistoryWithResponse(ctx context.Context, id int, params *GetV1MobileDevicePrestagesIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesIdHistoryResponse, error)

	// PostV1MobileDevicePrestagesIdHistory request with any body
	PostV1MobileDevicePrestagesIdHistoryWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MobileDevicePrestagesIdHistoryResponse, error)

	PostV1MobileDevicePrestagesIdHistoryWithResponse(ctx context.Context, id int, body PostV1MobileDevicePrestagesIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MobileDevicePrestagesIdHistoryResponse, error)

	// DeleteV1MobileDevicePrestagesIdScope request with any body
	DeleteV1MobileDevicePrestagesIdScopeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV1MobileDevicePrestagesIdScopeResponse, error)

	DeleteV1MobileDevicePrestagesIdScopeWithResponse(ctx context.Context, id int, body DeleteV1MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV1MobileDevicePrestagesIdScopeResponse, error)

	// GetV1MobileDevicePrestagesIdScope request
	GetV1MobileDevicePrestagesIdScopeWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesIdScopeResponse, error)

	// PostV1MobileDevicePrestagesIdScope request with any body
	PostV1MobileDevicePrestagesIdScopeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MobileDevicePrestagesIdScopeResponse, error)

	PostV1MobileDevicePrestagesIdScopeWithResponse(ctx context.Context, id int, body PostV1MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MobileDevicePrestagesIdScopeResponse, error)

	// PutV1MobileDevicePrestagesIdScope request with any body
	PutV1MobileDevicePrestagesIdScopeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1MobileDevicePrestagesIdScopeResponse, error)

	PutV1MobileDevicePrestagesIdScopeWithResponse(ctx context.Context, id int, body PutV1MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1MobileDevicePrestagesIdScopeResponse, error)

	// GetV1MobileDevices request
	GetV1MobileDevicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MobileDevicesResponse, error)

	// GetV1MobileDevicesId request
	GetV1MobileDevicesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1MobileDevicesIdResponse, error)

	// PatchV1MobileDevicesId request with any body
	PatchV1MobileDevicesIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1MobileDevicesIdResponse, error)

	PatchV1MobileDevicesIdWithResponse(ctx context.Context, id int, body PatchV1MobileDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1MobileDevicesIdResponse, error)

	// GetV1MobileDevicesIdDetail request
	GetV1MobileDevicesIdDetailWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1MobileDevicesIdDetailResponse, error)

	// PostV1MobileDevicesIdRecalculateSmartGroups request
	PostV1MobileDevicesIdRecalculateSmartGroupsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostV1MobileDevicesIdRecalculateSmartGroupsResponse, error)

	// GetV1Notifications request
	GetV1NotificationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1NotificationsResponse, error)

	// DeleteV1NotificationsTypeId request
	DeleteV1NotificationsTypeIdWithResponse(ctx context.Context, pType NotificationType, id string, reqEditors ...RequestEditorFn) (*DeleteV1NotificationsTypeIdResponse, error)

	// GetV1ParentApp request
	GetV1ParentAppWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ParentAppResponse, error)

	// PutV1ParentApp request with any body
	PutV1ParentAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ParentAppResponse, error)

	PutV1ParentAppWithResponse(ctx context.Context, body PutV1ParentAppJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ParentAppResponse, error)

	// GetV1ParentAppHistory request
	GetV1ParentAppHistoryWithResponse(ctx context.Context, params *GetV1ParentAppHistoryParams, reqEditors ...RequestEditorFn) (*GetV1ParentAppHistoryResponse, error)

	// PostV1ParentAppHistory request with any body
	PostV1ParentAppHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ParentAppHistoryResponse, error)

	PostV1ParentAppHistoryWithResponse(ctx context.Context, body PostV1ParentAppHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ParentAppHistoryResponse, error)

	// GetV1PkiCertificateAuthorityActive request
	GetV1PkiCertificateAuthorityActiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1PkiCertificateAuthorityActiveResponse, error)

	// GetV1PkiCertificateAuthorityActiveDer request
	GetV1PkiCertificateAuthorityActiveDerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1PkiCertificateAuthorityActiveDerResponse, error)

	// GetV1PkiCertificateAuthorityActivePem request
	GetV1PkiCertificateAuthorityActivePemWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1PkiCertificateAuthorityActivePemResponse, error)

	// GetV1PkiCertificateAuthorityId request
	GetV1PkiCertificateAuthorityIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiCertificateAuthorityIdResponse, error)

	// GetV1PkiCertificateAuthorityIdDer request
	GetV1PkiCertificateAuthorityIdDerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiCertificateAuthorityIdDerResponse, error)

	// GetV1PkiCertificateAuthorityIdPem request
	GetV1PkiCertificateAuthorityIdPemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiCertificateAuthorityIdPemResponse, error)

	// PostV1PkiVenafi request with any body
	PostV1PkiVenafiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PkiVenafiResponse, error)

	PostV1PkiVenafiWithResponse(ctx context.Context, body PostV1PkiVenafiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PkiVenafiResponse, error)

	// DeleteV1PkiVenafiId request
	DeleteV1PkiVenafiIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1PkiVenafiIdResponse, error)

	// GetV1PkiVenafiId request
	GetV1PkiVenafiIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiVenafiIdResponse, error)

	// PatchV1PkiVenafiId request with any body
	PatchV1PkiVenafiIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1PkiVenafiIdResponse, error)

	PatchV1PkiVenafiIdWithResponse(ctx context.Context, id string, body PatchV1PkiVenafiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1PkiVenafiIdResponse, error)

	// GetV1PkiVenafiIdConnectionStatus request
	GetV1PkiVenafiIdConnectionStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiVenafiIdConnectionStatusResponse, error)

	// GetV1PkiVenafiIdDependentProfiles request
	GetV1PkiVenafiIdDependentProfilesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiVenafiIdDependentProfilesResponse, error)

	// GetV1PkiVenafiIdHistory request
	GetV1PkiVenafiIdHistoryWithResponse(ctx context.Context, id string, params *GetV1PkiVenafiIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1PkiVenafiIdHistoryResponse, error)

	// PostV1PkiVenafiIdHistory request with any body
	PostV1PkiVenafiIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PkiVenafiIdHistoryResponse, error)

	PostV1PkiVenafiIdHistoryWithResponse(ctx context.Context, id string, body PostV1PkiVenafiIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PkiVenafiIdHistoryResponse, error)

	// GetV1PkiVenafiIdJamfPublicKey request
	GetV1PkiVenafiIdJamfPublicKeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiVenafiIdJamfPublicKeyResponse, error)

	// PostV1PkiVenafiIdJamfPublicKeyRegenerate request
	PostV1PkiVenafiIdJamfPublicKeyRegenerateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostV1PkiVenafiIdJamfPublicKeyRegenerateResponse, error)

	// DeleteV1PkiVenafiIdProxyTrustStore request
	DeleteV1PkiVenafiIdProxyTrustStoreWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1PkiVenafiIdProxyTrustStoreResponse, error)

	// GetV1PkiVenafiIdProxyTrustStore request
	GetV1PkiVenafiIdProxyTrustStoreWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiVenafiIdProxyTrustStoreResponse, error)

	// PostV1PkiVenafiIdProxyTrustStore request with any body
	PostV1PkiVenafiIdProxyTrustStoreWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PkiVenafiIdProxyTrustStoreResponse, error)

	// GetV1PolicyProperties request
	GetV1PolicyPropertiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1PolicyPropertiesResponse, error)

	// PutV1PolicyProperties request with any body
	PutV1PolicyPropertiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1PolicyPropertiesResponse, error)

	PutV1PolicyPropertiesWithResponse(ctx context.Context, body PutV1PolicyPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1PolicyPropertiesResponse, error)

	// GetV1Reenrollment request
	GetV1ReenrollmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ReenrollmentResponse, error)

	// PutV1Reenrollment request with any body
	PutV1ReenrollmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ReenrollmentResponse, error)

	PutV1ReenrollmentWithResponse(ctx context.Context, body PutV1ReenrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ReenrollmentResponse, error)

	// GetV1ReenrollmentHistory request
	GetV1ReenrollmentHistoryWithResponse(ctx context.Context, params *GetV1ReenrollmentHistoryParams, reqEditors ...RequestEditorFn) (*GetV1ReenrollmentHistoryResponse, error)

	// PostV1ReenrollmentHistory request with any body
	PostV1ReenrollmentHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ReenrollmentHistoryResponse, error)

	PostV1ReenrollmentHistoryWithResponse(ctx context.Context, body PostV1ReenrollmentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ReenrollmentHistoryResponse, error)

	// PostV1ReenrollmentHistoryExport request with any body
	PostV1ReenrollmentHistoryExportWithBodyWithResponse(ctx context.Context, params *PostV1ReenrollmentHistoryExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ReenrollmentHistoryExportResponse, error)

	PostV1ReenrollmentHistoryExportWithResponse(ctx context.Context, params *PostV1ReenrollmentHistoryExportParams, body PostV1ReenrollmentHistoryExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ReenrollmentHistoryExportResponse, error)

	// GetV1Scripts request
	GetV1ScriptsWithResponse(ctx context.Context, params *GetV1ScriptsParams, reqEditors ...RequestEditorFn) (*GetV1ScriptsResponse, error)

	// PostV1Scripts request with any body
	PostV1ScriptsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ScriptsResponse, error)

	PostV1ScriptsWithResponse(ctx context.Context, body PostV1ScriptsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ScriptsResponse, error)

	// DeleteV1ScriptsId request
	DeleteV1ScriptsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1ScriptsIdResponse, error)

	// GetV1ScriptsId request
	GetV1ScriptsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1ScriptsIdResponse, error)

	// PutV1ScriptsId request with any body
	PutV1ScriptsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ScriptsIdResponse, error)

	PutV1ScriptsIdWithResponse(ctx context.Context, id string, body PutV1ScriptsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ScriptsIdResponse, error)

	// GetV1ScriptsIdDownload request
	GetV1ScriptsIdDownloadWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1ScriptsIdDownloadResponse, error)

	// GetV1ScriptsIdHistory request
	GetV1ScriptsIdHistoryWithResponse(ctx context.Context, id string, params *GetV1ScriptsIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1ScriptsIdHistoryResponse, error)

	// PostV1ScriptsIdHistory request with any body
	PostV1ScriptsIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ScriptsIdHistoryResponse, error)

	PostV1ScriptsIdHistoryWithResponse(ctx context.Context, id string, body PostV1ScriptsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ScriptsIdHistoryResponse, error)

	// PostV1SearchMobileDevices request with any body
	PostV1SearchMobileDevicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SearchMobileDevicesResponse, error)

	PostV1SearchMobileDevicesWithResponse(ctx context.Context, body PostV1SearchMobileDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SearchMobileDevicesResponse, error)

	// GetV1SelfServiceBrandingIos request
	GetV1SelfServiceBrandingIosWithResponse(ctx context.Context, params *GetV1SelfServiceBrandingIosParams, reqEditors ...RequestEditorFn) (*GetV1SelfServiceBrandingIosResponse, error)

	// PostV1SelfServiceBrandingIos request with any body
	PostV1SelfServiceBrandingIosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SelfServiceBrandingIosResponse, error)

	PostV1SelfServiceBrandingIosWithResponse(ctx context.Context, body PostV1SelfServiceBrandingIosJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SelfServiceBrandingIosResponse, error)

	// DeleteV1SelfServiceBrandingIosId request
	DeleteV1SelfServiceBrandingIosIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1SelfServiceBrandingIosIdResponse, error)

	// GetV1SelfServiceBrandingIosId request
	GetV1SelfServiceBrandingIosIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1SelfServiceBrandingIosIdResponse, error)

	// PutV1SelfServiceBrandingIosId request with any body
	PutV1SelfServiceBrandingIosIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1SelfServiceBrandingIosIdResponse, error)

	PutV1SelfServiceBrandingIosIdWithResponse(ctx context.Context, id string, body PutV1SelfServiceBrandingIosIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1SelfServiceBrandingIosIdResponse, error)

	// GetV1SelfServiceBrandingMacos request
	GetV1SelfServiceBrandingMacosWithResponse(ctx context.Context, params *GetV1SelfServiceBrandingMacosParams, reqEditors ...RequestEditorFn) (*GetV1SelfServiceBrandingMacosResponse, error)

	// PostV1SelfServiceBrandingMacos request with any body
	PostV1SelfServiceBrandingMacosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SelfServiceBrandingMacosResponse, error)

	PostV1SelfServiceBrandingMacosWithResponse(ctx context.Context, body PostV1SelfServiceBrandingMacosJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SelfServiceBrandingMacosResponse, error)

	// DeleteV1SelfServiceBrandingMacosId request
	DeleteV1SelfServiceBrandingMacosIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1SelfServiceBrandingMacosIdResponse, error)

	// GetV1SelfServiceBrandingMacosId request
	GetV1SelfServiceBrandingMacosIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1SelfServiceBrandingMacosIdResponse, error)

	// PutV1SelfServiceBrandingMacosId request with any body
	PutV1SelfServiceBrandingMacosIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1SelfServiceBrandingMacosIdResponse, error)

	PutV1SelfServiceBrandingMacosIdWithResponse(ctx context.Context, id string, body PutV1SelfServiceBrandingMacosIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1SelfServiceBrandingMacosIdResponse, error)

	// GetV1SelfServiceSettings request
	GetV1SelfServiceSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SelfServiceSettingsResponse, error)

	// PutV1SelfServiceSettings request with any body
	PutV1SelfServiceSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1SelfServiceSettingsResponse, error)

	PutV1SelfServiceSettingsWithResponse(ctx context.Context, body PutV1SelfServiceSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1SelfServiceSettingsResponse, error)

	// GetV1Sites request
	GetV1SitesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SitesResponse, error)

	// PostV1SmartComputerGroupsIdRecalculate request
	PostV1SmartComputerGroupsIdRecalculateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostV1SmartComputerGroupsIdRecalculateResponse, error)

	// PostV1SmartMobileDeviceGroupsIdRecalculate request
	PostV1SmartMobileDeviceGroupsIdRecalculateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostV1SmartMobileDeviceGroupsIdRecalculateResponse, error)

	// PostV1SmartUserGroupsIdRecalculate request
	PostV1SmartUserGroupsIdRecalculateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostV1SmartUserGroupsIdRecalculateResponse, error)

	// GetV1Sso request
	GetV1SsoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SsoResponse, error)

	// PutV1Sso request with any body
	PutV1SsoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1SsoResponse, error)

	PutV1SsoWithResponse(ctx context.Context, body PutV1SsoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1SsoResponse, error)

	// DeleteV1SsoCert request
	DeleteV1SsoCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteV1SsoCertResponse, error)

	// GetV1SsoCert request
	GetV1SsoCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SsoCertResponse, error)

	// PostV1SsoCert request
	PostV1SsoCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV1SsoCertResponse, error)

	// PutV1SsoCert request with any body
	PutV1SsoCertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1SsoCertResponse, error)

	PutV1SsoCertWithResponse(ctx context.Context, body PutV1SsoCertJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1SsoCertResponse, error)

	// GetV1SsoCertDownload request
	GetV1SsoCertDownloadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SsoCertDownloadResponse, error)

	// PostV1SsoCertParse request with any body
	PostV1SsoCertParseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SsoCertParseResponse, error)

	PostV1SsoCertParseWithResponse(ctx context.Context, body PostV1SsoCertParseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SsoCertParseResponse, error)

	// GetV1SsoDependencies request
	GetV1SsoDependenciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SsoDependenciesResponse, error)

	// PostV1SsoDisable request
	PostV1SsoDisableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV1SsoDisableResponse, error)

	// GetV1SsoHistory request
	GetV1SsoHistoryWithResponse(ctx context.Context, params *GetV1SsoHistoryParams, reqEditors ...RequestEditorFn) (*GetV1SsoHistoryResponse, error)

	// PostV1SsoHistory request with any body
	PostV1SsoHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SsoHistoryResponse, error)

	PostV1SsoHistoryWithResponse(ctx context.Context, body PostV1SsoHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SsoHistoryResponse, error)

	// GetV1SsoMetadataDownload request
	GetV1SsoMetadataDownloadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SsoMetadataDownloadResponse, error)

	// PostV1SsoValidate request with any body
	PostV1SsoValidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SsoValidateResponse, error)

	PostV1SsoValidateWithResponse(ctx context.Context, body PostV1SsoValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SsoValidateResponse, error)

	// GetV1StaticUserGroups request
	GetV1StaticUserGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1StaticUserGroupsResponse, error)

	// GetV1StaticUserGroupsId request
	GetV1StaticUserGroupsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1StaticUserGroupsIdResponse, error)

	// GetV1SupervisionIdentities request
	GetV1SupervisionIdentitiesWithResponse(ctx context.Context, params *GetV1SupervisionIdentitiesParams, reqEditors ...RequestEditorFn) (*GetV1SupervisionIdentitiesResponse, error)

	// PostV1SupervisionIdentities request with any body
	PostV1SupervisionIdentitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SupervisionIdentitiesResponse, error)

	PostV1SupervisionIdentitiesWithResponse(ctx context.Context, body PostV1SupervisionIdentitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SupervisionIdentitiesResponse, error)

	// PostV1SupervisionIdentitiesUpload request with any body
	PostV1SupervisionIdentitiesUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SupervisionIdentitiesUploadResponse, error)

	PostV1SupervisionIdentitiesUploadWithResponse(ctx context.Context, body PostV1SupervisionIdentitiesUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SupervisionIdentitiesUploadResponse, error)

	// DeleteV1SupervisionIdentitiesId request
	DeleteV1SupervisionIdentitiesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteV1SupervisionIdentitiesIdResponse, error)

	// GetV1SupervisionIdentitiesId request
	GetV1SupervisionIdentitiesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1SupervisionIdentitiesIdResponse, error)

	// PutV1SupervisionIdentitiesId request with any body
	PutV1SupervisionIdentitiesIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1SupervisionIdentitiesIdResponse, error)

	PutV1SupervisionIdentitiesIdWithResponse(ctx context.Context, id int, body PutV1SupervisionIdentitiesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1SupervisionIdentitiesIdResponse, error)

	// GetV1SupervisionIdentitiesIdDownload request
	GetV1SupervisionIdentitiesIdDownloadWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1SupervisionIdentitiesIdDownloadResponse, error)

	// PostV1SystemInitialize request with any body
	PostV1SystemInitializeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SystemInitializeResponse, error)

	PostV1SystemInitializeWithResponse(ctx context.Context, body PostV1SystemInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SystemInitializeResponse, error)

	// PostV1SystemInitializeDatabaseConnection request with any body
	PostV1SystemInitializeDatabaseConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SystemInitializeDatabaseConnectionResponse, error)

	PostV1SystemInitializeDatabaseConnectionWithResponse(ctx context.Context, body PostV1SystemInitializeDatabaseConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SystemInitializeDatabaseConnectionResponse, error)

	// GetV1TeacherApp request
	GetV1TeacherAppWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1TeacherAppResponse, error)

	// PutV1TeacherApp request with any body
	PutV1TeacherAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1TeacherAppResponse, error)

	PutV1TeacherAppWithResponse(ctx context.Context, body PutV1TeacherAppJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1TeacherAppResponse, error)

	// GetV1TeacherAppHistory request
	GetV1TeacherAppHistoryWithResponse(ctx context.Context, params *GetV1TeacherAppHistoryParams, reqEditors ...RequestEditorFn) (*GetV1TeacherAppHistoryResponse, error)

	// PostV1TeacherAppHistory request with any body
	PostV1TeacherAppHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1TeacherAppHistoryResponse, error)

	PostV1TeacherAppHistoryWithResponse(ctx context.Context, body PostV1TeacherAppHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1TeacherAppHistoryResponse, error)

	// GetV1TimeZones request
	GetV1TimeZonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1TimeZonesResponse, error)

	// DeleteV1UserPreferencesKeyId request
	DeleteV1UserPreferencesKeyIdWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*DeleteV1UserPreferencesKeyIdResponse, error)

	// GetV1UserPreferencesKeyId request
	GetV1UserPreferencesKeyIdWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*GetV1UserPreferencesKeyIdResponse, error)

	// PutV1UserPreferencesKeyId request with any body
	PutV1UserPreferencesKeyIdWithBodyWithResponse(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1UserPreferencesKeyIdResponse, error)

	PutV1UserPreferencesKeyIdWithResponse(ctx context.Context, keyId string, body PutV1UserPreferencesKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1UserPreferencesKeyIdResponse, error)

	// PostV1UsersIdRecalculateSmartGroups request
	PostV1UsersIdRecalculateSmartGroupsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostV1UsersIdRecalculateSmartGroupsResponse, error)

	// GetV1VolumePurchasingLocations request
	GetV1VolumePurchasingLocationsWithResponse(ctx context.Context, params *GetV1VolumePurchasingLocationsParams, reqEditors ...RequestEditorFn) (*GetV1VolumePurchasingLocationsResponse, error)

	// PostV1VolumePurchasingLocations request with any body
	PostV1VolumePurchasingLocationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1VolumePurchasingLocationsResponse, error)

	PostV1VolumePurchasingLocationsWithResponse(ctx context.Context, body PostV1VolumePurchasingLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1VolumePurchasingLocationsResponse, error)

	// DeleteV1VolumePurchasingLocationsId request
	DeleteV1VolumePurchasingLocationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1VolumePurchasingLocationsIdResponse, error)

	// GetV1VolumePurchasingLocationsId request
	GetV1VolumePurchasingLocationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1VolumePurchasingLocationsIdResponse, error)

	// PatchV1VolumePurchasingLocationsId request with any body
	PatchV1VolumePurchasingLocationsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1VolumePurchasingLocationsIdResponse, error)

	// GetV1VolumePurchasingLocationsIdHistory request
	GetV1VolumePurchasingLocationsIdHistoryWithResponse(ctx context.Context, id string, params *GetV1VolumePurchasingLocationsIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1VolumePurchasingLocationsIdHistoryResponse, error)

	// PostV1VolumePurchasingLocationsIdReclaim request
	PostV1VolumePurchasingLocationsIdReclaimWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostV1VolumePurchasingLocationsIdReclaimResponse, error)

	// PostV1VolumePurchasingLocationsIdRevokeLicenses request
	PostV1VolumePurchasingLocationsIdRevokeLicensesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostV1VolumePurchasingLocationsIdRevokeLicensesResponse, error)

	// GetV1VolumePurchasingSubscriptions request
	GetV1VolumePurchasingSubscriptionsWithResponse(ctx context.Context, params *GetV1VolumePurchasingSubscriptionsParams, reqEditors ...RequestEditorFn) (*GetV1VolumePurchasingSubscriptionsResponse, error)

	// PostV1VolumePurchasingSubscriptions request with any body
	PostV1VolumePurchasingSubscriptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1VolumePurchasingSubscriptionsResponse, error)

	PostV1VolumePurchasingSubscriptionsWithResponse(ctx context.Context, body PostV1VolumePurchasingSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1VolumePurchasingSubscriptionsResponse, error)

	// DeleteV1VolumePurchasingSubscriptionsId request
	DeleteV1VolumePurchasingSubscriptionsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1VolumePurchasingSubscriptionsIdResponse, error)

	// GetV1VolumePurchasingSubscriptionsId request
	GetV1VolumePurchasingSubscriptionsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1VolumePurchasingSubscriptionsIdResponse, error)

	// PutV1VolumePurchasingSubscriptionsId request with any body
	PutV1VolumePurchasingSubscriptionsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1VolumePurchasingSubscriptionsIdResponse, error)

	PutV1VolumePurchasingSubscriptionsIdWithResponse(ctx context.Context, id string, body PutV1VolumePurchasingSubscriptionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1VolumePurchasingSubscriptionsIdResponse, error)

	// GetV2CheckIn request
	GetV2CheckInWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2CheckInResponse, error)

	// PutV2CheckIn request with any body
	PutV2CheckInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2CheckInResponse, error)

	PutV2CheckInWithResponse(ctx context.Context, body PutV2CheckInJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2CheckInResponse, error)

	// GetV2CheckInHistory request
	GetV2CheckInHistoryWithResponse(ctx context.Context, params *GetV2CheckInHistoryParams, reqEditors ...RequestEditorFn) (*GetV2CheckInHistoryResponse, error)

	// PostV2CheckInHistory request with any body
	PostV2CheckInHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CheckInHistoryResponse, error)

	PostV2CheckInHistoryWithResponse(ctx context.Context, body PostV2CheckInHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CheckInHistoryResponse, error)

	// PostV2CloudLdaps request with any body
	PostV2CloudLdapsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CloudLdapsResponse, error)

	PostV2CloudLdapsWithResponse(ctx context.Context, body PostV2CloudLdapsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CloudLdapsResponse, error)

	// GetV2CloudLdapsDefaultsProviderMappings request
	GetV2CloudLdapsDefaultsProviderMappingsWithResponse(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*GetV2CloudLdapsDefaultsProviderMappingsResponse, error)

	// GetV2CloudLdapsDefaultsProviderServerConfiguration request
	GetV2CloudLdapsDefaultsProviderServerConfigurationWithResponse(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*GetV2CloudLdapsDefaultsProviderServerConfigurationResponse, error)

	// DeleteV2CloudLdapsId request
	DeleteV2CloudLdapsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV2CloudLdapsIdResponse, error)

	// GetV2CloudLdapsId request
	GetV2CloudLdapsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2CloudLdapsIdResponse, error)

	// PutV2CloudLdapsId request with any body
	PutV2CloudLdapsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2CloudLdapsIdResponse, error)

	PutV2CloudLdapsIdWithResponse(ctx context.Context, id string, body PutV2CloudLdapsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2CloudLdapsIdResponse, error)

	// GetV2CloudLdapsIdConnectionBind request
	GetV2CloudLdapsIdConnectionBindWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2CloudLdapsIdConnectionBindResponse, error)

	// GetV2CloudLdapsIdConnectionSearch request
	GetV2CloudLdapsIdConnectionSearchWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2CloudLdapsIdConnectionSearchResponse, error)

	// GetV2CloudLdapsIdConnectionStatus request
	GetV2CloudLdapsIdConnectionStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2CloudLdapsIdConnectionStatusResponse, error)

	// GetV2CloudLdapsIdMappings request
	GetV2CloudLdapsIdMappingsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2CloudLdapsIdMappingsResponse, error)

	// PutV2CloudLdapsIdMappings request with any body
	PutV2CloudLdapsIdMappingsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2CloudLdapsIdMappingsResponse, error)

	PutV2CloudLdapsIdMappingsWithResponse(ctx context.Context, id string, body PutV2CloudLdapsIdMappingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2CloudLdapsIdMappingsResponse, error)

	// GetV2ComputerPrestages request
	GetV2ComputerPrestagesWithResponse(ctx context.Context, params *GetV2ComputerPrestagesParams, reqEditors ...RequestEditorFn) (*GetV2ComputerPrestagesResponse, error)

	// PostV2ComputerPrestages request with any body
	PostV2ComputerPrestagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ComputerPrestagesResponse, error)

	PostV2ComputerPrestagesWithResponse(ctx context.Context, body PostV2ComputerPrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ComputerPrestagesResponse, error)

	// GetV2ComputerPrestagesScope request
	GetV2ComputerPrestagesScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2ComputerPrestagesScopeResponse, error)

	// DeleteV2ComputerPrestagesId request
	DeleteV2ComputerPrestagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV2ComputerPrestagesIdResponse, error)

	// GetV2ComputerPrestagesId request
	GetV2ComputerPrestagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2ComputerPrestagesIdResponse, error)

	// PutV2ComputerPrestagesId request with any body
	PutV2ComputerPrestagesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2ComputerPrestagesIdResponse, error)

	PutV2ComputerPrestagesIdWithResponse(ctx context.Context, id string, body PutV2ComputerPrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2ComputerPrestagesIdResponse, error)

	// GetV2ComputerPrestagesIdScope request
	GetV2ComputerPrestagesIdScopeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2ComputerPrestagesIdScopeResponse, error)

	// PostV2ComputerPrestagesIdScope request with any body
	PostV2ComputerPrestagesIdScopeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ComputerPrestagesIdScopeResponse, error)

	PostV2ComputerPrestagesIdScopeWithResponse(ctx context.Context, id string, body PostV2ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ComputerPrestagesIdScopeResponse, error)

	// PutV2ComputerPrestagesIdScope request with any body
	PutV2ComputerPrestagesIdScopeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2ComputerPrestagesIdScopeResponse, error)

	PutV2ComputerPrestagesIdScopeWithResponse(ctx context.Context, id string, body PutV2ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2ComputerPrestagesIdScopeResponse, error)

	// PostV2ComputerPrestagesIdScopeDeleteMultiple request with any body
	PostV2ComputerPrestagesIdScopeDeleteMultipleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ComputerPrestagesIdScopeDeleteMultipleResponse, error)

	PostV2ComputerPrestagesIdScopeDeleteMultipleWithResponse(ctx context.Context, id string, body PostV2ComputerPrestagesIdScopeDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ComputerPrestagesIdScopeDeleteMultipleResponse, error)

	// GetV2Enrollment request
	GetV2EnrollmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2EnrollmentResponse, error)

	// PutV2Enrollment request with any body
	PutV2EnrollmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2EnrollmentResponse, error)

	PutV2EnrollmentWithResponse(ctx context.Context, body PutV2EnrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2EnrollmentResponse, error)

	// GetV2EnrollmentCustomizations request
	GetV2EnrollmentCustomizationsWithResponse(ctx context.Context, params *GetV2EnrollmentCustomizationsParams, reqEditors ...RequestEditorFn) (*GetV2EnrollmentCustomizationsResponse, error)

	// PostV2EnrollmentCustomizations request with any body
	PostV2EnrollmentCustomizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2EnrollmentCustomizationsResponse, error)

	PostV2EnrollmentCustomizationsWithResponse(ctx context.Context, body PostV2EnrollmentCustomizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2EnrollmentCustomizationsResponse, error)

	// PostV2EnrollmentCustomizationsImages request with any body
	PostV2EnrollmentCustomizationsImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2EnrollmentCustomizationsImagesResponse, error)

	// DeleteV2EnrollmentCustomizationsId request
	DeleteV2EnrollmentCustomizationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV2EnrollmentCustomizationsIdResponse, error)

	// GetV2EnrollmentCustomizationsId request
	GetV2EnrollmentCustomizationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2EnrollmentCustomizationsIdResponse, error)

	// PutV2EnrollmentCustomizationsId request with any body
	PutV2EnrollmentCustomizationsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2EnrollmentCustomizationsIdResponse, error)

	PutV2EnrollmentCustomizationsIdWithResponse(ctx context.Context, id string, body PutV2EnrollmentCustomizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2EnrollmentCustomizationsIdResponse, error)

	// GetV2EnrollmentCustomizationsIdHistory request
	GetV2EnrollmentCustomizationsIdHistoryWithResponse(ctx context.Context, id string, params *GetV2EnrollmentCustomizationsIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV2EnrollmentCustomizationsIdHistoryResponse, error)

	// PostV2EnrollmentCustomizationsIdHistory request with any body
	PostV2EnrollmentCustomizationsIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2EnrollmentCustomizationsIdHistoryResponse, error)

	PostV2EnrollmentCustomizationsIdHistoryWithResponse(ctx context.Context, id string, body PostV2EnrollmentCustomizationsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2EnrollmentCustomizationsIdHistoryResponse, error)

	// GetV2EnrollmentCustomizationsIdPrestages request
	GetV2EnrollmentCustomizationsIdPrestagesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2EnrollmentCustomizationsIdPrestagesResponse, error)

	// GetV2EnrollmentAccessGroups request
	GetV2EnrollmentAccessGroupsWithResponse(ctx context.Context, params *GetV2EnrollmentAccessGroupsParams, reqEditors ...RequestEditorFn) (*GetV2EnrollmentAccessGroupsResponse, error)

	// PostV2EnrollmentAccessGroups request with any body
	PostV2EnrollmentAccessGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2EnrollmentAccessGroupsResponse, error)

	PostV2EnrollmentAccessGroupsWithResponse(ctx context.Context, body PostV2EnrollmentAccessGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2EnrollmentAccessGroupsResponse, error)

	// DeleteV2EnrollmentAccessGroupsServerIdGroupId request
	DeleteV2EnrollmentAccessGroupsServerIdGroupIdWithResponse(ctx context.Context, serverId string, groupId string, reqEditors ...RequestEditorFn) (*DeleteV2EnrollmentAccessGroupsServerIdGroupIdResponse, error)

	// GetV2EnrollmentAccessGroupsServerIdGroupId request
	GetV2EnrollmentAccessGroupsServerIdGroupIdWithResponse(ctx context.Context, serverId string, groupId string, reqEditors ...RequestEditorFn) (*GetV2EnrollmentAccessGroupsServerIdGroupIdResponse, error)

	// PutV2EnrollmentAccessGroupsServerIdGroupId request with any body
	PutV2EnrollmentAccessGroupsServerIdGroupIdWithBodyWithResponse(ctx context.Context, serverId string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2EnrollmentAccessGroupsServerIdGroupIdResponse, error)

	PutV2EnrollmentAccessGroupsServerIdGroupIdWithResponse(ctx context.Context, serverId string, groupId string, body PutV2EnrollmentAccessGroupsServerIdGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2EnrollmentAccessGroupsServerIdGroupIdResponse, error)

	// GetV2EnrollmentFilteredLanguageCodes request
	GetV2EnrollmentFilteredLanguageCodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2EnrollmentFilteredLanguageCodesResponse, error)

	// GetV2EnrollmentHistory request
	GetV2EnrollmentHistoryWithResponse(ctx context.Context, params *GetV2EnrollmentHistoryParams, reqEditors ...RequestEditorFn) (*GetV2EnrollmentHistoryResponse, error)

	// PostV2EnrollmentHistory request with any body
	PostV2EnrollmentHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2EnrollmentHistoryResponse, error)

	PostV2EnrollmentHistoryWithResponse(ctx context.Context, body PostV2EnrollmentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2EnrollmentHistoryResponse, error)

	// PostV2EnrollmentHistoryExport request with any body
	PostV2EnrollmentHistoryExportWithBodyWithResponse(ctx context.Context, params *PostV2EnrollmentHistoryExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2EnrollmentHistoryExportResponse, error)

	PostV2EnrollmentHistoryExportWithResponse(ctx context.Context, params *PostV2EnrollmentHistoryExportParams, body PostV2EnrollmentHistoryExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2EnrollmentHistoryExportResponse, error)

	// GetV2EnrollmentLanguageCodes request
	GetV2EnrollmentLanguageCodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2EnrollmentLanguageCodesResponse, error)

	// GetV2EnrollmentLanguages request
	GetV2EnrollmentLanguagesWithResponse(ctx context.Context, params *GetV2EnrollmentLanguagesParams, reqEditors ...RequestEditorFn) (*GetV2EnrollmentLanguagesResponse, error)

	// PostV2EnrollmentLanguagesDeleteMultiple request with any body
	PostV2EnrollmentLanguagesDeleteMultipleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2EnrollmentLanguagesDeleteMultipleResponse, error)

	PostV2EnrollmentLanguagesDeleteMultipleWithResponse(ctx context.Context, body PostV2EnrollmentLanguagesDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2EnrollmentLanguagesDeleteMultipleResponse, error)

	// DeleteV2EnrollmentLanguagesLanguageId request
	DeleteV2EnrollmentLanguagesLanguageIdWithResponse(ctx context.Context, languageId string, reqEditors ...RequestEditorFn) (*DeleteV2EnrollmentLanguagesLanguageIdResponse, error)

	// GetV2EnrollmentLanguagesLanguageId request
	GetV2EnrollmentLanguagesLanguageIdWithResponse(ctx context.Context, languageId string, reqEditors ...RequestEditorFn) (*GetV2EnrollmentLanguagesLanguageIdResponse, error)

	// PutV2EnrollmentLanguagesLanguageId request with any body
	PutV2EnrollmentLanguagesLanguageIdWithBodyWithResponse(ctx context.Context, languageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2EnrollmentLanguagesLanguageIdResponse, error)

	PutV2EnrollmentLanguagesLanguageIdWithResponse(ctx context.Context, languageId string, body PutV2EnrollmentLanguagesLanguageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2EnrollmentLanguagesLanguageIdResponse, error)

	// GetV2InventoryPreloadCsv request
	GetV2InventoryPreloadCsvWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2InventoryPreloadCsvResponse, error)

	// PostV2InventoryPreloadCsv request with any body
	PostV2InventoryPreloadCsvWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadCsvResponse, error)

	// GetV2InventoryPreloadCsvTemplate request
	GetV2InventoryPreloadCsvTemplateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2InventoryPreloadCsvTemplateResponse, error)

	// PostV2InventoryPreloadCsvValidate request with any body
	PostV2InventoryPreloadCsvValidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadCsvValidateResponse, error)

	// GetV2InventoryPreloadEaColumns request
	GetV2InventoryPreloadEaColumnsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2InventoryPreloadEaColumnsResponse, error)

	// PostV2InventoryPreloadExport request with any body
	PostV2InventoryPreloadExportWithBodyWithResponse(ctx context.Context, params *PostV2InventoryPreloadExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadExportResponse, error)

	PostV2InventoryPreloadExportWithResponse(ctx context.Context, params *PostV2InventoryPreloadExportParams, body PostV2InventoryPreloadExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadExportResponse, error)

	// GetV2InventoryPreloadHistory request
	GetV2InventoryPreloadHistoryWithResponse(ctx context.Context, params *GetV2InventoryPreloadHistoryParams, reqEditors ...RequestEditorFn) (*GetV2InventoryPreloadHistoryResponse, error)

	// PostV2InventoryPreloadHistory request with any body
	PostV2InventoryPreloadHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadHistoryResponse, error)

	PostV2InventoryPreloadHistoryWithResponse(ctx context.Context, body PostV2InventoryPreloadHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadHistoryResponse, error)

	// GetV2InventoryPreloadRecords request
	GetV2InventoryPreloadRecordsWithResponse(ctx context.Context, params *GetV2InventoryPreloadRecordsParams, reqEditors ...RequestEditorFn) (*GetV2InventoryPreloadRecordsResponse, error)

	// PostV2InventoryPreloadRecords request with any body
	PostV2InventoryPreloadRecordsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadRecordsResponse, error)

	PostV2InventoryPreloadRecordsWithResponse(ctx context.Context, body PostV2InventoryPreloadRecordsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadRecordsResponse, error)

	// PostV2InventoryPreloadRecordsDeleteAll request
	PostV2InventoryPreloadRecordsDeleteAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadRecordsDeleteAllResponse, error)

	// DeleteV2InventoryPreloadRecordsId request
	DeleteV2InventoryPreloadRecordsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV2InventoryPreloadRecordsIdResponse, error)

	// GetV2InventoryPreloadRecordsId request
	GetV2InventoryPreloadRecordsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2InventoryPreloadRecordsIdResponse, error)

	// PutV2InventoryPreloadRecordsId request with any body
	PutV2InventoryPreloadRecordsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2InventoryPreloadRecordsIdResponse, error)

	PutV2InventoryPreloadRecordsIdWithResponse(ctx context.Context, id string, body PutV2InventoryPreloadRecordsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2InventoryPreloadRecordsIdResponse, error)

	// GetV2JamfPackage request
	GetV2JamfPackageWithResponse(ctx context.Context, params *GetV2JamfPackageParams, reqEditors ...RequestEditorFn) (*GetV2JamfPackageResponse, error)

	// GetV2JamfProInformation request
	GetV2JamfProInformationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2JamfProInformationResponse, error)

	// GetV2MobileDevicePrestages request
	GetV2MobileDevicePrestagesWithResponse(ctx context.Context, params *GetV2MobileDevicePrestagesParams, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesResponse, error)

	// PostV2MobileDevicePrestages request with any body
	PostV2MobileDevicePrestagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesResponse, error)

	PostV2MobileDevicePrestagesWithResponse(ctx context.Context, body PostV2MobileDevicePrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesResponse, error)

	// GetV2MobileDevicePrestagesScope request
	GetV2MobileDevicePrestagesScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesScopeResponse, error)

	// GetV2MobileDevicePrestagesSyncs request
	GetV2MobileDevicePrestagesSyncsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesSyncsResponse, error)

	// DeleteV2MobileDevicePrestagesId request
	DeleteV2MobileDevicePrestagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV2MobileDevicePrestagesIdResponse, error)

	// GetV2MobileDevicePrestagesId request
	GetV2MobileDevicePrestagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesIdResponse, error)

	// PutV2MobileDevicePrestagesId request with any body
	PutV2MobileDevicePrestagesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2MobileDevicePrestagesIdResponse, error)

	PutV2MobileDevicePrestagesIdWithResponse(ctx context.Context, id string, body PutV2MobileDevicePrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2MobileDevicePrestagesIdResponse, error)

	// GetV2MobileDevicePrestagesIdAttachments request
	GetV2MobileDevicePrestagesIdAttachmentsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesIdAttachmentsResponse, error)

	// PostV2MobileDevicePrestagesIdAttachments request with any body
	PostV2MobileDevicePrestagesIdAttachmentsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdAttachmentsResponse, error)

	// PostV2MobileDevicePrestagesIdAttachmentsDeleteMultiple request with any body
	PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleResponse, error)

	PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleWithResponse(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleResponse, error)

	// GetV2MobileDevicePrestagesIdHistory request
	GetV2MobileDevicePrestagesIdHistoryWithResponse(ctx context.Context, id string, params *GetV2MobileDevicePrestagesIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesIdHistoryResponse, error)

	// PostV2MobileDevicePrestagesIdHistory request with any body
	PostV2MobileDevicePrestagesIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdHistoryResponse, error)

	PostV2MobileDevicePrestagesIdHistoryWithResponse(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdHistoryResponse, error)

	// GetV2MobileDevicePrestagesIdScope request
	GetV2MobileDevicePrestagesIdScopeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesIdScopeResponse, error)

	// PostV2MobileDevicePrestagesIdScope request with any body
	PostV2MobileDevicePrestagesIdScopeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdScopeResponse, error)

	PostV2MobileDevicePrestagesIdScopeWithResponse(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdScopeResponse, error)

	// PutV2MobileDevicePrestagesIdScope request with any body
	PutV2MobileDevicePrestagesIdScopeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2MobileDevicePrestagesIdScopeResponse, error)

	PutV2MobileDevicePrestagesIdScopeWithResponse(ctx context.Context, id string, body PutV2MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2MobileDevicePrestagesIdScopeResponse, error)

	// PostV2MobileDevicePrestagesIdScopeDeleteMultiple request with any body
	PostV2MobileDevicePrestagesIdScopeDeleteMultipleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdScopeDeleteMultipleResponse, error)

	PostV2MobileDevicePrestagesIdScopeDeleteMultipleWithResponse(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdScopeDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdScopeDeleteMultipleResponse, error)

	// GetV2MobileDevicePrestagesIdSyncs request
	GetV2MobileDevicePrestagesIdSyncsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesIdSyncsResponse, error)

	// GetV2MobileDevicePrestagesIdSyncsLatest request
	GetV2MobileDevicePrestagesIdSyncsLatestWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesIdSyncsLatestResponse, error)

	// GetV2MobileDevices request
	GetV2MobileDevicesWithResponse(ctx context.Context, params *GetV2MobileDevicesParams, reqEditors ...RequestEditorFn) (*GetV2MobileDevicesResponse, error)

	// GetV2MobileDevicesId request
	GetV2MobileDevicesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2MobileDevicesIdResponse, error)

	// PatchV2MobileDevicesId request with any body
	PatchV2MobileDevicesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2MobileDevicesIdResponse, error)

	PatchV2MobileDevicesIdWithResponse(ctx context.Context, id string, body PatchV2MobileDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2MobileDevicesIdResponse, error)

	// GetV2MobileDevicesIdDetail request
	GetV2MobileDevicesIdDetailWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2MobileDevicesIdDetailResponse, error)

	// DeleteV2SsoCert request
	DeleteV2SsoCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteV2SsoCertResponse, error)

	// GetV2SsoCert request
	GetV2SsoCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2SsoCertResponse, error)

	// PostV2SsoCert request
	PostV2SsoCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV2SsoCertResponse, error)

	// PutV2SsoCert request with any body
	PutV2SsoCertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2SsoCertResponse, error)

	PutV2SsoCertWithResponse(ctx context.Context, body PutV2SsoCertJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2SsoCertResponse, error)

	// GetV2SsoCertDownload request
	GetV2SsoCertDownloadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2SsoCertDownloadResponse, error)

	// PostV2SsoCertParse request with any body
	PostV2SsoCertParseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2SsoCertParseResponse, error)

	PostV2SsoCertParseWithResponse(ctx context.Context, body PostV2SsoCertParseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2SsoCertParseResponse, error)

	// GetV3CheckIn request
	GetV3CheckInWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV3CheckInResponse, error)

	// PutV3CheckIn request with any body
	PutV3CheckInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV3CheckInResponse, error)

	PutV3CheckInWithResponse(ctx context.Context, body PutV3CheckInJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV3CheckInResponse, error)

	// GetV3CheckInHistory request
	GetV3CheckInHistoryWithResponse(ctx context.Context, params *GetV3CheckInHistoryParams, reqEditors ...RequestEditorFn) (*GetV3CheckInHistoryResponse, error)

	// PostV3CheckInHistory request with any body
	PostV3CheckInHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3CheckInHistoryResponse, error)

	PostV3CheckInHistoryWithResponse(ctx context.Context, body PostV3CheckInHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3CheckInHistoryResponse, error)

	// GetVppAdminAccounts request
	GetVppAdminAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVppAdminAccountsResponse, error)

	// GetVppSubscriptions request
	GetVppSubscriptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVppSubscriptionsResponse, error)

	// GetVppSubscriptionsId request
	GetVppSubscriptionsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetVppSubscriptionsIdResponse, error)
}

type GetAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Authorization
}

// Status returns HTTPResponse.Status
func (r GetAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthCurrentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CurrentAuthorization
}

// Status returns HTTPResponse.Status
func (r PostAuthCurrentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthCurrentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthInvalidateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAuthInvalidateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthInvalidateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthKeepAliveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthToken
}

// Status returns HTTPResponse.Status
func (r PostAuthKeepAliveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthKeepAliveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthToken
}

// Status returns HTTPResponse.Status
func (r PostAuthTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDevicesExtensionAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileDeviceExtensionAttributeResults
}

// Status returns HTTPResponse.Status
func (r GetDevicesExtensionAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDevicesExtensionAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInventoryPreloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteInventoryPreloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInventoryPreloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInventoryPreloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]InventoryPreloadRecordSearchResults
}

// Status returns HTTPResponse.Status
func (r GetInventoryPreloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInventoryPreloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInventoryPreloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InventoryPreloadRecord
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostInventoryPreloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInventoryPreloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInventoryPreloadCsvTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInventoryPreloadCsvTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInventoryPreloadCsvTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInventoryPreloadHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetInventoryPreloadHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInventoryPreloadHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInventoryPreloadHistoryNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostInventoryPreloadHistoryNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInventoryPreloadHistoryNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInventoryPreloadValidateCsvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryPreloadCsvValidationSuccess
	JSON412      *InventoryPreloadInvalidCsvResponse
}

// Status returns HTTPResponse.Status
func (r PostInventoryPreloadValidateCsvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInventoryPreloadValidateCsvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInventoryPreloadIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteInventoryPreloadIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInventoryPreloadIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInventoryPreloadIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryPreloadRecord
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetInventoryPreloadIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInventoryPreloadIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInventoryPreloadIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryPreloadRecord
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutInventoryPreloadIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInventoryPreloadIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLdapGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LdapGroupSearchResults
}

// Status returns HTTPResponse.Status
func (r GetLdapGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLdapGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLdapServersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LdapServer
}

// Status returns HTTPResponse.Status
func (r GetLdapServersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLdapServersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotificationsAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Notification
}

// Status returns HTTPResponse.Status
func (r GetNotificationsAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotificationsAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNotificationsAlertsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteNotificationsAlertsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNotificationsAlertsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNotificationsAlertsTypeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteNotificationsAlertsTypeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNotificationsAlertsTypeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPatchDisclaimerAgreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPatchDisclaimerAgreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPatchDisclaimerAgreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatchObjPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchPolicySummary
}

// Status returns HTTPResponse.Status
func (r GetPatchObjPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatchObjPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatchObjPolicyIdLogsEligibleRetryCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegerWrapper
}

// Status returns HTTPResponse.Status
func (r GetPatchObjPolicyIdLogsEligibleRetryCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatchObjPolicyIdLogsEligibleRetryCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatchObjPolicyIdSoftwareTitleConfigurationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegerWrapper
}

// Status returns HTTPResponse.Status
func (r GetPatchObjPolicyIdSoftwareTitleConfigurationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatchObjPolicyIdSoftwareTitleConfigurationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatchObjSoftwareTitleIdPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SoftwareTitlePatchPolicySummaries
}

// Status returns HTTPResponse.Status
func (r GetPatchObjSoftwareTitleIdPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatchObjSoftwareTitleIdPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatchObjSoftwareTitleConfigurationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SoftwareTitleConfiguration
}

// Status returns HTTPResponse.Status
func (r GetPatchObjSoftwareTitleConfigurationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatchObjSoftwareTitleConfigurationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatchObjIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActivePatchSummary
}

// Status returns HTTPResponse.Status
func (r GetPatchObjIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatchObjIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPatchObjIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActivePatchSummary
}

// Status returns HTTPResponse.Status
func (r PutPatchObjIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPatchObjIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatchObjIdVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PatchVersion
}

// Status returns HTTPResponse.Status
func (r GetPatchObjIdVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatchObjIdVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatchObjsPolicyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchPolicySummary
}

// Status returns HTTPResponse.Status
func (r GetPatchObjsPolicyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatchObjsPolicyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatchOnDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchIdsOnDashboard
}

// Status returns HTTPResponse.Status
func (r GetPatchOnDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatchOnDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatchPatchPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PatchPolicySummary
}

// Status returns HTTPResponse.Status
func (r GetPatchPatchPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatchPatchPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePatchPatchPoliciesIdDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePatchPatchPoliciesIdDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePatchPatchPoliciesIdDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatchPatchPoliciesIdDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchPolicyOnDashboard
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetPatchPatchPoliciesIdDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatchPatchPoliciesIdDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPatchPatchPoliciesIdDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPatchPatchPoliciesIdDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPatchPatchPoliciesIdDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatchPatchPoliciesIdLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PatchPolicyAttempt
}

// Status returns HTTPResponse.Status
func (r GetPatchPatchPoliciesIdLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatchPatchPoliciesIdLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPatchRetryPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPatchRetryPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPatchRetryPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPatchSearchActivePatchHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActivePatchHistorySearchResults
}

// Status returns HTTPResponse.Status
func (r PostPatchSearchActivePatchHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPatchSearchActivePatchHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPatchSearchPatchPolicyLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatchPolicyLogSearchResults
}

// Status returns HTTPResponse.Status
func (r PostPatchSearchPatchPolicyLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPatchSearchPatchPolicyLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPatchSvcDisclaimerAgreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPatchSvcDisclaimerAgreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPatchSvcDisclaimerAgreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPatchSvcRetryPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPatchSvcRetryPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPatchSvcRetryPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatchIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActivePatchSummary
}

// Status returns HTTPResponse.Status
func (r GetPatchIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatchIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPatchIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActivePatchSummary
}

// Status returns HTTPResponse.Status
func (r PutPatchIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPatchIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPatchIdVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PatchVersion
}

// Status returns HTTPResponse.Status
func (r GetPatchIdVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPatchIdVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewComputersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputersSearchResults
}

// Status returns HTTPResponse.Status
func (r GetPreviewComputersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewComputersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewEnrollmentAccessGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessGroupsPreviewSearchResults
}

// Status returns HTTPResponse.Status
func (r GetPreviewEnrollmentAccessGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewEnrollmentAccessGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPreviewEnrollmentAccessGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostPreviewEnrollmentAccessGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPreviewEnrollmentAccessGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePreviewEnrollmentAccessGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeletePreviewEnrollmentAccessGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePreviewEnrollmentAccessGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewEnrollmentAccessGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentAccessGroupPreview
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetPreviewEnrollmentAccessGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewEnrollmentAccessGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPreviewEnrollmentAccessGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentAccessGroupPreview
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutPreviewEnrollmentAccessGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPreviewEnrollmentAccessGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPreviewMdmCommandsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]HrefResponse
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostPreviewMdmCommandsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPreviewMdmCommandsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewRemoteAdministrationConfigurationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RemoteAdministrationSearchResults
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetPreviewRemoteAdministrationConfigurationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewRemoteAdministrationConfigurationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPreviewRemoteAdministrationConfigurationsTeamViewerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON400      *ApiError
	JSON403      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostPreviewRemoteAdministrationConfigurationsTeamViewerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPreviewRemoteAdministrationConfigurationsTeamViewerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionDetailsSearchResults
	JSON403      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON400      *ApiError
	JSON403      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionDetails
	JSON403      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SessionStatus
	JSON403      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePreviewRemoteAdministrationConfigurationsTeamViewerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePreviewRemoteAdministrationConfigurationsTeamViewerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePreviewRemoteAdministrationConfigurationsTeamViewerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionConfigurationResponse
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionConfigurationResponse
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionConfigurationStatusResponse
}

// Status returns HTTPResponse.Status
func (r GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSelfServiceBrandingImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BrandingImageUrl
}

// Status returns HTTPResponse.Status
func (r PostSelfServiceBrandingImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSelfServiceBrandingImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSettingsIssueTomcatSslCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSettingsIssueTomcatSslCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsIssueTomcatSslCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsObjPolicyPropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyProperties
}

// Status returns HTTPResponse.Status
func (r GetSettingsObjPolicyPropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsObjPolicyPropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSettingsObjPolicyPropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PolicyProperties
}

// Status returns HTTPResponse.Status
func (r PutSettingsObjPolicyPropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsObjPolicyPropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettingsSitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Site
}

// Status returns HTTPResponse.Status
func (r GetSettingsSitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsSitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStartupStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StartupStatus
}

// Status returns HTTPResponse.Status
func (r GetStartupStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStartupStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemInitializeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostSystemInitializeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemInitializeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemInitializeDatabaseConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON429      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostSystemInitializeDatabaseConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemInitializeDatabaseConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Account
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserObjPreferenceKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteUserObjPreferenceKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserObjPreferenceKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserObjPreferenceKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPreferencesJson
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetUserObjPreferenceKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserObjPreferenceKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserObjPreferenceKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPreferencesJson
}

// Status returns HTTPResponse.Status
func (r PutUserObjPreferenceKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserObjPreferenceKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserUpdateSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Session
}

// Status returns HTTPResponse.Status
func (r PostUserUpdateSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUpdateSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AdueSessionTokenSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountDrivenUserEnrollmentSessionTokenSettings
}

// Status returns HTTPResponse.Status
func (r GetV1AdueSessionTokenSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AdueSessionTokenSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1AdueSessionTokenSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountDrivenUserEnrollmentSessionTokenSettings
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1AdueSessionTokenSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1AdueSessionTokenSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AdvancedMobileDeviceSearchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdvancedSearchSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1AdvancedMobileDeviceSearchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AdvancedMobileDeviceSearchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1AdvancedMobileDeviceSearchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
}

// Status returns HTTPResponse.Status
func (r PostV1AdvancedMobileDeviceSearchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AdvancedMobileDeviceSearchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AdvancedMobileDeviceSearchesChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdvancedSearchCriteriaChoices
}

// Status returns HTTPResponse.Status
func (r GetV1AdvancedMobileDeviceSearchesChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AdvancedMobileDeviceSearchesChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1AdvancedMobileDeviceSearchesDeleteMultipleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1AdvancedMobileDeviceSearchesDeleteMultipleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AdvancedMobileDeviceSearchesDeleteMultipleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1AdvancedMobileDeviceSearchesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1AdvancedMobileDeviceSearchesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1AdvancedMobileDeviceSearchesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AdvancedMobileDeviceSearchesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdvancedSearch
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1AdvancedMobileDeviceSearchesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AdvancedMobileDeviceSearchesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1AdvancedMobileDeviceSearchesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdvancedSearch
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1AdvancedMobileDeviceSearchesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1AdvancedMobileDeviceSearchesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AdvancedUserContentSearchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdvancedUserContentSearchSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1AdvancedUserContentSearchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AdvancedUserContentSearchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1AdvancedUserContentSearchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
}

// Status returns HTTPResponse.Status
func (r PostV1AdvancedUserContentSearchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AdvancedUserContentSearchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1AdvancedUserContentSearchesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1AdvancedUserContentSearchesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1AdvancedUserContentSearchesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AdvancedUserContentSearchesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdvancedUserContentSearch
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1AdvancedUserContentSearchesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AdvancedUserContentSearchesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1AdvancedUserContentSearchesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdvancedUserContentSearch
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1AdvancedUserContentSearchesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1AdvancedUserContentSearchesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AppDynamicsScriptConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppDynamicsConfig
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1AppDynamicsScriptConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AppDynamicsScriptConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AppRequestFormInputFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppRequestFormInputFieldSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1AppRequestFormInputFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AppRequestFormInputFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1AppRequestFormInputFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppRequestFormInputField
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1AppRequestFormInputFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AppRequestFormInputFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1AppRequestFormInputFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AppRequestFormInputField
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1AppRequestFormInputFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1AppRequestFormInputFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1AppRequestFormInputFieldsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1AppRequestFormInputFieldsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1AppRequestFormInputFieldsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AppRequestFormInputFieldsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppRequestFormInputField
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1AppRequestFormInputFieldsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AppRequestFormInputFieldsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1AppRequestFormInputFieldsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppRequestFormInputField
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1AppRequestFormInputFieldsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1AppRequestFormInputFieldsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AppRequestSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppRequestSettings
}

// Status returns HTTPResponse.Status
func (r GetV1AppRequestSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AppRequestSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1AppRequestSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppRequestSettings
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1AppRequestSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1AppRequestSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AppStoreCountryCodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CountryCodes
}

// Status returns HTTPResponse.Status
func (r GetV1AppStoreCountryCodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AppStoreCountryCodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthorizationV1
}

// Status returns HTTPResponse.Status
func (r GetV1AuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1AuthInvalidateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1AuthInvalidateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AuthInvalidateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1AuthKeepAliveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthTokenV1
}

// Status returns HTTPResponse.Status
func (r PostV1AuthKeepAliveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AuthKeepAliveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1AuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthTokenV1
}

// Status returns HTTPResponse.Status
func (r PostV1AuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1AzureAdMigrationReportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1AzureAdMigrationReportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1AzureAdMigrationReportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AzureAdMigrationReportsPendingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AzureAdMigrationReportProcessStatus
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1AzureAdMigrationReportsPendingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AzureAdMigrationReportsPendingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AzureAdMigrationReportsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AzureAdMigrationReportProcessStatus
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1AzureAdMigrationReportsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AzureAdMigrationReportsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AzureAdMigrationReportsIdDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1AzureAdMigrationReportsIdDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AzureAdMigrationReportsIdDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1BuildingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildingSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1BuildingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1BuildingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1BuildingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
}

// Status returns HTTPResponse.Status
func (r PostV1BuildingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1BuildingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1BuildingsDeleteMultipleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1BuildingsDeleteMultipleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1BuildingsDeleteMultipleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1BuildingsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1BuildingsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1BuildingsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1BuildingsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Building
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1BuildingsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1BuildingsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1BuildingsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Building
}

// Status returns HTTPResponse.Status
func (r PutV1BuildingsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1BuildingsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1BuildingsIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1BuildingsIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1BuildingsIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1BuildingsIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON404      *ApiError
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1BuildingsIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1BuildingsIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1CacheSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CacheSettings
}

// Status returns HTTPResponse.Status
func (r GetV1CacheSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1CacheSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1CacheSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CacheSettings
	JSON403      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1CacheSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1CacheSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1CategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoriesSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1CategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1CategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1CategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
}

// Status returns HTTPResponse.Status
func (r PostV1CategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1CategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1CategoriesDeleteMultipleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1CategoriesDeleteMultipleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1CategoriesDeleteMultipleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1CategoriesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1CategoriesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1CategoriesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1CategoriesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1CategoriesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1CategoriesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1CategoriesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
}

// Status returns HTTPResponse.Status
func (r PutV1CategoriesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1CategoriesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1CategoriesIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1CategoriesIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1CategoriesIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1CategoriesIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON404      *ApiError
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1CategoriesIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1CategoriesIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ClassicLdapIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClassicLdapMappings
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1ClassicLdapIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ClassicLdapIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1CloudAzureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1CloudAzureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1CloudAzureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1CloudAzureDefaultsMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AzureMappings
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1CloudAzureDefaultsMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1CloudAzureDefaultsMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1CloudAzureDefaultsServerConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AzureServerConfiguration
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1CloudAzureDefaultsServerConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1CloudAzureDefaultsServerConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1CloudAzureIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1CloudAzureIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1CloudAzureIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1CloudAzureIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AzureConfiguration
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1CloudAzureIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1CloudAzureIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1CloudAzureIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AzureConfiguration
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1CloudAzureIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1CloudAzureIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1CloudIdpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConfigurationSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1CloudIdpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1CloudIdpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1CloudIdpExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1CloudIdpExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1CloudIdpExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1CloudIdpIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudIdPCommon
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1CloudIdpIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1CloudIdpIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1CloudIdpIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1CloudIdpIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1CloudIdpIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1CloudIdpIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON404      *ApiError
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1CloudIdpIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1CloudIdpIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1CloudIdpIdTestGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupTestSearchResponse
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1CloudIdpIdTestGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1CloudIdpIdTestGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1CloudIdpIdTestUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserTestSearchResponse
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1CloudIdpIdTestUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1CloudIdpIdTestUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1CloudIdpIdTestUserMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembershipTestSearchResponse
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1CloudIdpIdTestUserMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1CloudIdpIdTestUserMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ComputerInventoryCollectionSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerInventoryCollectionSettings
}

// Status returns HTTPResponse.Status
func (r GetV1ComputerInventoryCollectionSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ComputerInventoryCollectionSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ComputerInventoryCollectionSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerInventoryCollectionSettings
}

// Status returns HTTPResponse.Status
func (r PatchV1ComputerInventoryCollectionSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ComputerInventoryCollectionSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ComputerInventoryCollectionSettingsCustomPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1ComputerInventoryCollectionSettingsCustomPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ComputerInventoryCollectionSettingsCustomPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ComputerInventoryCollectionSettingsCustomPathIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1ComputerInventoryCollectionSettingsCustomPathIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ComputerInventoryCollectionSettingsCustomPathIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ComputerPrestagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerPrestageSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1ComputerPrestagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ComputerPrestagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ComputerPrestagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GetComputerPrestage
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1ComputerPrestagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ComputerPrestagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ComputerPrestagesScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScope
}

// Status returns HTTPResponse.Status
func (r GetV1ComputerPrestagesScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ComputerPrestagesScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ComputerPrestagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1ComputerPrestagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ComputerPrestagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ComputerPrestagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetComputerPrestage
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1ComputerPrestagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ComputerPrestagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ComputerPrestagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetComputerPrestage
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1ComputerPrestagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ComputerPrestagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ComputerPrestagesIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponse
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1ComputerPrestagesIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ComputerPrestagesIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ComputerPrestagesIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponse
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1ComputerPrestagesIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ComputerPrestagesIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ComputerPrestagesIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponse
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1ComputerPrestagesIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ComputerPrestagesIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ComputerPrestagesIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponse
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1ComputerPrestagesIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ComputerPrestagesIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ComputersInventoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerInventorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1ComputersInventoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ComputersInventoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ComputersInventoryDetailIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerInventory
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1ComputersInventoryDetailIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ComputersInventoryDetailIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1ComputersInventoryDetailIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerInventory
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PatchV1ComputersInventoryDetailIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1ComputersInventoryDetailIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ComputersInventoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1ComputersInventoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ComputersInventoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ComputersInventoryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerInventory
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1ComputersInventoryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ComputersInventoryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ComputersInventoryIdAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1ComputersInventoryIdAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ComputersInventoryIdAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ComputersInventoryIdAttachmentsAttachmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1ComputersInventoryIdAttachmentsAttachmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ComputersInventoryIdAttachmentsAttachmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ComputersInventoryIdAttachmentsAttachmentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1ComputersInventoryIdAttachmentsAttachmentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ComputersInventoryIdAttachmentsAttachmentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ComputersInventoryIdViewRecoveryLockPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerInventoryRecoveryLockPasswordResponse
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1ComputersInventoryIdViewRecoveryLockPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ComputersInventoryIdViewRecoveryLockPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ComputersIdRecalculateSmartGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecalculationResults
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1ComputersIdRecalculateSmartGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ComputersIdRecalculateSmartGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeviceComplianceInformation
}

// Status returns HTTPResponse.Status
func (r GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeviceComplianceInformation
}

// Status returns HTTPResponse.Status
func (r GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1CsaTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1CsaTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1CsaTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1CsaTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CsaToken
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1CsaTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1CsaTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1CsaTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CsaToken
	JSON403      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1CsaTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1CsaTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1CsaTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CsaToken
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1CsaTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1CsaTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DepartmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DepartmentsSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1DepartmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DepartmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1DepartmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
}

// Status returns HTTPResponse.Status
func (r PostV1DepartmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1DepartmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1DepartmentsDeleteMultipleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1DepartmentsDeleteMultipleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1DepartmentsDeleteMultipleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1DepartmentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1DepartmentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1DepartmentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DepartmentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Department
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1DepartmentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DepartmentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1DepartmentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Department
}

// Status returns HTTPResponse.Status
func (r PutV1DepartmentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1DepartmentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DepartmentsIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1DepartmentsIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DepartmentsIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1DepartmentsIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON404      *ApiError
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1DepartmentsIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1DepartmentsIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1DeployPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VerbosePackageDeploymentResponse
}

// Status returns HTTPResponse.Status
func (r PostV1DeployPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1DeployPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DeviceCommunicationSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceCommunicationSettings
}

// Status returns HTTPResponse.Status
func (r GetV1DeviceCommunicationSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DeviceCommunicationSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1DeviceCommunicationSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceCommunicationSettings
}

// Status returns HTTPResponse.Status
func (r PutV1DeviceCommunicationSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1DeviceCommunicationSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DeviceCommunicationSettingsHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1DeviceCommunicationSettingsHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DeviceCommunicationSettingsHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1DeviceCommunicationSettingsHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1DeviceCommunicationSettingsHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1DeviceCommunicationSettingsHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DeviceEnrollmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceEnrollmentInstanceSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1DeviceEnrollmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DeviceEnrollmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DeviceEnrollmentsPublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV1DeviceEnrollmentsPublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DeviceEnrollmentsPublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DeviceEnrollmentsSyncsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeviceEnrollmentInstanceSyncStatus
}

// Status returns HTTPResponse.Status
func (r GetV1DeviceEnrollmentsSyncsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DeviceEnrollmentsSyncsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1DeviceEnrollmentsUploadTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1DeviceEnrollmentsUploadTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1DeviceEnrollmentsUploadTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1DeviceEnrollmentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1DeviceEnrollmentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1DeviceEnrollmentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DeviceEnrollmentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceEnrollmentInstance
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1DeviceEnrollmentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DeviceEnrollmentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1DeviceEnrollmentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceEnrollmentInstance
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1DeviceEnrollmentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1DeviceEnrollmentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DeviceEnrollmentsIdDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceEnrollmentDeviceSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1DeviceEnrollmentsIdDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DeviceEnrollmentsIdDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1DeviceEnrollmentsIdDisownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceEnrollmentDisownResponse
}

// Status returns HTTPResponse.Status
func (r PostV1DeviceEnrollmentsIdDisownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1DeviceEnrollmentsIdDisownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DeviceEnrollmentsIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1DeviceEnrollmentsIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DeviceEnrollmentsIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1DeviceEnrollmentsIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1DeviceEnrollmentsIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1DeviceEnrollmentsIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DeviceEnrollmentsIdSyncsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DeviceEnrollmentInstanceSyncStatus
}

// Status returns HTTPResponse.Status
func (r GetV1DeviceEnrollmentsIdSyncsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DeviceEnrollmentsIdSyncsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DeviceEnrollmentsIdSyncsLatestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceEnrollmentInstanceSyncStatus
}

// Status returns HTTPResponse.Status
func (r GetV1DeviceEnrollmentsIdSyncsLatestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DeviceEnrollmentsIdSyncsLatestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1DeviceEnrollmentsIdUploadTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceEnrollmentInstance
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1DeviceEnrollmentsIdUploadTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1DeviceEnrollmentsIdUploadTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EbooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EbookSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1EbooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EbooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EbooksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ebook
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1EbooksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EbooksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EbooksIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EbookScope
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1EbooksIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EbooksIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EngageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Engage
}

// Status returns HTTPResponse.Status
func (r GetV1EngageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EngageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1EngageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Engage
}

// Status returns HTTPResponse.Status
func (r PutV1EngageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1EngageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EngageHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1EngageHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EngageHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1EngageHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1EngageHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1EngageHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentSettings
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1EnrollmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentSettings
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1EnrollmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1EnrollmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentCustomizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentCustomizationSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentCustomizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentCustomizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1EnrollmentCustomizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GetEnrollmentCustomization
}

// Status returns HTTPResponse.Status
func (r PostV1EnrollmentCustomizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1EnrollmentCustomizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1EnrollmentCustomizationImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BrandingImageUrl
}

// Status returns HTTPResponse.Status
func (r PostV1EnrollmentCustomizationImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1EnrollmentCustomizationImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1EnrollmentCustomizationParseMarkdownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Markdown
}

// Status returns HTTPResponse.Status
func (r PostV1EnrollmentCustomizationParseMarkdownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1EnrollmentCustomizationParseMarkdownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1EnrollmentCustomizationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1EnrollmentCustomizationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1EnrollmentCustomizationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentCustomizationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEnrollmentCustomization
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentCustomizationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentCustomizationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1EnrollmentCustomizationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEnrollmentCustomization
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1EnrollmentCustomizationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1EnrollmentCustomizationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentCustomizationIdAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentCustomizationPanelList
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentCustomizationIdAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentCustomizationIdAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1EnrollmentCustomizationIdAllPanelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1EnrollmentCustomizationIdAllPanelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1EnrollmentCustomizationIdAllPanelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentCustomizationIdAllPanelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEnrollmentCustomizationPanel
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentCustomizationIdAllPanelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentCustomizationIdAllPanelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentCustomizationIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentCustomizationIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentCustomizationIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1EnrollmentCustomizationIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1EnrollmentCustomizationIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1EnrollmentCustomizationIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1EnrollmentCustomizationIdLdapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GetEnrollmentCustomizationPanelLdapAuth
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1EnrollmentCustomizationIdLdapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1EnrollmentCustomizationIdLdapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1EnrollmentCustomizationIdLdapPanelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1EnrollmentCustomizationIdLdapPanelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1EnrollmentCustomizationIdLdapPanelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentCustomizationIdLdapPanelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEnrollmentCustomizationPanelLdapAuth
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentCustomizationIdLdapPanelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentCustomizationIdLdapPanelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1EnrollmentCustomizationIdLdapPanelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEnrollmentCustomizationPanelLdapAuth
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1EnrollmentCustomizationIdLdapPanelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1EnrollmentCustomizationIdLdapPanelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentCustomizationIdPrestagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageDependencies
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentCustomizationIdPrestagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentCustomizationIdPrestagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1EnrollmentCustomizationIdSsoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GetEnrollmentCustomizationPanelSsoAuth
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1EnrollmentCustomizationIdSsoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1EnrollmentCustomizationIdSsoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1EnrollmentCustomizationIdSsoPanelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1EnrollmentCustomizationIdSsoPanelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1EnrollmentCustomizationIdSsoPanelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentCustomizationIdSsoPanelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEnrollmentCustomizationPanelSsoAuth
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentCustomizationIdSsoPanelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentCustomizationIdSsoPanelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1EnrollmentCustomizationIdSsoPanelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEnrollmentCustomizationPanelSsoAuth
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1EnrollmentCustomizationIdSsoPanelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1EnrollmentCustomizationIdSsoPanelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1EnrollmentCustomizationIdTextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GetEnrollmentCustomizationPanelText
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1EnrollmentCustomizationIdTextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1EnrollmentCustomizationIdTextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1EnrollmentCustomizationIdTextPanelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1EnrollmentCustomizationIdTextPanelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1EnrollmentCustomizationIdTextPanelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentCustomizationIdTextPanelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEnrollmentCustomizationPanelText
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentCustomizationIdTextPanelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentCustomizationIdTextPanelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1EnrollmentCustomizationIdTextPanelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetEnrollmentCustomizationPanelText
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1EnrollmentCustomizationIdTextPanelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1EnrollmentCustomizationIdTextPanelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentCustomizationIdTextPanelIdMarkdownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Markdown
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentCustomizationIdTextPanelIdMarkdownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentCustomizationIdTextPanelIdMarkdownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentAccessGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessGroupsSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentAccessGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentAccessGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1EnrollmentAccessGroupsGroupKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1EnrollmentAccessGroupsGroupKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1EnrollmentAccessGroupsGroupKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentAccessGroupsGroupKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentAccessGroup
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentAccessGroupsGroupKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentAccessGroupsGroupKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1EnrollmentAccessGroupsGroupKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentAccessGroup
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1EnrollmentAccessGroupsGroupKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1EnrollmentAccessGroupsGroupKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentFilteredLanguageCodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LanguageCode
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentFilteredLanguageCodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentFilteredLanguageCodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1EnrollmentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1EnrollmentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1EnrollmentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentLanguageCodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LanguageCode
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentLanguageCodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentLanguageCodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentLanguagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProcessTextsSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentLanguagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentLanguagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1EnrollmentLanguagesLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1EnrollmentLanguagesLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1EnrollmentLanguagesLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1EnrollmentLanguagesLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentProcessTextObject
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1EnrollmentLanguagesLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1EnrollmentLanguagesLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1EnrollmentLanguagesLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentProcessTextObject
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1EnrollmentLanguagesLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1EnrollmentLanguagesLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IconResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IconResponse
	JSON400      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1IconResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IconResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1IconIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IconResponse
}

// Status returns HTTPResponse.Status
func (r GetV1IconIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1IconIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1InventoryInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryInformation
}

// Status returns HTTPResponse.Status
func (r GetV1InventoryInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1InventoryInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1InventoryPreloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1InventoryPreloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1InventoryPreloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1InventoryPreloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryPreloadRecordSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1InventoryPreloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1InventoryPreloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1InventoryPreloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InventoryPreloadRecord
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1InventoryPreloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1InventoryPreloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1InventoryPreloadCsvTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV1InventoryPreloadCsvTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1InventoryPreloadCsvTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1InventoryPreloadHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1InventoryPreloadHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1InventoryPreloadHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1InventoryPreloadHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1InventoryPreloadHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1InventoryPreloadHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1InventoryPreloadValidateCsvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryPreloadCsvValidationSuccess
	JSON412      *InventoryPreloadInvalidCsvResponse
}

// Status returns HTTPResponse.Status
func (r PostV1InventoryPreloadValidateCsvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1InventoryPreloadValidateCsvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1InventoryPreloadIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1InventoryPreloadIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1InventoryPreloadIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1InventoryPreloadIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryPreloadRecord
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1InventoryPreloadIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1InventoryPreloadIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1InventoryPreloadIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryPreloadRecord
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1InventoryPreloadIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1InventoryPreloadIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JamfConnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1JamfConnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JamfConnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JamfConnectConfigProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LinkedConnectProfileSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1JamfConnectConfigProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JamfConnectConfigProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1JamfConnectConfigProfilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LinkedConnectProfile
}

// Status returns HTTPResponse.Status
func (r PutV1JamfConnectConfigProfilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1JamfConnectConfigProfilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JamfConnectDeploymentsIdTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentTaskSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1JamfConnectDeploymentsIdTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JamfConnectDeploymentsIdTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1JamfConnectDeploymentsIdTasksRetryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1JamfConnectDeploymentsIdTasksRetryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1JamfConnectDeploymentsIdTasksRetryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JamfConnectHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1JamfConnectHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JamfConnectHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1JamfConnectHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1JamfConnectHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1JamfConnectHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1JamfManagementFrameworkRedeployIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *RedeployJamfManagementFrameworkResponse
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1JamfManagementFrameworkRedeployIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1JamfManagementFrameworkRedeployIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JamfPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]JamfPackageResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1JamfPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JamfPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JamfProInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JamfProInformation
}

// Status returns HTTPResponse.Status
func (r GetV1JamfProInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JamfProInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JamfProServerUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JamfProServerUrl
}

// Status returns HTTPResponse.Status
func (r GetV1JamfProServerUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JamfProServerUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1JamfProServerUrlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JamfProServerUrl
	JSON403      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1JamfProServerUrlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1JamfProServerUrlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JamfProServerUrlHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1JamfProServerUrlHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JamfProServerUrlHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1JamfProServerUrlHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON403      *ApiError
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1JamfProServerUrlHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1JamfProServerUrlHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JamfProVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JamfProVersion
}

// Status returns HTTPResponse.Status
func (r GetV1JamfProVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JamfProVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1JamfProtectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1JamfProtectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1JamfProtectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JamfProtectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProtectSettingsResponse
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1JamfProtectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JamfProtectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1JamfProtectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProtectSettingsResponse
}

// Status returns HTTPResponse.Status
func (r PutV1JamfProtectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1JamfProtectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JamfProtectDeploymentsIdTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentTaskSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1JamfProtectDeploymentsIdTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JamfProtectDeploymentsIdTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1JamfProtectDeploymentsIdTasksRetryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1JamfProtectDeploymentsIdTasksRetryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1JamfProtectDeploymentsIdTasksRetryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JamfProtectHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1JamfProtectHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JamfProtectHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1JamfProtectHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1JamfProtectHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1JamfProtectHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1JamfProtectPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlanSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1JamfProtectPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1JamfProtectPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1JamfProtectPlansSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1JamfProtectPlansSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1JamfProtectPlansSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1JamfProtectRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProtectSettingsResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1JamfProtectRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1JamfProtectRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1LdapKeystoreVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudLdapKeystore
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1LdapKeystoreVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1LdapKeystoreVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1LdapGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LdapGroupSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1LdapGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1LdapGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1LdapLdapServersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LdapServer
}

// Status returns HTTPResponse.Status
func (r GetV1LdapLdapServersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1LdapLdapServersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1LdapServersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LdapServer
}

// Status returns HTTPResponse.Status
func (r GetV1LdapServersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1LdapServersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1LocalesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Locale
}

// Status returns HTTPResponse.Status
func (r GetV1LocalesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1LocalesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MacosManagedSoftwareUpdatesAvailableUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AvailableUpdates
}

// Status returns HTTPResponse.Status
func (r GetV1MacosManagedSoftwareUpdatesAvailableUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MacosManagedSoftwareUpdatesAvailableUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MacosManagedSoftwareUpdatesSendUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MacOsManagedSoftwareUpdateResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1MacosManagedSoftwareUpdatesSendUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MacosManagedSoftwareUpdatesSendUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MdmCommandsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MdmCommand
	JSON414      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1MdmCommandsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MdmCommandsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MdmRenewProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *RenewMdmProfileResponse
}

// Status returns HTTPResponse.Status
func (r PostV1MdmRenewProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MdmRenewProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MobileDeviceEnrollmentProfileIdDownloadProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV1MobileDeviceEnrollmentProfileIdDownloadProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MobileDeviceEnrollmentProfileIdDownloadProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MobileDeviceGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MobileDeviceGroup
}

// Status returns HTTPResponse.Status
func (r GetV1MobileDeviceGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MobileDeviceGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MobileDevicePrestagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileDevicePrestageSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1MobileDevicePrestagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MobileDevicePrestagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MobileDevicePrestagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *GetMobileDevicePrestage
}

// Status returns HTTPResponse.Status
func (r PostV1MobileDevicePrestagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MobileDevicePrestagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MobileDevicePrestagesScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScope
}

// Status returns HTTPResponse.Status
func (r GetV1MobileDevicePrestagesScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MobileDevicePrestagesScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MobileDevicePrestagesSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PrestageSyncStatus
}

// Status returns HTTPResponse.Status
func (r GetV1MobileDevicePrestagesSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MobileDevicePrestagesSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MobileDevicePrestagesSyncIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PrestageSyncStatus
}

// Status returns HTTPResponse.Status
func (r GetV1MobileDevicePrestagesSyncIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MobileDevicePrestagesSyncIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MobileDevicePrestagesSyncIdLatestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageSyncStatus
}

// Status returns HTTPResponse.Status
func (r GetV1MobileDevicePrestagesSyncIdLatestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MobileDevicePrestagesSyncIdLatestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1MobileDevicePrestagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1MobileDevicePrestagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1MobileDevicePrestagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MobileDevicePrestagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMobileDevicePrestage
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1MobileDevicePrestagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MobileDevicePrestagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1MobileDevicePrestagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMobileDevicePrestage
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1MobileDevicePrestagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1MobileDevicePrestagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1MobileDevicePrestagesIdAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1MobileDevicePrestagesIdAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1MobileDevicePrestagesIdAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MobileDevicePrestagesIdAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FileAttachment
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1MobileDevicePrestagesIdAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MobileDevicePrestagesIdAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MobileDevicePrestagesIdAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PrestageFileAttachment
	JSON404      *ApiError
	JSON413      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1MobileDevicePrestagesIdAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MobileDevicePrestagesIdAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MobileDevicePrestagesIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1MobileDevicePrestagesIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MobileDevicePrestagesIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MobileDevicePrestagesIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1MobileDevicePrestagesIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MobileDevicePrestagesIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1MobileDevicePrestagesIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponse
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1MobileDevicePrestagesIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1MobileDevicePrestagesIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MobileDevicePrestagesIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponse
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1MobileDevicePrestagesIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MobileDevicePrestagesIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MobileDevicePrestagesIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponse
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1MobileDevicePrestagesIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MobileDevicePrestagesIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1MobileDevicePrestagesIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponse
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1MobileDevicePrestagesIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1MobileDevicePrestagesIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MobileDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MobileDevice
}

// Status returns HTTPResponse.Status
func (r GetV1MobileDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MobileDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MobileDevicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileDevice
}

// Status returns HTTPResponse.Status
func (r GetV1MobileDevicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MobileDevicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1MobileDevicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileDeviceDetails
}

// Status returns HTTPResponse.Status
func (r PatchV1MobileDevicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1MobileDevicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1MobileDevicesIdDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileDeviceDetails
}

// Status returns HTTPResponse.Status
func (r GetV1MobileDevicesIdDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1MobileDevicesIdDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MobileDevicesIdRecalculateSmartGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecalculationResults
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1MobileDevicesIdRecalculateSmartGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MobileDevicesIdRecalculateSmartGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1NotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NotificationV1
}

// Status returns HTTPResponse.Status
func (r GetV1NotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1NotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1NotificationsTypeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1NotificationsTypeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1NotificationsTypeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ParentAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ParentApp
}

// Status returns HTTPResponse.Status
func (r GetV1ParentAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ParentAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ParentAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ParentApp
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1ParentAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ParentAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ParentAppHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1ParentAppHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ParentAppHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ParentAppHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1ParentAppHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ParentAppHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PkiCertificateAuthorityActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateRecord
}

// Status returns HTTPResponse.Status
func (r GetV1PkiCertificateAuthorityActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PkiCertificateAuthorityActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PkiCertificateAuthorityActiveDerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV1PkiCertificateAuthorityActiveDerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PkiCertificateAuthorityActiveDerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PkiCertificateAuthorityActivePemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV1PkiCertificateAuthorityActivePemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PkiCertificateAuthorityActivePemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PkiCertificateAuthorityIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateRecord
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1PkiCertificateAuthorityIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PkiCertificateAuthorityIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PkiCertificateAuthorityIdDerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1PkiCertificateAuthorityIdDerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PkiCertificateAuthorityIdDerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PkiCertificateAuthorityIdPemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1PkiCertificateAuthorityIdPemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PkiCertificateAuthorityIdPemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1PkiVenafiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1PkiVenafiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1PkiVenafiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1PkiVenafiIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1PkiVenafiIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1PkiVenafiIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PkiVenafiIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VenafiCaRecord
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1PkiVenafiIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PkiVenafiIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1PkiVenafiIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VenafiCaRecord
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PatchV1PkiVenafiIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1PkiVenafiIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PkiVenafiIdConnectionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VenafiServiceStatus
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1PkiVenafiIdConnectionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PkiVenafiIdConnectionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PkiVenafiIdDependentProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VenafiPkiPayloadRecordSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1PkiVenafiIdDependentProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PkiVenafiIdDependentProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PkiVenafiIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1PkiVenafiIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PkiVenafiIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1PkiVenafiIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON404      *ApiError
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1PkiVenafiIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1PkiVenafiIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PkiVenafiIdJamfPublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1PkiVenafiIdJamfPublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PkiVenafiIdJamfPublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1PkiVenafiIdJamfPublicKeyRegenerateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1PkiVenafiIdJamfPublicKeyRegenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1PkiVenafiIdJamfPublicKeyRegenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1PkiVenafiIdProxyTrustStoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1PkiVenafiIdProxyTrustStoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1PkiVenafiIdProxyTrustStoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PkiVenafiIdProxyTrustStoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1PkiVenafiIdProxyTrustStoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PkiVenafiIdProxyTrustStoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1PkiVenafiIdProxyTrustStoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1PkiVenafiIdProxyTrustStoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1PkiVenafiIdProxyTrustStoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1PolicyPropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyPropertiesV1
}

// Status returns HTTPResponse.Status
func (r GetV1PolicyPropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1PolicyPropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1PolicyPropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyPropertiesV1
}

// Status returns HTTPResponse.Status
func (r PutV1PolicyPropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1PolicyPropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ReenrollmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Reenrollment
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1ReenrollmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ReenrollmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ReenrollmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Reenrollment
}

// Status returns HTTPResponse.Status
func (r PutV1ReenrollmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ReenrollmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ReenrollmentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1ReenrollmentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ReenrollmentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ReenrollmentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1ReenrollmentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ReenrollmentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ReenrollmentHistoryExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1ReenrollmentHistoryExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ReenrollmentHistoryExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ScriptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScriptsSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1ScriptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ScriptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ScriptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
}

// Status returns HTTPResponse.Status
func (r PostV1ScriptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ScriptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ScriptsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1ScriptsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ScriptsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ScriptsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Script
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1ScriptsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ScriptsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1ScriptsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Script
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1ScriptsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1ScriptsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ScriptsIdDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1ScriptsIdDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ScriptsIdDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ScriptsIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1ScriptsIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ScriptsIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ScriptsIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON404      *ApiError
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1ScriptsIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ScriptsIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SearchMobileDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileDeviceSearchResults
}

// Status returns HTTPResponse.Status
func (r PostV1SearchMobileDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SearchMobileDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SelfServiceBrandingIosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IosBrandingSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1SelfServiceBrandingIosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SelfServiceBrandingIosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SelfServiceBrandingIosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
}

// Status returns HTTPResponse.Status
func (r PostV1SelfServiceBrandingIosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SelfServiceBrandingIosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1SelfServiceBrandingIosIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1SelfServiceBrandingIosIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1SelfServiceBrandingIosIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SelfServiceBrandingIosIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IosBrandingConfiguration
}

// Status returns HTTPResponse.Status
func (r GetV1SelfServiceBrandingIosIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SelfServiceBrandingIosIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1SelfServiceBrandingIosIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IosBrandingConfiguration
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1SelfServiceBrandingIosIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1SelfServiceBrandingIosIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SelfServiceBrandingMacosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MacOsBrandingSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1SelfServiceBrandingMacosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SelfServiceBrandingMacosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SelfServiceBrandingMacosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
}

// Status returns HTTPResponse.Status
func (r PostV1SelfServiceBrandingMacosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SelfServiceBrandingMacosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1SelfServiceBrandingMacosIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1SelfServiceBrandingMacosIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1SelfServiceBrandingMacosIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SelfServiceBrandingMacosIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MacOsBrandingConfiguration
}

// Status returns HTTPResponse.Status
func (r GetV1SelfServiceBrandingMacosIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SelfServiceBrandingMacosIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1SelfServiceBrandingMacosIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MacOsBrandingConfiguration
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1SelfServiceBrandingMacosIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1SelfServiceBrandingMacosIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SelfServiceSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SelfServiceSettings
}

// Status returns HTTPResponse.Status
func (r GetV1SelfServiceSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SelfServiceSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1SelfServiceSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SelfServiceSettings
}

// Status returns HTTPResponse.Status
func (r PutV1SelfServiceSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1SelfServiceSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]V1Site
}

// Status returns HTTPResponse.Status
func (r GetV1SitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SmartComputerGroupsIdRecalculateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecalculationResults
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1SmartComputerGroupsIdRecalculateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SmartComputerGroupsIdRecalculateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SmartMobileDeviceGroupsIdRecalculateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecalculationResults
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1SmartMobileDeviceGroupsIdRecalculateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SmartMobileDeviceGroupsIdRecalculateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SmartUserGroupsIdRecalculateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecalculationResults
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1SmartUserGroupsIdRecalculateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SmartUserGroupsIdRecalculateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SsoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoSettings
}

// Status returns HTTPResponse.Status
func (r GetV1SsoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SsoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1SsoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoSettings
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1SsoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1SsoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1SsoCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1SsoCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1SsoCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SsoCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoKeystoreWithDetails
}

// Status returns HTTPResponse.Status
func (r GetV1SsoCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SsoCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SsoCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoKeystoreWithDetails
}

// Status returns HTTPResponse.Status
func (r PostV1SsoCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SsoCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1SsoCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoKeystoreWithDetails
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1SsoCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1SsoCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SsoCertDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV1SsoCertDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SsoCertDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SsoCertParseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoKeystoreCertParseResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1SsoCertParseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SsoCertParseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SsoDependenciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentCustomizationDependencies
}

// Status returns HTTPResponse.Status
func (r GetV1SsoDependenciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SsoDependenciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SsoDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1SsoDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SsoDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SsoHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1SsoHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SsoHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SsoHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1SsoHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SsoHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SsoMetadataDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV1SsoMetadataDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SsoMetadataDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SsoValidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1SsoValidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SsoValidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1StaticUserGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StaticUserGroup
}

// Status returns HTTPResponse.Status
func (r GetV1StaticUserGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1StaticUserGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1StaticUserGroupsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StaticUserGroup
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1StaticUserGroupsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1StaticUserGroupsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SupervisionIdentitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SupervisionIdentitySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1SupervisionIdentitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SupervisionIdentitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SupervisionIdentitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SupervisionIdentity
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1SupervisionIdentitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SupervisionIdentitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SupervisionIdentitiesUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SupervisionIdentity
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1SupervisionIdentitiesUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SupervisionIdentitiesUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1SupervisionIdentitiesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1SupervisionIdentitiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1SupervisionIdentitiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SupervisionIdentitiesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SupervisionIdentity
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1SupervisionIdentitiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SupervisionIdentitiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1SupervisionIdentitiesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SupervisionIdentity
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1SupervisionIdentitiesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1SupervisionIdentitiesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SupervisionIdentitiesIdDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1SupervisionIdentitiesIdDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SupervisionIdentitiesIdDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SystemInitializeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1SystemInitializeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SystemInitializeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SystemInitializeDatabaseConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON429      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1SystemInitializeDatabaseConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SystemInitializeDatabaseConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1TeacherAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeacherSettingsResponse
}

// Status returns HTTPResponse.Status
func (r GetV1TeacherAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1TeacherAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1TeacherAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeacherSettingsResponse
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1TeacherAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1TeacherAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1TeacherAppHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV1TeacherAppHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1TeacherAppHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1TeacherAppHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1TeacherAppHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1TeacherAppHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1TimeZonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TimeZone
}

// Status returns HTTPResponse.Status
func (r GetV1TimeZonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1TimeZonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1UserPreferencesKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1UserPreferencesKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1UserPreferencesKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1UserPreferencesKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPreferencesJson
}

// Status returns HTTPResponse.Status
func (r GetV1UserPreferencesKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1UserPreferencesKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1UserPreferencesKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPreferencesJson
}

// Status returns HTTPResponse.Status
func (r PutV1UserPreferencesKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1UserPreferencesKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1UsersIdRecalculateSmartGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecalculationResults
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1UsersIdRecalculateSmartGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1UsersIdRecalculateSmartGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1VolumePurchasingLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumePurchasingLocations
}

// Status returns HTTPResponse.Status
func (r GetV1VolumePurchasingLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1VolumePurchasingLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1VolumePurchasingLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1VolumePurchasingLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1VolumePurchasingLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1VolumePurchasingLocationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1VolumePurchasingLocationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1VolumePurchasingLocationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1VolumePurchasingLocationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumePurchasingLocation
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1VolumePurchasingLocationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1VolumePurchasingLocationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV1VolumePurchasingLocationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumePurchasingLocation
	JSON400      *ApiError
	JSON404      *ApiError
	JSON422      *ApiError
}

// Status returns HTTPResponse.Status
func (r PatchV1VolumePurchasingLocationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV1VolumePurchasingLocationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1VolumePurchasingLocationsIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1VolumePurchasingLocationsIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1VolumePurchasingLocationsIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1VolumePurchasingLocationsIdReclaimResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1VolumePurchasingLocationsIdReclaimResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1VolumePurchasingLocationsIdReclaimResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1VolumePurchasingLocationsIdRevokeLicensesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1VolumePurchasingLocationsIdRevokeLicensesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1VolumePurchasingLocationsIdRevokeLicensesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1VolumePurchasingSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumePurchasingSubscriptions
}

// Status returns HTTPResponse.Status
func (r GetV1VolumePurchasingSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1VolumePurchasingSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1VolumePurchasingSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON400      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV1VolumePurchasingSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1VolumePurchasingSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1VolumePurchasingSubscriptionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV1VolumePurchasingSubscriptionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1VolumePurchasingSubscriptionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1VolumePurchasingSubscriptionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumePurchasingSubscription
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV1VolumePurchasingSubscriptionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1VolumePurchasingSubscriptionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1VolumePurchasingSubscriptionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VolumePurchasingSubscription
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV1VolumePurchasingSubscriptionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1VolumePurchasingSubscriptionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CheckInResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientCheckInV2
}

// Status returns HTTPResponse.Status
func (r GetV2CheckInResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CheckInResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2CheckInResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientCheckInV2
}

// Status returns HTTPResponse.Status
func (r PutV2CheckInResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2CheckInResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CheckInHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResultsV1
}

// Status returns HTTPResponse.Status
func (r GetV2CheckInHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CheckInHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2CheckInHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2CheckInHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2CheckInHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2CloudLdapsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2CloudLdapsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2CloudLdapsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CloudLdapsDefaultsProviderMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudLdapMappingsResponse
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2CloudLdapsDefaultsProviderMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CloudLdapsDefaultsProviderMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CloudLdapsDefaultsProviderServerConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudLdapServerResponse
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2CloudLdapsDefaultsProviderServerConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CloudLdapsDefaultsProviderServerConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2CloudLdapsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV2CloudLdapsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2CloudLdapsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CloudLdapsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LdapConfigurationResponse
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2CloudLdapsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CloudLdapsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2CloudLdapsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LdapConfigurationResponse
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV2CloudLdapsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2CloudLdapsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CloudLdapsIdConnectionBindResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudLdapConnectionPoolStatistics
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2CloudLdapsIdConnectionBindResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CloudLdapsIdConnectionBindResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CloudLdapsIdConnectionSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudLdapConnectionPoolStatistics
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2CloudLdapsIdConnectionSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CloudLdapsIdConnectionSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CloudLdapsIdConnectionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudLdapConnectionStatus
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2CloudLdapsIdConnectionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CloudLdapsIdConnectionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CloudLdapsIdMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudLdapMappingsResponse
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2CloudLdapsIdMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CloudLdapsIdMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2CloudLdapsIdMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudLdapMappingsResponse
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV2CloudLdapsIdMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2CloudLdapsIdMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ComputerPrestagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputerPrestageSearchResultsV2
}

// Status returns HTTPResponse.Status
func (r GetV2ComputerPrestagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ComputerPrestagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2ComputerPrestagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2ComputerPrestagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2ComputerPrestagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ComputerPrestagesScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeV2
}

// Status returns HTTPResponse.Status
func (r GetV2ComputerPrestagesScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ComputerPrestagesScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2ComputerPrestagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV2ComputerPrestagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2ComputerPrestagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ComputerPrestagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetComputerPrestageV2
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2ComputerPrestagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ComputerPrestagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2ComputerPrestagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetComputerPrestageV2
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV2ComputerPrestagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2ComputerPrestagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ComputerPrestagesIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponseV2
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2ComputerPrestagesIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ComputerPrestagesIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2ComputerPrestagesIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponseV2
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2ComputerPrestagesIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2ComputerPrestagesIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2ComputerPrestagesIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponseV2
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV2ComputerPrestagesIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2ComputerPrestagesIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2ComputerPrestagesIdScopeDeleteMultipleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponseV2
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2ComputerPrestagesIdScopeDeleteMultipleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2ComputerPrestagesIdScopeDeleteMultipleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2EnrollmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentSettingsV2
}

// Status returns HTTPResponse.Status
func (r GetV2EnrollmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2EnrollmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2EnrollmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentSettingsV2
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV2EnrollmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2EnrollmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2EnrollmentCustomizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentCustomizationSearchResultsV2
}

// Status returns HTTPResponse.Status
func (r GetV2EnrollmentCustomizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2EnrollmentCustomizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2EnrollmentCustomizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
}

// Status returns HTTPResponse.Status
func (r PostV2EnrollmentCustomizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2EnrollmentCustomizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2EnrollmentCustomizationsImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BrandingImageUrl
}

// Status returns HTTPResponse.Status
func (r PostV2EnrollmentCustomizationsImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2EnrollmentCustomizationsImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2EnrollmentCustomizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV2EnrollmentCustomizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2EnrollmentCustomizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2EnrollmentCustomizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentCustomizationV2
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2EnrollmentCustomizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2EnrollmentCustomizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2EnrollmentCustomizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentCustomizationV2
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV2EnrollmentCustomizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2EnrollmentCustomizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2EnrollmentCustomizationsIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV2EnrollmentCustomizationsIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2EnrollmentCustomizationsIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2EnrollmentCustomizationsIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ObjectHistory
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2EnrollmentCustomizationsIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2EnrollmentCustomizationsIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2EnrollmentCustomizationsIdPrestagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageDependencies
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2EnrollmentCustomizationsIdPrestagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2EnrollmentCustomizationsIdPrestagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2EnrollmentAccessGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessGroupsV2SearchResults
}

// Status returns HTTPResponse.Status
func (r GetV2EnrollmentAccessGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2EnrollmentAccessGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2EnrollmentAccessGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2EnrollmentAccessGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2EnrollmentAccessGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2EnrollmentAccessGroupsServerIdGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV2EnrollmentAccessGroupsServerIdGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2EnrollmentAccessGroupsServerIdGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2EnrollmentAccessGroupsServerIdGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentAccessGroupV2
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2EnrollmentAccessGroupsServerIdGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2EnrollmentAccessGroupsServerIdGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2EnrollmentAccessGroupsServerIdGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentAccessGroupV2
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV2EnrollmentAccessGroupsServerIdGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2EnrollmentAccessGroupsServerIdGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2EnrollmentFilteredLanguageCodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LanguageCode
}

// Status returns HTTPResponse.Status
func (r GetV2EnrollmentFilteredLanguageCodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2EnrollmentFilteredLanguageCodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2EnrollmentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV2EnrollmentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2EnrollmentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2EnrollmentHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2EnrollmentHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2EnrollmentHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2EnrollmentHistoryExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2EnrollmentHistoryExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2EnrollmentHistoryExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2EnrollmentLanguageCodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LanguageCode
}

// Status returns HTTPResponse.Status
func (r GetV2EnrollmentLanguageCodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2EnrollmentLanguageCodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2EnrollmentLanguagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProcessTextsSearchResults
}

// Status returns HTTPResponse.Status
func (r GetV2EnrollmentLanguagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2EnrollmentLanguagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2EnrollmentLanguagesDeleteMultipleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2EnrollmentLanguagesDeleteMultipleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2EnrollmentLanguagesDeleteMultipleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2EnrollmentLanguagesLanguageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV2EnrollmentLanguagesLanguageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2EnrollmentLanguagesLanguageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2EnrollmentLanguagesLanguageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentProcessTextObject
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2EnrollmentLanguagesLanguageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2EnrollmentLanguagesLanguageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2EnrollmentLanguagesLanguageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrollmentProcessTextObject
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV2EnrollmentLanguagesLanguageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2EnrollmentLanguagesLanguageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2InventoryPreloadCsvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2InventoryPreloadCsvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2InventoryPreloadCsvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2InventoryPreloadCsvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]HrefResponse
	JSON400      *InventoryPreloadCsvValidationError
}

// Status returns HTTPResponse.Status
func (r PostV2InventoryPreloadCsvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2InventoryPreloadCsvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2InventoryPreloadCsvTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2InventoryPreloadCsvTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2InventoryPreloadCsvTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2InventoryPreloadCsvValidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryPreloadCsvValidationSuccess
	JSON400      *InventoryPreloadCsvValidationError
}

// Status returns HTTPResponse.Status
func (r PostV2InventoryPreloadCsvValidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2InventoryPreloadCsvValidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2InventoryPreloadEaColumnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryPreloadExtensionAttributeColumnResult
}

// Status returns HTTPResponse.Status
func (r GetV2InventoryPreloadEaColumnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2InventoryPreloadEaColumnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2InventoryPreloadExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2InventoryPreloadExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2InventoryPreloadExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2InventoryPreloadHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV2InventoryPreloadHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2InventoryPreloadHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2InventoryPreloadHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2InventoryPreloadHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2InventoryPreloadHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2InventoryPreloadRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryPreloadRecordSearchResultsV2
}

// Status returns HTTPResponse.Status
func (r GetV2InventoryPreloadRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2InventoryPreloadRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2InventoryPreloadRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2InventoryPreloadRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2InventoryPreloadRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2InventoryPreloadRecordsDeleteAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV2InventoryPreloadRecordsDeleteAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2InventoryPreloadRecordsDeleteAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2InventoryPreloadRecordsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteV2InventoryPreloadRecordsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2InventoryPreloadRecordsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2InventoryPreloadRecordsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryPreloadRecordV2
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2InventoryPreloadRecordsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2InventoryPreloadRecordsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2InventoryPreloadRecordsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryPreloadRecordV2
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV2InventoryPreloadRecordsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2InventoryPreloadRecordsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2JamfPackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JamfApplicationResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2JamfPackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2JamfPackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2JamfProInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JamfProInformationV2
}

// Status returns HTTPResponse.Status
func (r GetV2JamfProInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2JamfProInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MobileDevicePrestagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileDevicePrestageSearchResultsV2
}

// Status returns HTTPResponse.Status
func (r GetV2MobileDevicePrestagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MobileDevicePrestagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2MobileDevicePrestagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
}

// Status returns HTTPResponse.Status
func (r PostV2MobileDevicePrestagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2MobileDevicePrestagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MobileDevicePrestagesScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeV2
}

// Status returns HTTPResponse.Status
func (r GetV2MobileDevicePrestagesScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MobileDevicePrestagesScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MobileDevicePrestagesSyncsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PrestageSyncStatusV2
}

// Status returns HTTPResponse.Status
func (r GetV2MobileDevicePrestagesSyncsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MobileDevicePrestagesSyncsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2MobileDevicePrestagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV2MobileDevicePrestagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2MobileDevicePrestagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MobileDevicePrestagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMobileDevicePrestageV2
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2MobileDevicePrestagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MobileDevicePrestagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2MobileDevicePrestagesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMobileDevicePrestageV2
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV2MobileDevicePrestagesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2MobileDevicePrestagesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MobileDevicePrestagesIdAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FileAttachmentV2
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2MobileDevicePrestagesIdAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MobileDevicePrestagesIdAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2MobileDevicePrestagesIdAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PrestageFileAttachmentV2
	JSON404      *ApiError
	JSON413      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2MobileDevicePrestagesIdAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2MobileDevicePrestagesIdAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MobileDevicePrestagesIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResults
}

// Status returns HTTPResponse.Status
func (r GetV2MobileDevicePrestagesIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MobileDevicePrestagesIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2MobileDevicePrestagesIdHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2MobileDevicePrestagesIdHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2MobileDevicePrestagesIdHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MobileDevicePrestagesIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponseV2
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2MobileDevicePrestagesIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MobileDevicePrestagesIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2MobileDevicePrestagesIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponseV2
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2MobileDevicePrestagesIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2MobileDevicePrestagesIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2MobileDevicePrestagesIdScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponseV2
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV2MobileDevicePrestagesIdScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2MobileDevicePrestagesIdScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2MobileDevicePrestagesIdScopeDeleteMultipleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageScopeResponseV2
	JSON400      *ApiError
	JSON404      *ApiError
	JSON409      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2MobileDevicePrestagesIdScopeDeleteMultipleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2MobileDevicePrestagesIdScopeDeleteMultipleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MobileDevicePrestagesIdSyncsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PrestageSyncStatusV2
}

// Status returns HTTPResponse.Status
func (r GetV2MobileDevicePrestagesIdSyncsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MobileDevicePrestagesIdSyncsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MobileDevicePrestagesIdSyncsLatestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrestageSyncStatusV2
}

// Status returns HTTPResponse.Status
func (r GetV2MobileDevicePrestagesIdSyncsLatestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MobileDevicePrestagesIdSyncsLatestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MobileDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileDeviceSearchResultsV2
}

// Status returns HTTPResponse.Status
func (r GetV2MobileDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MobileDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MobileDevicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileDeviceV2
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2MobileDevicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MobileDevicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchV2MobileDevicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileDeviceDetailsV2
	JSON403      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r PatchV2MobileDevicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchV2MobileDevicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2MobileDevicesIdDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MobileDeviceDetailsGetV2
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetV2MobileDevicesIdDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2MobileDevicesIdDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV2SsoCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV2SsoCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV2SsoCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SsoCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoKeystoreResponseWithDetails
}

// Status returns HTTPResponse.Status
func (r GetV2SsoCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SsoCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2SsoCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoKeystoreResponseWithDetails
}

// Status returns HTTPResponse.Status
func (r PostV2SsoCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2SsoCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV2SsoCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoKeystoreResponseWithDetails
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutV2SsoCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV2SsoCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2SsoCertDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2SsoCertDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2SsoCertDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV2SsoCertParseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SsoKeystoreCertParseResponse
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV2SsoCertParseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV2SsoCertParseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3CheckInResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientCheckInV3
}

// Status returns HTTPResponse.Status
func (r GetV3CheckInResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3CheckInResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV3CheckInResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientCheckInV3
}

// Status returns HTTPResponse.Status
func (r PutV3CheckInResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV3CheckInResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV3CheckInHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HistorySearchResultsV1
}

// Status returns HTTPResponse.Status
func (r GetV3CheckInHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV3CheckInHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV3CheckInHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HrefResponse
	JSON503      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostV3CheckInHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV3CheckInHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVppAdminAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VppAdminAccount
}

// Status returns HTTPResponse.Status
func (r GetVppAdminAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVppAdminAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVppSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VppTokenSubscription
}

// Status returns HTTPResponse.Status
func (r GetVppSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVppSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVppSubscriptionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VppTokenSubscription
}

// Status returns HTTPResponse.Status
func (r GetVppSubscriptionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVppSubscriptionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAuthWithResponse request returning *GetAuthResponse
func (c *ClientWithResponses) GetAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthResponse, error) {
	rsp, err := c.GetAuth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthResponse(rsp)
}

// PostAuthCurrentWithResponse request returning *PostAuthCurrentResponse
func (c *ClientWithResponses) PostAuthCurrentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAuthCurrentResponse, error) {
	rsp, err := c.PostAuthCurrent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthCurrentResponse(rsp)
}

// PostAuthInvalidateTokenWithResponse request returning *PostAuthInvalidateTokenResponse
func (c *ClientWithResponses) PostAuthInvalidateTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAuthInvalidateTokenResponse, error) {
	rsp, err := c.PostAuthInvalidateToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthInvalidateTokenResponse(rsp)
}

// PostAuthKeepAliveWithResponse request returning *PostAuthKeepAliveResponse
func (c *ClientWithResponses) PostAuthKeepAliveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAuthKeepAliveResponse, error) {
	rsp, err := c.PostAuthKeepAlive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthKeepAliveResponse(rsp)
}

// PostAuthTokensWithResponse request returning *PostAuthTokensResponse
func (c *ClientWithResponses) PostAuthTokensWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostAuthTokensResponse, error) {
	rsp, err := c.PostAuthTokens(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthTokensResponse(rsp)
}

// GetDevicesExtensionAttributesWithResponse request returning *GetDevicesExtensionAttributesResponse
func (c *ClientWithResponses) GetDevicesExtensionAttributesWithResponse(ctx context.Context, params *GetDevicesExtensionAttributesParams, reqEditors ...RequestEditorFn) (*GetDevicesExtensionAttributesResponse, error) {
	rsp, err := c.GetDevicesExtensionAttributes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDevicesExtensionAttributesResponse(rsp)
}

// DeleteInventoryPreloadWithResponse request returning *DeleteInventoryPreloadResponse
func (c *ClientWithResponses) DeleteInventoryPreloadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteInventoryPreloadResponse, error) {
	rsp, err := c.DeleteInventoryPreload(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInventoryPreloadResponse(rsp)
}

// GetInventoryPreloadWithResponse request returning *GetInventoryPreloadResponse
func (c *ClientWithResponses) GetInventoryPreloadWithResponse(ctx context.Context, params *GetInventoryPreloadParams, reqEditors ...RequestEditorFn) (*GetInventoryPreloadResponse, error) {
	rsp, err := c.GetInventoryPreload(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInventoryPreloadResponse(rsp)
}

// PostInventoryPreloadWithBodyWithResponse request with arbitrary body returning *PostInventoryPreloadResponse
func (c *ClientWithResponses) PostInventoryPreloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryPreloadResponse, error) {
	rsp, err := c.PostInventoryPreloadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryPreloadResponse(rsp)
}

func (c *ClientWithResponses) PostInventoryPreloadWithResponse(ctx context.Context, body PostInventoryPreloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInventoryPreloadResponse, error) {
	rsp, err := c.PostInventoryPreload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryPreloadResponse(rsp)
}

// GetInventoryPreloadCsvTemplateWithResponse request returning *GetInventoryPreloadCsvTemplateResponse
func (c *ClientWithResponses) GetInventoryPreloadCsvTemplateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInventoryPreloadCsvTemplateResponse, error) {
	rsp, err := c.GetInventoryPreloadCsvTemplate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInventoryPreloadCsvTemplateResponse(rsp)
}

// GetInventoryPreloadHistoryWithResponse request returning *GetInventoryPreloadHistoryResponse
func (c *ClientWithResponses) GetInventoryPreloadHistoryWithResponse(ctx context.Context, params *GetInventoryPreloadHistoryParams, reqEditors ...RequestEditorFn) (*GetInventoryPreloadHistoryResponse, error) {
	rsp, err := c.GetInventoryPreloadHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInventoryPreloadHistoryResponse(rsp)
}

// PostInventoryPreloadHistoryNotesWithBodyWithResponse request with arbitrary body returning *PostInventoryPreloadHistoryNotesResponse
func (c *ClientWithResponses) PostInventoryPreloadHistoryNotesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryPreloadHistoryNotesResponse, error) {
	rsp, err := c.PostInventoryPreloadHistoryNotesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryPreloadHistoryNotesResponse(rsp)
}

func (c *ClientWithResponses) PostInventoryPreloadHistoryNotesWithResponse(ctx context.Context, body PostInventoryPreloadHistoryNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInventoryPreloadHistoryNotesResponse, error) {
	rsp, err := c.PostInventoryPreloadHistoryNotes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryPreloadHistoryNotesResponse(rsp)
}

// PostInventoryPreloadValidateCsvWithBodyWithResponse request with arbitrary body returning *PostInventoryPreloadValidateCsvResponse
func (c *ClientWithResponses) PostInventoryPreloadValidateCsvWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInventoryPreloadValidateCsvResponse, error) {
	rsp, err := c.PostInventoryPreloadValidateCsvWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInventoryPreloadValidateCsvResponse(rsp)
}

// DeleteInventoryPreloadIdWithResponse request returning *DeleteInventoryPreloadIdResponse
func (c *ClientWithResponses) DeleteInventoryPreloadIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteInventoryPreloadIdResponse, error) {
	rsp, err := c.DeleteInventoryPreloadId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInventoryPreloadIdResponse(rsp)
}

// GetInventoryPreloadIdWithResponse request returning *GetInventoryPreloadIdResponse
func (c *ClientWithResponses) GetInventoryPreloadIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetInventoryPreloadIdResponse, error) {
	rsp, err := c.GetInventoryPreloadId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInventoryPreloadIdResponse(rsp)
}

// PutInventoryPreloadIdWithBodyWithResponse request with arbitrary body returning *PutInventoryPreloadIdResponse
func (c *ClientWithResponses) PutInventoryPreloadIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInventoryPreloadIdResponse, error) {
	rsp, err := c.PutInventoryPreloadIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInventoryPreloadIdResponse(rsp)
}

func (c *ClientWithResponses) PutInventoryPreloadIdWithResponse(ctx context.Context, id int, body PutInventoryPreloadIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInventoryPreloadIdResponse, error) {
	rsp, err := c.PutInventoryPreloadId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInventoryPreloadIdResponse(rsp)
}

// GetLdapGroupsWithResponse request returning *GetLdapGroupsResponse
func (c *ClientWithResponses) GetLdapGroupsWithResponse(ctx context.Context, params *GetLdapGroupsParams, reqEditors ...RequestEditorFn) (*GetLdapGroupsResponse, error) {
	rsp, err := c.GetLdapGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLdapGroupsResponse(rsp)
}

// GetLdapServersWithResponse request returning *GetLdapServersResponse
func (c *ClientWithResponses) GetLdapServersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLdapServersResponse, error) {
	rsp, err := c.GetLdapServers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLdapServersResponse(rsp)
}

// GetNotificationsAlertsWithResponse request returning *GetNotificationsAlertsResponse
func (c *ClientWithResponses) GetNotificationsAlertsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNotificationsAlertsResponse, error) {
	rsp, err := c.GetNotificationsAlerts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotificationsAlertsResponse(rsp)
}

// DeleteNotificationsAlertsIdWithResponse request returning *DeleteNotificationsAlertsIdResponse
func (c *ClientWithResponses) DeleteNotificationsAlertsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteNotificationsAlertsIdResponse, error) {
	rsp, err := c.DeleteNotificationsAlertsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNotificationsAlertsIdResponse(rsp)
}

// DeleteNotificationsAlertsTypeIdWithResponse request returning *DeleteNotificationsAlertsTypeIdResponse
func (c *ClientWithResponses) DeleteNotificationsAlertsTypeIdWithResponse(ctx context.Context, pType NotificationType, id int, reqEditors ...RequestEditorFn) (*DeleteNotificationsAlertsTypeIdResponse, error) {
	rsp, err := c.DeleteNotificationsAlertsTypeId(ctx, pType, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNotificationsAlertsTypeIdResponse(rsp)
}

// PostPatchDisclaimerAgreeWithResponse request returning *PostPatchDisclaimerAgreeResponse
func (c *ClientWithResponses) PostPatchDisclaimerAgreeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostPatchDisclaimerAgreeResponse, error) {
	rsp, err := c.PostPatchDisclaimerAgree(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPatchDisclaimerAgreeResponse(rsp)
}

// GetPatchObjPolicyIdWithResponse request returning *GetPatchObjPolicyIdResponse
func (c *ClientWithResponses) GetPatchObjPolicyIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjPolicyIdResponse, error) {
	rsp, err := c.GetPatchObjPolicyId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatchObjPolicyIdResponse(rsp)
}

// GetPatchObjPolicyIdLogsEligibleRetryCountWithResponse request returning *GetPatchObjPolicyIdLogsEligibleRetryCountResponse
func (c *ClientWithResponses) GetPatchObjPolicyIdLogsEligibleRetryCountWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjPolicyIdLogsEligibleRetryCountResponse, error) {
	rsp, err := c.GetPatchObjPolicyIdLogsEligibleRetryCount(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatchObjPolicyIdLogsEligibleRetryCountResponse(rsp)
}

// GetPatchObjPolicyIdSoftwareTitleConfigurationIdWithResponse request returning *GetPatchObjPolicyIdSoftwareTitleConfigurationIdResponse
func (c *ClientWithResponses) GetPatchObjPolicyIdSoftwareTitleConfigurationIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjPolicyIdSoftwareTitleConfigurationIdResponse, error) {
	rsp, err := c.GetPatchObjPolicyIdSoftwareTitleConfigurationId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatchObjPolicyIdSoftwareTitleConfigurationIdResponse(rsp)
}

// GetPatchObjSoftwareTitleIdPoliciesWithResponse request returning *GetPatchObjSoftwareTitleIdPoliciesResponse
func (c *ClientWithResponses) GetPatchObjSoftwareTitleIdPoliciesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjSoftwareTitleIdPoliciesResponse, error) {
	rsp, err := c.GetPatchObjSoftwareTitleIdPolicies(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatchObjSoftwareTitleIdPoliciesResponse(rsp)
}

// GetPatchObjSoftwareTitleConfigurationIdWithResponse request returning *GetPatchObjSoftwareTitleConfigurationIdResponse
func (c *ClientWithResponses) GetPatchObjSoftwareTitleConfigurationIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjSoftwareTitleConfigurationIdResponse, error) {
	rsp, err := c.GetPatchObjSoftwareTitleConfigurationId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatchObjSoftwareTitleConfigurationIdResponse(rsp)
}

// GetPatchObjIdWithResponse request returning *GetPatchObjIdResponse
func (c *ClientWithResponses) GetPatchObjIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjIdResponse, error) {
	rsp, err := c.GetPatchObjId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatchObjIdResponse(rsp)
}

// PutPatchObjIdWithBodyWithResponse request with arbitrary body returning *PutPatchObjIdResponse
func (c *ClientWithResponses) PutPatchObjIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPatchObjIdResponse, error) {
	rsp, err := c.PutPatchObjIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPatchObjIdResponse(rsp)
}

func (c *ClientWithResponses) PutPatchObjIdWithResponse(ctx context.Context, id int, body PutPatchObjIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPatchObjIdResponse, error) {
	rsp, err := c.PutPatchObjId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPatchObjIdResponse(rsp)
}

// GetPatchObjIdVersionsWithResponse request returning *GetPatchObjIdVersionsResponse
func (c *ClientWithResponses) GetPatchObjIdVersionsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjIdVersionsResponse, error) {
	rsp, err := c.GetPatchObjIdVersions(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatchObjIdVersionsResponse(rsp)
}

// GetPatchObjsPolicyIdWithResponse request returning *GetPatchObjsPolicyIdResponse
func (c *ClientWithResponses) GetPatchObjsPolicyIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchObjsPolicyIdResponse, error) {
	rsp, err := c.GetPatchObjsPolicyId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatchObjsPolicyIdResponse(rsp)
}

// GetPatchOnDashboardWithResponse request returning *GetPatchOnDashboardResponse
func (c *ClientWithResponses) GetPatchOnDashboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPatchOnDashboardResponse, error) {
	rsp, err := c.GetPatchOnDashboard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatchOnDashboardResponse(rsp)
}

// GetPatchPatchPoliciesWithResponse request returning *GetPatchPatchPoliciesResponse
func (c *ClientWithResponses) GetPatchPatchPoliciesWithResponse(ctx context.Context, params *GetPatchPatchPoliciesParams, reqEditors ...RequestEditorFn) (*GetPatchPatchPoliciesResponse, error) {
	rsp, err := c.GetPatchPatchPolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatchPatchPoliciesResponse(rsp)
}

// DeletePatchPatchPoliciesIdDashboardWithResponse request returning *DeletePatchPatchPoliciesIdDashboardResponse
func (c *ClientWithResponses) DeletePatchPatchPoliciesIdDashboardWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeletePatchPatchPoliciesIdDashboardResponse, error) {
	rsp, err := c.DeletePatchPatchPoliciesIdDashboard(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePatchPatchPoliciesIdDashboardResponse(rsp)
}

// GetPatchPatchPoliciesIdDashboardWithResponse request returning *GetPatchPatchPoliciesIdDashboardResponse
func (c *ClientWithResponses) GetPatchPatchPoliciesIdDashboardWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchPatchPoliciesIdDashboardResponse, error) {
	rsp, err := c.GetPatchPatchPoliciesIdDashboard(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatchPatchPoliciesIdDashboardResponse(rsp)
}

// PostPatchPatchPoliciesIdDashboardWithResponse request returning *PostPatchPatchPoliciesIdDashboardResponse
func (c *ClientWithResponses) PostPatchPatchPoliciesIdDashboardWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostPatchPatchPoliciesIdDashboardResponse, error) {
	rsp, err := c.PostPatchPatchPoliciesIdDashboard(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPatchPatchPoliciesIdDashboardResponse(rsp)
}

// GetPatchPatchPoliciesIdLogsWithResponse request returning *GetPatchPatchPoliciesIdLogsResponse
func (c *ClientWithResponses) GetPatchPatchPoliciesIdLogsWithResponse(ctx context.Context, id int, params *GetPatchPatchPoliciesIdLogsParams, reqEditors ...RequestEditorFn) (*GetPatchPatchPoliciesIdLogsResponse, error) {
	rsp, err := c.GetPatchPatchPoliciesIdLogs(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatchPatchPoliciesIdLogsResponse(rsp)
}

// PostPatchRetryPolicyWithBodyWithResponse request with arbitrary body returning *PostPatchRetryPolicyResponse
func (c *ClientWithResponses) PostPatchRetryPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPatchRetryPolicyResponse, error) {
	rsp, err := c.PostPatchRetryPolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPatchRetryPolicyResponse(rsp)
}

func (c *ClientWithResponses) PostPatchRetryPolicyWithResponse(ctx context.Context, body PostPatchRetryPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPatchRetryPolicyResponse, error) {
	rsp, err := c.PostPatchRetryPolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPatchRetryPolicyResponse(rsp)
}

// PostPatchSearchActivePatchHistoryWithBodyWithResponse request with arbitrary body returning *PostPatchSearchActivePatchHistoryResponse
func (c *ClientWithResponses) PostPatchSearchActivePatchHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPatchSearchActivePatchHistoryResponse, error) {
	rsp, err := c.PostPatchSearchActivePatchHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPatchSearchActivePatchHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostPatchSearchActivePatchHistoryWithResponse(ctx context.Context, body PostPatchSearchActivePatchHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPatchSearchActivePatchHistoryResponse, error) {
	rsp, err := c.PostPatchSearchActivePatchHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPatchSearchActivePatchHistoryResponse(rsp)
}

// PostPatchSearchPatchPolicyLogsWithBodyWithResponse request with arbitrary body returning *PostPatchSearchPatchPolicyLogsResponse
func (c *ClientWithResponses) PostPatchSearchPatchPolicyLogsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPatchSearchPatchPolicyLogsResponse, error) {
	rsp, err := c.PostPatchSearchPatchPolicyLogsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPatchSearchPatchPolicyLogsResponse(rsp)
}

func (c *ClientWithResponses) PostPatchSearchPatchPolicyLogsWithResponse(ctx context.Context, body PostPatchSearchPatchPolicyLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPatchSearchPatchPolicyLogsResponse, error) {
	rsp, err := c.PostPatchSearchPatchPolicyLogs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPatchSearchPatchPolicyLogsResponse(rsp)
}

// PostPatchSvcDisclaimerAgreeWithResponse request returning *PostPatchSvcDisclaimerAgreeResponse
func (c *ClientWithResponses) PostPatchSvcDisclaimerAgreeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostPatchSvcDisclaimerAgreeResponse, error) {
	rsp, err := c.PostPatchSvcDisclaimerAgree(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPatchSvcDisclaimerAgreeResponse(rsp)
}

// PostPatchSvcRetryPolicyWithBodyWithResponse request with arbitrary body returning *PostPatchSvcRetryPolicyResponse
func (c *ClientWithResponses) PostPatchSvcRetryPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPatchSvcRetryPolicyResponse, error) {
	rsp, err := c.PostPatchSvcRetryPolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPatchSvcRetryPolicyResponse(rsp)
}

func (c *ClientWithResponses) PostPatchSvcRetryPolicyWithResponse(ctx context.Context, body PostPatchSvcRetryPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPatchSvcRetryPolicyResponse, error) {
	rsp, err := c.PostPatchSvcRetryPolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPatchSvcRetryPolicyResponse(rsp)
}

// GetPatchIdWithResponse request returning *GetPatchIdResponse
func (c *ClientWithResponses) GetPatchIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchIdResponse, error) {
	rsp, err := c.GetPatchId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatchIdResponse(rsp)
}

// PutPatchIdWithBodyWithResponse request with arbitrary body returning *PutPatchIdResponse
func (c *ClientWithResponses) PutPatchIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPatchIdResponse, error) {
	rsp, err := c.PutPatchIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPatchIdResponse(rsp)
}

func (c *ClientWithResponses) PutPatchIdWithResponse(ctx context.Context, id int, body PutPatchIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPatchIdResponse, error) {
	rsp, err := c.PutPatchId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPatchIdResponse(rsp)
}

// GetPatchIdVersionsWithResponse request returning *GetPatchIdVersionsResponse
func (c *ClientWithResponses) GetPatchIdVersionsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetPatchIdVersionsResponse, error) {
	rsp, err := c.GetPatchIdVersions(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPatchIdVersionsResponse(rsp)
}

// GetPreviewComputersWithResponse request returning *GetPreviewComputersResponse
func (c *ClientWithResponses) GetPreviewComputersWithResponse(ctx context.Context, params *GetPreviewComputersParams, reqEditors ...RequestEditorFn) (*GetPreviewComputersResponse, error) {
	rsp, err := c.GetPreviewComputers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewComputersResponse(rsp)
}

// GetPreviewEnrollmentAccessGroupsWithResponse request returning *GetPreviewEnrollmentAccessGroupsResponse
func (c *ClientWithResponses) GetPreviewEnrollmentAccessGroupsWithResponse(ctx context.Context, params *GetPreviewEnrollmentAccessGroupsParams, reqEditors ...RequestEditorFn) (*GetPreviewEnrollmentAccessGroupsResponse, error) {
	rsp, err := c.GetPreviewEnrollmentAccessGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewEnrollmentAccessGroupsResponse(rsp)
}

// PostPreviewEnrollmentAccessGroupsWithBodyWithResponse request with arbitrary body returning *PostPreviewEnrollmentAccessGroupsResponse
func (c *ClientWithResponses) PostPreviewEnrollmentAccessGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPreviewEnrollmentAccessGroupsResponse, error) {
	rsp, err := c.PostPreviewEnrollmentAccessGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPreviewEnrollmentAccessGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostPreviewEnrollmentAccessGroupsWithResponse(ctx context.Context, body PostPreviewEnrollmentAccessGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPreviewEnrollmentAccessGroupsResponse, error) {
	rsp, err := c.PostPreviewEnrollmentAccessGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPreviewEnrollmentAccessGroupsResponse(rsp)
}

// DeletePreviewEnrollmentAccessGroupsIdWithResponse request returning *DeletePreviewEnrollmentAccessGroupsIdResponse
func (c *ClientWithResponses) DeletePreviewEnrollmentAccessGroupsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePreviewEnrollmentAccessGroupsIdResponse, error) {
	rsp, err := c.DeletePreviewEnrollmentAccessGroupsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePreviewEnrollmentAccessGroupsIdResponse(rsp)
}

// GetPreviewEnrollmentAccessGroupsIdWithResponse request returning *GetPreviewEnrollmentAccessGroupsIdResponse
func (c *ClientWithResponses) GetPreviewEnrollmentAccessGroupsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPreviewEnrollmentAccessGroupsIdResponse, error) {
	rsp, err := c.GetPreviewEnrollmentAccessGroupsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewEnrollmentAccessGroupsIdResponse(rsp)
}

// PutPreviewEnrollmentAccessGroupsIdWithBodyWithResponse request with arbitrary body returning *PutPreviewEnrollmentAccessGroupsIdResponse
func (c *ClientWithResponses) PutPreviewEnrollmentAccessGroupsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPreviewEnrollmentAccessGroupsIdResponse, error) {
	rsp, err := c.PutPreviewEnrollmentAccessGroupsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPreviewEnrollmentAccessGroupsIdResponse(rsp)
}

func (c *ClientWithResponses) PutPreviewEnrollmentAccessGroupsIdWithResponse(ctx context.Context, id string, body PutPreviewEnrollmentAccessGroupsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPreviewEnrollmentAccessGroupsIdResponse, error) {
	rsp, err := c.PutPreviewEnrollmentAccessGroupsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPreviewEnrollmentAccessGroupsIdResponse(rsp)
}

// PostPreviewMdmCommandsWithBodyWithResponse request with arbitrary body returning *PostPreviewMdmCommandsResponse
func (c *ClientWithResponses) PostPreviewMdmCommandsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPreviewMdmCommandsResponse, error) {
	rsp, err := c.PostPreviewMdmCommandsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPreviewMdmCommandsResponse(rsp)
}

func (c *ClientWithResponses) PostPreviewMdmCommandsWithResponse(ctx context.Context, body PostPreviewMdmCommandsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPreviewMdmCommandsResponse, error) {
	rsp, err := c.PostPreviewMdmCommands(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPreviewMdmCommandsResponse(rsp)
}

// GetPreviewRemoteAdministrationConfigurationsWithResponse request returning *GetPreviewRemoteAdministrationConfigurationsResponse
func (c *ClientWithResponses) GetPreviewRemoteAdministrationConfigurationsWithResponse(ctx context.Context, params *GetPreviewRemoteAdministrationConfigurationsParams, reqEditors ...RequestEditorFn) (*GetPreviewRemoteAdministrationConfigurationsResponse, error) {
	rsp, err := c.GetPreviewRemoteAdministrationConfigurations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewRemoteAdministrationConfigurationsResponse(rsp)
}

// PostPreviewRemoteAdministrationConfigurationsTeamViewerWithBodyWithResponse request with arbitrary body returning *PostPreviewRemoteAdministrationConfigurationsTeamViewerResponse
func (c *ClientWithResponses) PostPreviewRemoteAdministrationConfigurationsTeamViewerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerResponse, error) {
	rsp, err := c.PostPreviewRemoteAdministrationConfigurationsTeamViewerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPreviewRemoteAdministrationConfigurationsTeamViewerResponse(rsp)
}

func (c *ClientWithResponses) PostPreviewRemoteAdministrationConfigurationsTeamViewerWithResponse(ctx context.Context, body PostPreviewRemoteAdministrationConfigurationsTeamViewerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerResponse, error) {
	rsp, err := c.PostPreviewRemoteAdministrationConfigurationsTeamViewer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPreviewRemoteAdministrationConfigurationsTeamViewerResponse(rsp)
}

// GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsWithResponse request returning *GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse
func (c *ClientWithResponses) GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsWithResponse(ctx context.Context, configurationId string, params *GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsParams, reqEditors ...RequestEditorFn) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse, error) {
	rsp, err := c.GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessions(ctx, configurationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse(rsp)
}

// PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsWithBodyWithResponse request with arbitrary body returning *PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse
func (c *ClientWithResponses) PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsWithBodyWithResponse(ctx context.Context, configurationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse, error) {
	rsp, err := c.PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsWithBody(ctx, configurationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse(rsp)
}

func (c *ClientWithResponses) PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsWithResponse(ctx context.Context, configurationId string, body PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse, error) {
	rsp, err := c.PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessions(ctx, configurationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse(rsp)
}

// GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdWithResponse request returning *GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResponse
func (c *ClientWithResponses) GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdWithResponse(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResponse, error) {
	rsp, err := c.GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionId(ctx, configurationId, sessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResponse(rsp)
}

// PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseWithResponse request returning *PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseResponse
func (c *ClientWithResponses) PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseWithResponse(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseResponse, error) {
	rsp, err := c.PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdClose(ctx, configurationId, sessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseResponse(rsp)
}

// PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationWithResponse request returning *PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationResponse
func (c *ClientWithResponses) PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationWithResponse(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationResponse, error) {
	rsp, err := c.PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotification(ctx, configurationId, sessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationResponse(rsp)
}

// GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusWithResponse request returning *GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusResponse
func (c *ClientWithResponses) GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusWithResponse(ctx context.Context, configurationId string, sessionId string, reqEditors ...RequestEditorFn) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusResponse, error) {
	rsp, err := c.GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatus(ctx, configurationId, sessionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusResponse(rsp)
}

// DeletePreviewRemoteAdministrationConfigurationsTeamViewerIdWithResponse request returning *DeletePreviewRemoteAdministrationConfigurationsTeamViewerIdResponse
func (c *ClientWithResponses) DeletePreviewRemoteAdministrationConfigurationsTeamViewerIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePreviewRemoteAdministrationConfigurationsTeamViewerIdResponse, error) {
	rsp, err := c.DeletePreviewRemoteAdministrationConfigurationsTeamViewerId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePreviewRemoteAdministrationConfigurationsTeamViewerIdResponse(rsp)
}

// GetPreviewRemoteAdministrationConfigurationsTeamViewerIdWithResponse request returning *GetPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse
func (c *ClientWithResponses) GetPreviewRemoteAdministrationConfigurationsTeamViewerIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse, error) {
	rsp, err := c.GetPreviewRemoteAdministrationConfigurationsTeamViewerId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse(rsp)
}

// PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdWithBodyWithResponse request with arbitrary body returning *PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse
func (c *ClientWithResponses) PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse, error) {
	rsp, err := c.PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse(rsp)
}

func (c *ClientWithResponses) PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdWithResponse(ctx context.Context, id string, body PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse, error) {
	rsp, err := c.PatchPreviewRemoteAdministrationConfigurationsTeamViewerId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse(rsp)
}

// GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusWithResponse request returning *GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusResponse
func (c *ClientWithResponses) GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusResponse, error) {
	rsp, err := c.GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusResponse(rsp)
}

// PostSelfServiceBrandingImagesWithBodyWithResponse request with arbitrary body returning *PostSelfServiceBrandingImagesResponse
func (c *ClientWithResponses) PostSelfServiceBrandingImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSelfServiceBrandingImagesResponse, error) {
	rsp, err := c.PostSelfServiceBrandingImagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSelfServiceBrandingImagesResponse(rsp)
}

// PostSettingsIssueTomcatSslCertificateWithResponse request returning *PostSettingsIssueTomcatSslCertificateResponse
func (c *ClientWithResponses) PostSettingsIssueTomcatSslCertificateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSettingsIssueTomcatSslCertificateResponse, error) {
	rsp, err := c.PostSettingsIssueTomcatSslCertificate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSettingsIssueTomcatSslCertificateResponse(rsp)
}

// GetSettingsObjPolicyPropertiesWithResponse request returning *GetSettingsObjPolicyPropertiesResponse
func (c *ClientWithResponses) GetSettingsObjPolicyPropertiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsObjPolicyPropertiesResponse, error) {
	rsp, err := c.GetSettingsObjPolicyProperties(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsObjPolicyPropertiesResponse(rsp)
}

// PutSettingsObjPolicyPropertiesWithBodyWithResponse request with arbitrary body returning *PutSettingsObjPolicyPropertiesResponse
func (c *ClientWithResponses) PutSettingsObjPolicyPropertiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSettingsObjPolicyPropertiesResponse, error) {
	rsp, err := c.PutSettingsObjPolicyPropertiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsObjPolicyPropertiesResponse(rsp)
}

func (c *ClientWithResponses) PutSettingsObjPolicyPropertiesWithResponse(ctx context.Context, body PutSettingsObjPolicyPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSettingsObjPolicyPropertiesResponse, error) {
	rsp, err := c.PutSettingsObjPolicyProperties(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSettingsObjPolicyPropertiesResponse(rsp)
}

// GetSettingsSitesWithResponse request returning *GetSettingsSitesResponse
func (c *ClientWithResponses) GetSettingsSitesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettingsSitesResponse, error) {
	rsp, err := c.GetSettingsSites(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettingsSitesResponse(rsp)
}

// GetStartupStatusWithResponse request returning *GetStartupStatusResponse
func (c *ClientWithResponses) GetStartupStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStartupStatusResponse, error) {
	rsp, err := c.GetStartupStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStartupStatusResponse(rsp)
}

// PostSystemInitializeWithBodyWithResponse request with arbitrary body returning *PostSystemInitializeResponse
func (c *ClientWithResponses) PostSystemInitializeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemInitializeResponse, error) {
	rsp, err := c.PostSystemInitializeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemInitializeResponse(rsp)
}

func (c *ClientWithResponses) PostSystemInitializeWithResponse(ctx context.Context, body PostSystemInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemInitializeResponse, error) {
	rsp, err := c.PostSystemInitialize(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemInitializeResponse(rsp)
}

// PostSystemInitializeDatabaseConnectionWithBodyWithResponse request with arbitrary body returning *PostSystemInitializeDatabaseConnectionResponse
func (c *ClientWithResponses) PostSystemInitializeDatabaseConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemInitializeDatabaseConnectionResponse, error) {
	rsp, err := c.PostSystemInitializeDatabaseConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemInitializeDatabaseConnectionResponse(rsp)
}

func (c *ClientWithResponses) PostSystemInitializeDatabaseConnectionWithResponse(ctx context.Context, body PostSystemInitializeDatabaseConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemInitializeDatabaseConnectionResponse, error) {
	rsp, err := c.PostSystemInitializeDatabaseConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemInitializeDatabaseConnectionResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// DeleteUserObjPreferenceKeyWithResponse request returning *DeleteUserObjPreferenceKeyResponse
func (c *ClientWithResponses) DeleteUserObjPreferenceKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteUserObjPreferenceKeyResponse, error) {
	rsp, err := c.DeleteUserObjPreferenceKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserObjPreferenceKeyResponse(rsp)
}

// GetUserObjPreferenceKeyWithResponse request returning *GetUserObjPreferenceKeyResponse
func (c *ClientWithResponses) GetUserObjPreferenceKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetUserObjPreferenceKeyResponse, error) {
	rsp, err := c.GetUserObjPreferenceKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserObjPreferenceKeyResponse(rsp)
}

// PutUserObjPreferenceKeyWithBodyWithResponse request with arbitrary body returning *PutUserObjPreferenceKeyResponse
func (c *ClientWithResponses) PutUserObjPreferenceKeyWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserObjPreferenceKeyResponse, error) {
	rsp, err := c.PutUserObjPreferenceKeyWithBody(ctx, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserObjPreferenceKeyResponse(rsp)
}

func (c *ClientWithResponses) PutUserObjPreferenceKeyWithResponse(ctx context.Context, key string, body PutUserObjPreferenceKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserObjPreferenceKeyResponse, error) {
	rsp, err := c.PutUserObjPreferenceKey(ctx, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserObjPreferenceKeyResponse(rsp)
}

// PostUserUpdateSessionWithBodyWithResponse request with arbitrary body returning *PostUserUpdateSessionResponse
func (c *ClientWithResponses) PostUserUpdateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUpdateSessionResponse, error) {
	rsp, err := c.PostUserUpdateSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUpdateSessionResponse(rsp)
}

func (c *ClientWithResponses) PostUserUpdateSessionWithResponse(ctx context.Context, body PostUserUpdateSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUpdateSessionResponse, error) {
	rsp, err := c.PostUserUpdateSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUpdateSessionResponse(rsp)
}

// GetV1AdueSessionTokenSettingsWithResponse request returning *GetV1AdueSessionTokenSettingsResponse
func (c *ClientWithResponses) GetV1AdueSessionTokenSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AdueSessionTokenSettingsResponse, error) {
	rsp, err := c.GetV1AdueSessionTokenSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AdueSessionTokenSettingsResponse(rsp)
}

// PutV1AdueSessionTokenSettingsWithBodyWithResponse request with arbitrary body returning *PutV1AdueSessionTokenSettingsResponse
func (c *ClientWithResponses) PutV1AdueSessionTokenSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1AdueSessionTokenSettingsResponse, error) {
	rsp, err := c.PutV1AdueSessionTokenSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1AdueSessionTokenSettingsResponse(rsp)
}

func (c *ClientWithResponses) PutV1AdueSessionTokenSettingsWithResponse(ctx context.Context, body PutV1AdueSessionTokenSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1AdueSessionTokenSettingsResponse, error) {
	rsp, err := c.PutV1AdueSessionTokenSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1AdueSessionTokenSettingsResponse(rsp)
}

// GetV1AdvancedMobileDeviceSearchesWithResponse request returning *GetV1AdvancedMobileDeviceSearchesResponse
func (c *ClientWithResponses) GetV1AdvancedMobileDeviceSearchesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AdvancedMobileDeviceSearchesResponse, error) {
	rsp, err := c.GetV1AdvancedMobileDeviceSearches(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AdvancedMobileDeviceSearchesResponse(rsp)
}

// PostV1AdvancedMobileDeviceSearchesWithBodyWithResponse request with arbitrary body returning *PostV1AdvancedMobileDeviceSearchesResponse
func (c *ClientWithResponses) PostV1AdvancedMobileDeviceSearchesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AdvancedMobileDeviceSearchesResponse, error) {
	rsp, err := c.PostV1AdvancedMobileDeviceSearchesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AdvancedMobileDeviceSearchesResponse(rsp)
}

func (c *ClientWithResponses) PostV1AdvancedMobileDeviceSearchesWithResponse(ctx context.Context, body PostV1AdvancedMobileDeviceSearchesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AdvancedMobileDeviceSearchesResponse, error) {
	rsp, err := c.PostV1AdvancedMobileDeviceSearches(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AdvancedMobileDeviceSearchesResponse(rsp)
}

// GetV1AdvancedMobileDeviceSearchesChoicesWithResponse request returning *GetV1AdvancedMobileDeviceSearchesChoicesResponse
func (c *ClientWithResponses) GetV1AdvancedMobileDeviceSearchesChoicesWithResponse(ctx context.Context, params *GetV1AdvancedMobileDeviceSearchesChoicesParams, reqEditors ...RequestEditorFn) (*GetV1AdvancedMobileDeviceSearchesChoicesResponse, error) {
	rsp, err := c.GetV1AdvancedMobileDeviceSearchesChoices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AdvancedMobileDeviceSearchesChoicesResponse(rsp)
}

// PostV1AdvancedMobileDeviceSearchesDeleteMultipleWithBodyWithResponse request with arbitrary body returning *PostV1AdvancedMobileDeviceSearchesDeleteMultipleResponse
func (c *ClientWithResponses) PostV1AdvancedMobileDeviceSearchesDeleteMultipleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AdvancedMobileDeviceSearchesDeleteMultipleResponse, error) {
	rsp, err := c.PostV1AdvancedMobileDeviceSearchesDeleteMultipleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AdvancedMobileDeviceSearchesDeleteMultipleResponse(rsp)
}

func (c *ClientWithResponses) PostV1AdvancedMobileDeviceSearchesDeleteMultipleWithResponse(ctx context.Context, body PostV1AdvancedMobileDeviceSearchesDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AdvancedMobileDeviceSearchesDeleteMultipleResponse, error) {
	rsp, err := c.PostV1AdvancedMobileDeviceSearchesDeleteMultiple(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AdvancedMobileDeviceSearchesDeleteMultipleResponse(rsp)
}

// DeleteV1AdvancedMobileDeviceSearchesIdWithResponse request returning *DeleteV1AdvancedMobileDeviceSearchesIdResponse
func (c *ClientWithResponses) DeleteV1AdvancedMobileDeviceSearchesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1AdvancedMobileDeviceSearchesIdResponse, error) {
	rsp, err := c.DeleteV1AdvancedMobileDeviceSearchesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1AdvancedMobileDeviceSearchesIdResponse(rsp)
}

// GetV1AdvancedMobileDeviceSearchesIdWithResponse request returning *GetV1AdvancedMobileDeviceSearchesIdResponse
func (c *ClientWithResponses) GetV1AdvancedMobileDeviceSearchesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1AdvancedMobileDeviceSearchesIdResponse, error) {
	rsp, err := c.GetV1AdvancedMobileDeviceSearchesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AdvancedMobileDeviceSearchesIdResponse(rsp)
}

// PutV1AdvancedMobileDeviceSearchesIdWithBodyWithResponse request with arbitrary body returning *PutV1AdvancedMobileDeviceSearchesIdResponse
func (c *ClientWithResponses) PutV1AdvancedMobileDeviceSearchesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1AdvancedMobileDeviceSearchesIdResponse, error) {
	rsp, err := c.PutV1AdvancedMobileDeviceSearchesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1AdvancedMobileDeviceSearchesIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1AdvancedMobileDeviceSearchesIdWithResponse(ctx context.Context, id string, body PutV1AdvancedMobileDeviceSearchesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1AdvancedMobileDeviceSearchesIdResponse, error) {
	rsp, err := c.PutV1AdvancedMobileDeviceSearchesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1AdvancedMobileDeviceSearchesIdResponse(rsp)
}

// GetV1AdvancedUserContentSearchesWithResponse request returning *GetV1AdvancedUserContentSearchesResponse
func (c *ClientWithResponses) GetV1AdvancedUserContentSearchesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AdvancedUserContentSearchesResponse, error) {
	rsp, err := c.GetV1AdvancedUserContentSearches(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AdvancedUserContentSearchesResponse(rsp)
}

// PostV1AdvancedUserContentSearchesWithBodyWithResponse request with arbitrary body returning *PostV1AdvancedUserContentSearchesResponse
func (c *ClientWithResponses) PostV1AdvancedUserContentSearchesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AdvancedUserContentSearchesResponse, error) {
	rsp, err := c.PostV1AdvancedUserContentSearchesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AdvancedUserContentSearchesResponse(rsp)
}

func (c *ClientWithResponses) PostV1AdvancedUserContentSearchesWithResponse(ctx context.Context, body PostV1AdvancedUserContentSearchesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AdvancedUserContentSearchesResponse, error) {
	rsp, err := c.PostV1AdvancedUserContentSearches(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AdvancedUserContentSearchesResponse(rsp)
}

// DeleteV1AdvancedUserContentSearchesIdWithResponse request returning *DeleteV1AdvancedUserContentSearchesIdResponse
func (c *ClientWithResponses) DeleteV1AdvancedUserContentSearchesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1AdvancedUserContentSearchesIdResponse, error) {
	rsp, err := c.DeleteV1AdvancedUserContentSearchesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1AdvancedUserContentSearchesIdResponse(rsp)
}

// GetV1AdvancedUserContentSearchesIdWithResponse request returning *GetV1AdvancedUserContentSearchesIdResponse
func (c *ClientWithResponses) GetV1AdvancedUserContentSearchesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1AdvancedUserContentSearchesIdResponse, error) {
	rsp, err := c.GetV1AdvancedUserContentSearchesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AdvancedUserContentSearchesIdResponse(rsp)
}

// PutV1AdvancedUserContentSearchesIdWithBodyWithResponse request with arbitrary body returning *PutV1AdvancedUserContentSearchesIdResponse
func (c *ClientWithResponses) PutV1AdvancedUserContentSearchesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1AdvancedUserContentSearchesIdResponse, error) {
	rsp, err := c.PutV1AdvancedUserContentSearchesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1AdvancedUserContentSearchesIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1AdvancedUserContentSearchesIdWithResponse(ctx context.Context, id string, body PutV1AdvancedUserContentSearchesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1AdvancedUserContentSearchesIdResponse, error) {
	rsp, err := c.PutV1AdvancedUserContentSearchesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1AdvancedUserContentSearchesIdResponse(rsp)
}

// GetV1AppDynamicsScriptConfigurationWithResponse request returning *GetV1AppDynamicsScriptConfigurationResponse
func (c *ClientWithResponses) GetV1AppDynamicsScriptConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AppDynamicsScriptConfigurationResponse, error) {
	rsp, err := c.GetV1AppDynamicsScriptConfiguration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AppDynamicsScriptConfigurationResponse(rsp)
}

// GetV1AppRequestFormInputFieldsWithResponse request returning *GetV1AppRequestFormInputFieldsResponse
func (c *ClientWithResponses) GetV1AppRequestFormInputFieldsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AppRequestFormInputFieldsResponse, error) {
	rsp, err := c.GetV1AppRequestFormInputFields(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AppRequestFormInputFieldsResponse(rsp)
}

// PostV1AppRequestFormInputFieldsWithBodyWithResponse request with arbitrary body returning *PostV1AppRequestFormInputFieldsResponse
func (c *ClientWithResponses) PostV1AppRequestFormInputFieldsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AppRequestFormInputFieldsResponse, error) {
	rsp, err := c.PostV1AppRequestFormInputFieldsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AppRequestFormInputFieldsResponse(rsp)
}

func (c *ClientWithResponses) PostV1AppRequestFormInputFieldsWithResponse(ctx context.Context, body PostV1AppRequestFormInputFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AppRequestFormInputFieldsResponse, error) {
	rsp, err := c.PostV1AppRequestFormInputFields(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AppRequestFormInputFieldsResponse(rsp)
}

// PutV1AppRequestFormInputFieldsWithBodyWithResponse request with arbitrary body returning *PutV1AppRequestFormInputFieldsResponse
func (c *ClientWithResponses) PutV1AppRequestFormInputFieldsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1AppRequestFormInputFieldsResponse, error) {
	rsp, err := c.PutV1AppRequestFormInputFieldsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1AppRequestFormInputFieldsResponse(rsp)
}

func (c *ClientWithResponses) PutV1AppRequestFormInputFieldsWithResponse(ctx context.Context, body PutV1AppRequestFormInputFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1AppRequestFormInputFieldsResponse, error) {
	rsp, err := c.PutV1AppRequestFormInputFields(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1AppRequestFormInputFieldsResponse(rsp)
}

// DeleteV1AppRequestFormInputFieldsIdWithResponse request returning *DeleteV1AppRequestFormInputFieldsIdResponse
func (c *ClientWithResponses) DeleteV1AppRequestFormInputFieldsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteV1AppRequestFormInputFieldsIdResponse, error) {
	rsp, err := c.DeleteV1AppRequestFormInputFieldsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1AppRequestFormInputFieldsIdResponse(rsp)
}

// GetV1AppRequestFormInputFieldsIdWithResponse request returning *GetV1AppRequestFormInputFieldsIdResponse
func (c *ClientWithResponses) GetV1AppRequestFormInputFieldsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1AppRequestFormInputFieldsIdResponse, error) {
	rsp, err := c.GetV1AppRequestFormInputFieldsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AppRequestFormInputFieldsIdResponse(rsp)
}

// PutV1AppRequestFormInputFieldsIdWithBodyWithResponse request with arbitrary body returning *PutV1AppRequestFormInputFieldsIdResponse
func (c *ClientWithResponses) PutV1AppRequestFormInputFieldsIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1AppRequestFormInputFieldsIdResponse, error) {
	rsp, err := c.PutV1AppRequestFormInputFieldsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1AppRequestFormInputFieldsIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1AppRequestFormInputFieldsIdWithResponse(ctx context.Context, id int, body PutV1AppRequestFormInputFieldsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1AppRequestFormInputFieldsIdResponse, error) {
	rsp, err := c.PutV1AppRequestFormInputFieldsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1AppRequestFormInputFieldsIdResponse(rsp)
}

// GetV1AppRequestSettingsWithResponse request returning *GetV1AppRequestSettingsResponse
func (c *ClientWithResponses) GetV1AppRequestSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AppRequestSettingsResponse, error) {
	rsp, err := c.GetV1AppRequestSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AppRequestSettingsResponse(rsp)
}

// PutV1AppRequestSettingsWithBodyWithResponse request with arbitrary body returning *PutV1AppRequestSettingsResponse
func (c *ClientWithResponses) PutV1AppRequestSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1AppRequestSettingsResponse, error) {
	rsp, err := c.PutV1AppRequestSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1AppRequestSettingsResponse(rsp)
}

func (c *ClientWithResponses) PutV1AppRequestSettingsWithResponse(ctx context.Context, body PutV1AppRequestSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1AppRequestSettingsResponse, error) {
	rsp, err := c.PutV1AppRequestSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1AppRequestSettingsResponse(rsp)
}

// GetV1AppStoreCountryCodesWithResponse request returning *GetV1AppStoreCountryCodesResponse
func (c *ClientWithResponses) GetV1AppStoreCountryCodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AppStoreCountryCodesResponse, error) {
	rsp, err := c.GetV1AppStoreCountryCodes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AppStoreCountryCodesResponse(rsp)
}

// GetV1AuthWithResponse request returning *GetV1AuthResponse
func (c *ClientWithResponses) GetV1AuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AuthResponse, error) {
	rsp, err := c.GetV1Auth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AuthResponse(rsp)
}

// PostV1AuthInvalidateTokenWithResponse request returning *PostV1AuthInvalidateTokenResponse
func (c *ClientWithResponses) PostV1AuthInvalidateTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV1AuthInvalidateTokenResponse, error) {
	rsp, err := c.PostV1AuthInvalidateToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AuthInvalidateTokenResponse(rsp)
}

// PostV1AuthKeepAliveWithResponse request returning *PostV1AuthKeepAliveResponse
func (c *ClientWithResponses) PostV1AuthKeepAliveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV1AuthKeepAliveResponse, error) {
	rsp, err := c.PostV1AuthKeepAlive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AuthKeepAliveResponse(rsp)
}

// PostV1AuthTokenWithResponse request returning *PostV1AuthTokenResponse
func (c *ClientWithResponses) PostV1AuthTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV1AuthTokenResponse, error) {
	rsp, err := c.PostV1AuthToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AuthTokenResponse(rsp)
}

// PostV1AzureAdMigrationReportsWithBodyWithResponse request with arbitrary body returning *PostV1AzureAdMigrationReportsResponse
func (c *ClientWithResponses) PostV1AzureAdMigrationReportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1AzureAdMigrationReportsResponse, error) {
	rsp, err := c.PostV1AzureAdMigrationReportsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AzureAdMigrationReportsResponse(rsp)
}

func (c *ClientWithResponses) PostV1AzureAdMigrationReportsWithResponse(ctx context.Context, body PostV1AzureAdMigrationReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1AzureAdMigrationReportsResponse, error) {
	rsp, err := c.PostV1AzureAdMigrationReports(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1AzureAdMigrationReportsResponse(rsp)
}

// GetV1AzureAdMigrationReportsPendingWithResponse request returning *GetV1AzureAdMigrationReportsPendingResponse
func (c *ClientWithResponses) GetV1AzureAdMigrationReportsPendingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AzureAdMigrationReportsPendingResponse, error) {
	rsp, err := c.GetV1AzureAdMigrationReportsPending(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AzureAdMigrationReportsPendingResponse(rsp)
}

// GetV1AzureAdMigrationReportsIdWithResponse request returning *GetV1AzureAdMigrationReportsIdResponse
func (c *ClientWithResponses) GetV1AzureAdMigrationReportsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1AzureAdMigrationReportsIdResponse, error) {
	rsp, err := c.GetV1AzureAdMigrationReportsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AzureAdMigrationReportsIdResponse(rsp)
}

// GetV1AzureAdMigrationReportsIdDownloadWithResponse request returning *GetV1AzureAdMigrationReportsIdDownloadResponse
func (c *ClientWithResponses) GetV1AzureAdMigrationReportsIdDownloadWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1AzureAdMigrationReportsIdDownloadResponse, error) {
	rsp, err := c.GetV1AzureAdMigrationReportsIdDownload(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AzureAdMigrationReportsIdDownloadResponse(rsp)
}

// GetV1BuildingsWithResponse request returning *GetV1BuildingsResponse
func (c *ClientWithResponses) GetV1BuildingsWithResponse(ctx context.Context, params *GetV1BuildingsParams, reqEditors ...RequestEditorFn) (*GetV1BuildingsResponse, error) {
	rsp, err := c.GetV1Buildings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1BuildingsResponse(rsp)
}

// PostV1BuildingsWithBodyWithResponse request with arbitrary body returning *PostV1BuildingsResponse
func (c *ClientWithResponses) PostV1BuildingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1BuildingsResponse, error) {
	rsp, err := c.PostV1BuildingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1BuildingsResponse(rsp)
}

func (c *ClientWithResponses) PostV1BuildingsWithResponse(ctx context.Context, body PostV1BuildingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1BuildingsResponse, error) {
	rsp, err := c.PostV1Buildings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1BuildingsResponse(rsp)
}

// PostV1BuildingsDeleteMultipleWithBodyWithResponse request with arbitrary body returning *PostV1BuildingsDeleteMultipleResponse
func (c *ClientWithResponses) PostV1BuildingsDeleteMultipleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1BuildingsDeleteMultipleResponse, error) {
	rsp, err := c.PostV1BuildingsDeleteMultipleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1BuildingsDeleteMultipleResponse(rsp)
}

func (c *ClientWithResponses) PostV1BuildingsDeleteMultipleWithResponse(ctx context.Context, body PostV1BuildingsDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1BuildingsDeleteMultipleResponse, error) {
	rsp, err := c.PostV1BuildingsDeleteMultiple(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1BuildingsDeleteMultipleResponse(rsp)
}

// DeleteV1BuildingsIdWithResponse request returning *DeleteV1BuildingsIdResponse
func (c *ClientWithResponses) DeleteV1BuildingsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1BuildingsIdResponse, error) {
	rsp, err := c.DeleteV1BuildingsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1BuildingsIdResponse(rsp)
}

// GetV1BuildingsIdWithResponse request returning *GetV1BuildingsIdResponse
func (c *ClientWithResponses) GetV1BuildingsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1BuildingsIdResponse, error) {
	rsp, err := c.GetV1BuildingsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1BuildingsIdResponse(rsp)
}

// PutV1BuildingsIdWithBodyWithResponse request with arbitrary body returning *PutV1BuildingsIdResponse
func (c *ClientWithResponses) PutV1BuildingsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1BuildingsIdResponse, error) {
	rsp, err := c.PutV1BuildingsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1BuildingsIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1BuildingsIdWithResponse(ctx context.Context, id string, body PutV1BuildingsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1BuildingsIdResponse, error) {
	rsp, err := c.PutV1BuildingsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1BuildingsIdResponse(rsp)
}

// GetV1BuildingsIdHistoryWithResponse request returning *GetV1BuildingsIdHistoryResponse
func (c *ClientWithResponses) GetV1BuildingsIdHistoryWithResponse(ctx context.Context, id string, params *GetV1BuildingsIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1BuildingsIdHistoryResponse, error) {
	rsp, err := c.GetV1BuildingsIdHistory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1BuildingsIdHistoryResponse(rsp)
}

// PostV1BuildingsIdHistoryWithBodyWithResponse request with arbitrary body returning *PostV1BuildingsIdHistoryResponse
func (c *ClientWithResponses) PostV1BuildingsIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1BuildingsIdHistoryResponse, error) {
	rsp, err := c.PostV1BuildingsIdHistoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1BuildingsIdHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1BuildingsIdHistoryWithResponse(ctx context.Context, id string, body PostV1BuildingsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1BuildingsIdHistoryResponse, error) {
	rsp, err := c.PostV1BuildingsIdHistory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1BuildingsIdHistoryResponse(rsp)
}

// GetV1CacheSettingsWithResponse request returning *GetV1CacheSettingsResponse
func (c *ClientWithResponses) GetV1CacheSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1CacheSettingsResponse, error) {
	rsp, err := c.GetV1CacheSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1CacheSettingsResponse(rsp)
}

// PutV1CacheSettingsWithBodyWithResponse request with arbitrary body returning *PutV1CacheSettingsResponse
func (c *ClientWithResponses) PutV1CacheSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1CacheSettingsResponse, error) {
	rsp, err := c.PutV1CacheSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1CacheSettingsResponse(rsp)
}

func (c *ClientWithResponses) PutV1CacheSettingsWithResponse(ctx context.Context, body PutV1CacheSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1CacheSettingsResponse, error) {
	rsp, err := c.PutV1CacheSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1CacheSettingsResponse(rsp)
}

// GetV1CategoriesWithResponse request returning *GetV1CategoriesResponse
func (c *ClientWithResponses) GetV1CategoriesWithResponse(ctx context.Context, params *GetV1CategoriesParams, reqEditors ...RequestEditorFn) (*GetV1CategoriesResponse, error) {
	rsp, err := c.GetV1Categories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1CategoriesResponse(rsp)
}

// PostV1CategoriesWithBodyWithResponse request with arbitrary body returning *PostV1CategoriesResponse
func (c *ClientWithResponses) PostV1CategoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CategoriesResponse, error) {
	rsp, err := c.PostV1CategoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CategoriesResponse(rsp)
}

func (c *ClientWithResponses) PostV1CategoriesWithResponse(ctx context.Context, body PostV1CategoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CategoriesResponse, error) {
	rsp, err := c.PostV1Categories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CategoriesResponse(rsp)
}

// PostV1CategoriesDeleteMultipleWithBodyWithResponse request with arbitrary body returning *PostV1CategoriesDeleteMultipleResponse
func (c *ClientWithResponses) PostV1CategoriesDeleteMultipleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CategoriesDeleteMultipleResponse, error) {
	rsp, err := c.PostV1CategoriesDeleteMultipleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CategoriesDeleteMultipleResponse(rsp)
}

func (c *ClientWithResponses) PostV1CategoriesDeleteMultipleWithResponse(ctx context.Context, body PostV1CategoriesDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CategoriesDeleteMultipleResponse, error) {
	rsp, err := c.PostV1CategoriesDeleteMultiple(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CategoriesDeleteMultipleResponse(rsp)
}

// DeleteV1CategoriesIdWithResponse request returning *DeleteV1CategoriesIdResponse
func (c *ClientWithResponses) DeleteV1CategoriesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1CategoriesIdResponse, error) {
	rsp, err := c.DeleteV1CategoriesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1CategoriesIdResponse(rsp)
}

// GetV1CategoriesIdWithResponse request returning *GetV1CategoriesIdResponse
func (c *ClientWithResponses) GetV1CategoriesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1CategoriesIdResponse, error) {
	rsp, err := c.GetV1CategoriesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1CategoriesIdResponse(rsp)
}

// PutV1CategoriesIdWithBodyWithResponse request with arbitrary body returning *PutV1CategoriesIdResponse
func (c *ClientWithResponses) PutV1CategoriesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1CategoriesIdResponse, error) {
	rsp, err := c.PutV1CategoriesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1CategoriesIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1CategoriesIdWithResponse(ctx context.Context, id string, body PutV1CategoriesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1CategoriesIdResponse, error) {
	rsp, err := c.PutV1CategoriesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1CategoriesIdResponse(rsp)
}

// GetV1CategoriesIdHistoryWithResponse request returning *GetV1CategoriesIdHistoryResponse
func (c *ClientWithResponses) GetV1CategoriesIdHistoryWithResponse(ctx context.Context, id string, params *GetV1CategoriesIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1CategoriesIdHistoryResponse, error) {
	rsp, err := c.GetV1CategoriesIdHistory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1CategoriesIdHistoryResponse(rsp)
}

// PostV1CategoriesIdHistoryWithBodyWithResponse request with arbitrary body returning *PostV1CategoriesIdHistoryResponse
func (c *ClientWithResponses) PostV1CategoriesIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CategoriesIdHistoryResponse, error) {
	rsp, err := c.PostV1CategoriesIdHistoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CategoriesIdHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1CategoriesIdHistoryWithResponse(ctx context.Context, id string, body PostV1CategoriesIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CategoriesIdHistoryResponse, error) {
	rsp, err := c.PostV1CategoriesIdHistory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CategoriesIdHistoryResponse(rsp)
}

// GetV1ClassicLdapIdWithResponse request returning *GetV1ClassicLdapIdResponse
func (c *ClientWithResponses) GetV1ClassicLdapIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1ClassicLdapIdResponse, error) {
	rsp, err := c.GetV1ClassicLdapId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ClassicLdapIdResponse(rsp)
}

// PostV1CloudAzureWithBodyWithResponse request with arbitrary body returning *PostV1CloudAzureResponse
func (c *ClientWithResponses) PostV1CloudAzureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CloudAzureResponse, error) {
	rsp, err := c.PostV1CloudAzureWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CloudAzureResponse(rsp)
}

func (c *ClientWithResponses) PostV1CloudAzureWithResponse(ctx context.Context, body PostV1CloudAzureJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CloudAzureResponse, error) {
	rsp, err := c.PostV1CloudAzure(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CloudAzureResponse(rsp)
}

// GetV1CloudAzureDefaultsMappingsWithResponse request returning *GetV1CloudAzureDefaultsMappingsResponse
func (c *ClientWithResponses) GetV1CloudAzureDefaultsMappingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1CloudAzureDefaultsMappingsResponse, error) {
	rsp, err := c.GetV1CloudAzureDefaultsMappings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1CloudAzureDefaultsMappingsResponse(rsp)
}

// GetV1CloudAzureDefaultsServerConfigurationWithResponse request returning *GetV1CloudAzureDefaultsServerConfigurationResponse
func (c *ClientWithResponses) GetV1CloudAzureDefaultsServerConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1CloudAzureDefaultsServerConfigurationResponse, error) {
	rsp, err := c.GetV1CloudAzureDefaultsServerConfiguration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1CloudAzureDefaultsServerConfigurationResponse(rsp)
}

// DeleteV1CloudAzureIdWithResponse request returning *DeleteV1CloudAzureIdResponse
func (c *ClientWithResponses) DeleteV1CloudAzureIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1CloudAzureIdResponse, error) {
	rsp, err := c.DeleteV1CloudAzureId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1CloudAzureIdResponse(rsp)
}

// GetV1CloudAzureIdWithResponse request returning *GetV1CloudAzureIdResponse
func (c *ClientWithResponses) GetV1CloudAzureIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1CloudAzureIdResponse, error) {
	rsp, err := c.GetV1CloudAzureId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1CloudAzureIdResponse(rsp)
}

// PutV1CloudAzureIdWithBodyWithResponse request with arbitrary body returning *PutV1CloudAzureIdResponse
func (c *ClientWithResponses) PutV1CloudAzureIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1CloudAzureIdResponse, error) {
	rsp, err := c.PutV1CloudAzureIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1CloudAzureIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1CloudAzureIdWithResponse(ctx context.Context, id string, body PutV1CloudAzureIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1CloudAzureIdResponse, error) {
	rsp, err := c.PutV1CloudAzureId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1CloudAzureIdResponse(rsp)
}

// GetV1CloudIdpWithResponse request returning *GetV1CloudIdpResponse
func (c *ClientWithResponses) GetV1CloudIdpWithResponse(ctx context.Context, params *GetV1CloudIdpParams, reqEditors ...RequestEditorFn) (*GetV1CloudIdpResponse, error) {
	rsp, err := c.GetV1CloudIdp(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1CloudIdpResponse(rsp)
}

// PostV1CloudIdpExportWithBodyWithResponse request with arbitrary body returning *PostV1CloudIdpExportResponse
func (c *ClientWithResponses) PostV1CloudIdpExportWithBodyWithResponse(ctx context.Context, params *PostV1CloudIdpExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CloudIdpExportResponse, error) {
	rsp, err := c.PostV1CloudIdpExportWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CloudIdpExportResponse(rsp)
}

func (c *ClientWithResponses) PostV1CloudIdpExportWithResponse(ctx context.Context, params *PostV1CloudIdpExportParams, body PostV1CloudIdpExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CloudIdpExportResponse, error) {
	rsp, err := c.PostV1CloudIdpExport(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CloudIdpExportResponse(rsp)
}

// GetV1CloudIdpIdWithResponse request returning *GetV1CloudIdpIdResponse
func (c *ClientWithResponses) GetV1CloudIdpIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1CloudIdpIdResponse, error) {
	rsp, err := c.GetV1CloudIdpId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1CloudIdpIdResponse(rsp)
}

// GetV1CloudIdpIdHistoryWithResponse request returning *GetV1CloudIdpIdHistoryResponse
func (c *ClientWithResponses) GetV1CloudIdpIdHistoryWithResponse(ctx context.Context, id string, params *GetV1CloudIdpIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1CloudIdpIdHistoryResponse, error) {
	rsp, err := c.GetV1CloudIdpIdHistory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1CloudIdpIdHistoryResponse(rsp)
}

// PostV1CloudIdpIdHistoryWithBodyWithResponse request with arbitrary body returning *PostV1CloudIdpIdHistoryResponse
func (c *ClientWithResponses) PostV1CloudIdpIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdHistoryResponse, error) {
	rsp, err := c.PostV1CloudIdpIdHistoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CloudIdpIdHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1CloudIdpIdHistoryWithResponse(ctx context.Context, id string, body PostV1CloudIdpIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdHistoryResponse, error) {
	rsp, err := c.PostV1CloudIdpIdHistory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CloudIdpIdHistoryResponse(rsp)
}

// PostV1CloudIdpIdTestGroupWithBodyWithResponse request with arbitrary body returning *PostV1CloudIdpIdTestGroupResponse
func (c *ClientWithResponses) PostV1CloudIdpIdTestGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdTestGroupResponse, error) {
	rsp, err := c.PostV1CloudIdpIdTestGroupWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CloudIdpIdTestGroupResponse(rsp)
}

func (c *ClientWithResponses) PostV1CloudIdpIdTestGroupWithResponse(ctx context.Context, id string, body PostV1CloudIdpIdTestGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdTestGroupResponse, error) {
	rsp, err := c.PostV1CloudIdpIdTestGroup(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CloudIdpIdTestGroupResponse(rsp)
}

// PostV1CloudIdpIdTestUserWithBodyWithResponse request with arbitrary body returning *PostV1CloudIdpIdTestUserResponse
func (c *ClientWithResponses) PostV1CloudIdpIdTestUserWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdTestUserResponse, error) {
	rsp, err := c.PostV1CloudIdpIdTestUserWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CloudIdpIdTestUserResponse(rsp)
}

func (c *ClientWithResponses) PostV1CloudIdpIdTestUserWithResponse(ctx context.Context, id string, body PostV1CloudIdpIdTestUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdTestUserResponse, error) {
	rsp, err := c.PostV1CloudIdpIdTestUser(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CloudIdpIdTestUserResponse(rsp)
}

// PostV1CloudIdpIdTestUserMembershipWithBodyWithResponse request with arbitrary body returning *PostV1CloudIdpIdTestUserMembershipResponse
func (c *ClientWithResponses) PostV1CloudIdpIdTestUserMembershipWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdTestUserMembershipResponse, error) {
	rsp, err := c.PostV1CloudIdpIdTestUserMembershipWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CloudIdpIdTestUserMembershipResponse(rsp)
}

func (c *ClientWithResponses) PostV1CloudIdpIdTestUserMembershipWithResponse(ctx context.Context, id string, body PostV1CloudIdpIdTestUserMembershipJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CloudIdpIdTestUserMembershipResponse, error) {
	rsp, err := c.PostV1CloudIdpIdTestUserMembership(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CloudIdpIdTestUserMembershipResponse(rsp)
}

// GetV1ComputerInventoryCollectionSettingsWithResponse request returning *GetV1ComputerInventoryCollectionSettingsResponse
func (c *ClientWithResponses) GetV1ComputerInventoryCollectionSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ComputerInventoryCollectionSettingsResponse, error) {
	rsp, err := c.GetV1ComputerInventoryCollectionSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ComputerInventoryCollectionSettingsResponse(rsp)
}

// PatchV1ComputerInventoryCollectionSettingsWithBodyWithResponse request with arbitrary body returning *PatchV1ComputerInventoryCollectionSettingsResponse
func (c *ClientWithResponses) PatchV1ComputerInventoryCollectionSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ComputerInventoryCollectionSettingsResponse, error) {
	rsp, err := c.PatchV1ComputerInventoryCollectionSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ComputerInventoryCollectionSettingsResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ComputerInventoryCollectionSettingsWithResponse(ctx context.Context, body PatchV1ComputerInventoryCollectionSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ComputerInventoryCollectionSettingsResponse, error) {
	rsp, err := c.PatchV1ComputerInventoryCollectionSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ComputerInventoryCollectionSettingsResponse(rsp)
}

// PostV1ComputerInventoryCollectionSettingsCustomPathWithBodyWithResponse request with arbitrary body returning *PostV1ComputerInventoryCollectionSettingsCustomPathResponse
func (c *ClientWithResponses) PostV1ComputerInventoryCollectionSettingsCustomPathWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ComputerInventoryCollectionSettingsCustomPathResponse, error) {
	rsp, err := c.PostV1ComputerInventoryCollectionSettingsCustomPathWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ComputerInventoryCollectionSettingsCustomPathResponse(rsp)
}

func (c *ClientWithResponses) PostV1ComputerInventoryCollectionSettingsCustomPathWithResponse(ctx context.Context, body PostV1ComputerInventoryCollectionSettingsCustomPathJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ComputerInventoryCollectionSettingsCustomPathResponse, error) {
	rsp, err := c.PostV1ComputerInventoryCollectionSettingsCustomPath(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ComputerInventoryCollectionSettingsCustomPathResponse(rsp)
}

// DeleteV1ComputerInventoryCollectionSettingsCustomPathIdWithResponse request returning *DeleteV1ComputerInventoryCollectionSettingsCustomPathIdResponse
func (c *ClientWithResponses) DeleteV1ComputerInventoryCollectionSettingsCustomPathIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1ComputerInventoryCollectionSettingsCustomPathIdResponse, error) {
	rsp, err := c.DeleteV1ComputerInventoryCollectionSettingsCustomPathId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ComputerInventoryCollectionSettingsCustomPathIdResponse(rsp)
}

// GetV1ComputerPrestagesWithResponse request returning *GetV1ComputerPrestagesResponse
func (c *ClientWithResponses) GetV1ComputerPrestagesWithResponse(ctx context.Context, params *GetV1ComputerPrestagesParams, reqEditors ...RequestEditorFn) (*GetV1ComputerPrestagesResponse, error) {
	rsp, err := c.GetV1ComputerPrestages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ComputerPrestagesResponse(rsp)
}

// PostV1ComputerPrestagesWithBodyWithResponse request with arbitrary body returning *PostV1ComputerPrestagesResponse
func (c *ClientWithResponses) PostV1ComputerPrestagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ComputerPrestagesResponse, error) {
	rsp, err := c.PostV1ComputerPrestagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ComputerPrestagesResponse(rsp)
}

func (c *ClientWithResponses) PostV1ComputerPrestagesWithResponse(ctx context.Context, body PostV1ComputerPrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ComputerPrestagesResponse, error) {
	rsp, err := c.PostV1ComputerPrestages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ComputerPrestagesResponse(rsp)
}

// GetV1ComputerPrestagesScopeWithResponse request returning *GetV1ComputerPrestagesScopeResponse
func (c *ClientWithResponses) GetV1ComputerPrestagesScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ComputerPrestagesScopeResponse, error) {
	rsp, err := c.GetV1ComputerPrestagesScope(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ComputerPrestagesScopeResponse(rsp)
}

// DeleteV1ComputerPrestagesIdWithResponse request returning *DeleteV1ComputerPrestagesIdResponse
func (c *ClientWithResponses) DeleteV1ComputerPrestagesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteV1ComputerPrestagesIdResponse, error) {
	rsp, err := c.DeleteV1ComputerPrestagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ComputerPrestagesIdResponse(rsp)
}

// GetV1ComputerPrestagesIdWithResponse request returning *GetV1ComputerPrestagesIdResponse
func (c *ClientWithResponses) GetV1ComputerPrestagesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1ComputerPrestagesIdResponse, error) {
	rsp, err := c.GetV1ComputerPrestagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ComputerPrestagesIdResponse(rsp)
}

// PutV1ComputerPrestagesIdWithBodyWithResponse request with arbitrary body returning *PutV1ComputerPrestagesIdResponse
func (c *ClientWithResponses) PutV1ComputerPrestagesIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ComputerPrestagesIdResponse, error) {
	rsp, err := c.PutV1ComputerPrestagesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ComputerPrestagesIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1ComputerPrestagesIdWithResponse(ctx context.Context, id int, body PutV1ComputerPrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ComputerPrestagesIdResponse, error) {
	rsp, err := c.PutV1ComputerPrestagesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ComputerPrestagesIdResponse(rsp)
}

// DeleteV1ComputerPrestagesIdScopeWithBodyWithResponse request with arbitrary body returning *DeleteV1ComputerPrestagesIdScopeResponse
func (c *ClientWithResponses) DeleteV1ComputerPrestagesIdScopeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV1ComputerPrestagesIdScopeResponse, error) {
	rsp, err := c.DeleteV1ComputerPrestagesIdScopeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ComputerPrestagesIdScopeResponse(rsp)
}

func (c *ClientWithResponses) DeleteV1ComputerPrestagesIdScopeWithResponse(ctx context.Context, id int, body DeleteV1ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV1ComputerPrestagesIdScopeResponse, error) {
	rsp, err := c.DeleteV1ComputerPrestagesIdScope(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ComputerPrestagesIdScopeResponse(rsp)
}

// GetV1ComputerPrestagesIdScopeWithResponse request returning *GetV1ComputerPrestagesIdScopeResponse
func (c *ClientWithResponses) GetV1ComputerPrestagesIdScopeWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1ComputerPrestagesIdScopeResponse, error) {
	rsp, err := c.GetV1ComputerPrestagesIdScope(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ComputerPrestagesIdScopeResponse(rsp)
}

// PostV1ComputerPrestagesIdScopeWithBodyWithResponse request with arbitrary body returning *PostV1ComputerPrestagesIdScopeResponse
func (c *ClientWithResponses) PostV1ComputerPrestagesIdScopeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ComputerPrestagesIdScopeResponse, error) {
	rsp, err := c.PostV1ComputerPrestagesIdScopeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ComputerPrestagesIdScopeResponse(rsp)
}

func (c *ClientWithResponses) PostV1ComputerPrestagesIdScopeWithResponse(ctx context.Context, id int, body PostV1ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ComputerPrestagesIdScopeResponse, error) {
	rsp, err := c.PostV1ComputerPrestagesIdScope(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ComputerPrestagesIdScopeResponse(rsp)
}

// PutV1ComputerPrestagesIdScopeWithBodyWithResponse request with arbitrary body returning *PutV1ComputerPrestagesIdScopeResponse
func (c *ClientWithResponses) PutV1ComputerPrestagesIdScopeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ComputerPrestagesIdScopeResponse, error) {
	rsp, err := c.PutV1ComputerPrestagesIdScopeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ComputerPrestagesIdScopeResponse(rsp)
}

func (c *ClientWithResponses) PutV1ComputerPrestagesIdScopeWithResponse(ctx context.Context, id int, body PutV1ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ComputerPrestagesIdScopeResponse, error) {
	rsp, err := c.PutV1ComputerPrestagesIdScope(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ComputerPrestagesIdScopeResponse(rsp)
}

// GetV1ComputersInventoryWithResponse request returning *GetV1ComputersInventoryResponse
func (c *ClientWithResponses) GetV1ComputersInventoryWithResponse(ctx context.Context, params *GetV1ComputersInventoryParams, reqEditors ...RequestEditorFn) (*GetV1ComputersInventoryResponse, error) {
	rsp, err := c.GetV1ComputersInventory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ComputersInventoryResponse(rsp)
}

// GetV1ComputersInventoryDetailIdWithResponse request returning *GetV1ComputersInventoryDetailIdResponse
func (c *ClientWithResponses) GetV1ComputersInventoryDetailIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1ComputersInventoryDetailIdResponse, error) {
	rsp, err := c.GetV1ComputersInventoryDetailId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ComputersInventoryDetailIdResponse(rsp)
}

// PatchV1ComputersInventoryDetailIdWithBodyWithResponse request with arbitrary body returning *PatchV1ComputersInventoryDetailIdResponse
func (c *ClientWithResponses) PatchV1ComputersInventoryDetailIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1ComputersInventoryDetailIdResponse, error) {
	rsp, err := c.PatchV1ComputersInventoryDetailIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ComputersInventoryDetailIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV1ComputersInventoryDetailIdWithResponse(ctx context.Context, id string, body PatchV1ComputersInventoryDetailIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1ComputersInventoryDetailIdResponse, error) {
	rsp, err := c.PatchV1ComputersInventoryDetailId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1ComputersInventoryDetailIdResponse(rsp)
}

// DeleteV1ComputersInventoryIdWithResponse request returning *DeleteV1ComputersInventoryIdResponse
func (c *ClientWithResponses) DeleteV1ComputersInventoryIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1ComputersInventoryIdResponse, error) {
	rsp, err := c.DeleteV1ComputersInventoryId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ComputersInventoryIdResponse(rsp)
}

// GetV1ComputersInventoryIdWithResponse request returning *GetV1ComputersInventoryIdResponse
func (c *ClientWithResponses) GetV1ComputersInventoryIdWithResponse(ctx context.Context, id string, params *GetV1ComputersInventoryIdParams, reqEditors ...RequestEditorFn) (*GetV1ComputersInventoryIdResponse, error) {
	rsp, err := c.GetV1ComputersInventoryId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ComputersInventoryIdResponse(rsp)
}

// PostV1ComputersInventoryIdAttachmentsWithBodyWithResponse request with arbitrary body returning *PostV1ComputersInventoryIdAttachmentsResponse
func (c *ClientWithResponses) PostV1ComputersInventoryIdAttachmentsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ComputersInventoryIdAttachmentsResponse, error) {
	rsp, err := c.PostV1ComputersInventoryIdAttachmentsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ComputersInventoryIdAttachmentsResponse(rsp)
}

// DeleteV1ComputersInventoryIdAttachmentsAttachmentIdWithResponse request returning *DeleteV1ComputersInventoryIdAttachmentsAttachmentIdResponse
func (c *ClientWithResponses) DeleteV1ComputersInventoryIdAttachmentsAttachmentIdWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*DeleteV1ComputersInventoryIdAttachmentsAttachmentIdResponse, error) {
	rsp, err := c.DeleteV1ComputersInventoryIdAttachmentsAttachmentId(ctx, id, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ComputersInventoryIdAttachmentsAttachmentIdResponse(rsp)
}

// GetV1ComputersInventoryIdAttachmentsAttachmentIdWithResponse request returning *GetV1ComputersInventoryIdAttachmentsAttachmentIdResponse
func (c *ClientWithResponses) GetV1ComputersInventoryIdAttachmentsAttachmentIdWithResponse(ctx context.Context, id string, attachmentId string, reqEditors ...RequestEditorFn) (*GetV1ComputersInventoryIdAttachmentsAttachmentIdResponse, error) {
	rsp, err := c.GetV1ComputersInventoryIdAttachmentsAttachmentId(ctx, id, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ComputersInventoryIdAttachmentsAttachmentIdResponse(rsp)
}

// GetV1ComputersInventoryIdViewRecoveryLockPasswordWithResponse request returning *GetV1ComputersInventoryIdViewRecoveryLockPasswordResponse
func (c *ClientWithResponses) GetV1ComputersInventoryIdViewRecoveryLockPasswordWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1ComputersInventoryIdViewRecoveryLockPasswordResponse, error) {
	rsp, err := c.GetV1ComputersInventoryIdViewRecoveryLockPassword(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ComputersInventoryIdViewRecoveryLockPasswordResponse(rsp)
}

// PostV1ComputersIdRecalculateSmartGroupsWithResponse request returning *PostV1ComputersIdRecalculateSmartGroupsResponse
func (c *ClientWithResponses) PostV1ComputersIdRecalculateSmartGroupsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostV1ComputersIdRecalculateSmartGroupsResponse, error) {
	rsp, err := c.PostV1ComputersIdRecalculateSmartGroups(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ComputersIdRecalculateSmartGroupsResponse(rsp)
}

// GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdWithResponse request returning *GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdResponse
func (c *ClientWithResponses) GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdResponse, error) {
	rsp, err := c.GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceId(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdResponse(rsp)
}

// GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdWithResponse request returning *GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdResponse
func (c *ClientWithResponses) GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdWithResponse(ctx context.Context, deviceId string, reqEditors ...RequestEditorFn) (*GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdResponse, error) {
	rsp, err := c.GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceId(ctx, deviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdResponse(rsp)
}

// DeleteV1CsaTokenWithResponse request returning *DeleteV1CsaTokenResponse
func (c *ClientWithResponses) DeleteV1CsaTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteV1CsaTokenResponse, error) {
	rsp, err := c.DeleteV1CsaToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1CsaTokenResponse(rsp)
}

// GetV1CsaTokenWithResponse request returning *GetV1CsaTokenResponse
func (c *ClientWithResponses) GetV1CsaTokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1CsaTokenResponse, error) {
	rsp, err := c.GetV1CsaToken(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1CsaTokenResponse(rsp)
}

// PostV1CsaTokenWithBodyWithResponse request with arbitrary body returning *PostV1CsaTokenResponse
func (c *ClientWithResponses) PostV1CsaTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1CsaTokenResponse, error) {
	rsp, err := c.PostV1CsaTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CsaTokenResponse(rsp)
}

func (c *ClientWithResponses) PostV1CsaTokenWithResponse(ctx context.Context, body PostV1CsaTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1CsaTokenResponse, error) {
	rsp, err := c.PostV1CsaToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1CsaTokenResponse(rsp)
}

// PutV1CsaTokenWithBodyWithResponse request with arbitrary body returning *PutV1CsaTokenResponse
func (c *ClientWithResponses) PutV1CsaTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1CsaTokenResponse, error) {
	rsp, err := c.PutV1CsaTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1CsaTokenResponse(rsp)
}

func (c *ClientWithResponses) PutV1CsaTokenWithResponse(ctx context.Context, body PutV1CsaTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1CsaTokenResponse, error) {
	rsp, err := c.PutV1CsaToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1CsaTokenResponse(rsp)
}

// GetV1DepartmentsWithResponse request returning *GetV1DepartmentsResponse
func (c *ClientWithResponses) GetV1DepartmentsWithResponse(ctx context.Context, params *GetV1DepartmentsParams, reqEditors ...RequestEditorFn) (*GetV1DepartmentsResponse, error) {
	rsp, err := c.GetV1Departments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DepartmentsResponse(rsp)
}

// PostV1DepartmentsWithBodyWithResponse request with arbitrary body returning *PostV1DepartmentsResponse
func (c *ClientWithResponses) PostV1DepartmentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DepartmentsResponse, error) {
	rsp, err := c.PostV1DepartmentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DepartmentsResponse(rsp)
}

func (c *ClientWithResponses) PostV1DepartmentsWithResponse(ctx context.Context, body PostV1DepartmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DepartmentsResponse, error) {
	rsp, err := c.PostV1Departments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DepartmentsResponse(rsp)
}

// PostV1DepartmentsDeleteMultipleWithBodyWithResponse request with arbitrary body returning *PostV1DepartmentsDeleteMultipleResponse
func (c *ClientWithResponses) PostV1DepartmentsDeleteMultipleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DepartmentsDeleteMultipleResponse, error) {
	rsp, err := c.PostV1DepartmentsDeleteMultipleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DepartmentsDeleteMultipleResponse(rsp)
}

func (c *ClientWithResponses) PostV1DepartmentsDeleteMultipleWithResponse(ctx context.Context, body PostV1DepartmentsDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DepartmentsDeleteMultipleResponse, error) {
	rsp, err := c.PostV1DepartmentsDeleteMultiple(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DepartmentsDeleteMultipleResponse(rsp)
}

// DeleteV1DepartmentsIdWithResponse request returning *DeleteV1DepartmentsIdResponse
func (c *ClientWithResponses) DeleteV1DepartmentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1DepartmentsIdResponse, error) {
	rsp, err := c.DeleteV1DepartmentsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1DepartmentsIdResponse(rsp)
}

// GetV1DepartmentsIdWithResponse request returning *GetV1DepartmentsIdResponse
func (c *ClientWithResponses) GetV1DepartmentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1DepartmentsIdResponse, error) {
	rsp, err := c.GetV1DepartmentsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DepartmentsIdResponse(rsp)
}

// PutV1DepartmentsIdWithBodyWithResponse request with arbitrary body returning *PutV1DepartmentsIdResponse
func (c *ClientWithResponses) PutV1DepartmentsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1DepartmentsIdResponse, error) {
	rsp, err := c.PutV1DepartmentsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1DepartmentsIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1DepartmentsIdWithResponse(ctx context.Context, id string, body PutV1DepartmentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1DepartmentsIdResponse, error) {
	rsp, err := c.PutV1DepartmentsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1DepartmentsIdResponse(rsp)
}

// GetV1DepartmentsIdHistoryWithResponse request returning *GetV1DepartmentsIdHistoryResponse
func (c *ClientWithResponses) GetV1DepartmentsIdHistoryWithResponse(ctx context.Context, id string, params *GetV1DepartmentsIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1DepartmentsIdHistoryResponse, error) {
	rsp, err := c.GetV1DepartmentsIdHistory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DepartmentsIdHistoryResponse(rsp)
}

// PostV1DepartmentsIdHistoryWithBodyWithResponse request with arbitrary body returning *PostV1DepartmentsIdHistoryResponse
func (c *ClientWithResponses) PostV1DepartmentsIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DepartmentsIdHistoryResponse, error) {
	rsp, err := c.PostV1DepartmentsIdHistoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DepartmentsIdHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1DepartmentsIdHistoryWithResponse(ctx context.Context, id string, body PostV1DepartmentsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DepartmentsIdHistoryResponse, error) {
	rsp, err := c.PostV1DepartmentsIdHistory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DepartmentsIdHistoryResponse(rsp)
}

// PostV1DeployPackageWithBodyWithResponse request with arbitrary body returning *PostV1DeployPackageResponse
func (c *ClientWithResponses) PostV1DeployPackageWithBodyWithResponse(ctx context.Context, params *PostV1DeployPackageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DeployPackageResponse, error) {
	rsp, err := c.PostV1DeployPackageWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DeployPackageResponse(rsp)
}

func (c *ClientWithResponses) PostV1DeployPackageWithResponse(ctx context.Context, params *PostV1DeployPackageParams, body PostV1DeployPackageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DeployPackageResponse, error) {
	rsp, err := c.PostV1DeployPackage(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DeployPackageResponse(rsp)
}

// GetV1DeviceCommunicationSettingsWithResponse request returning *GetV1DeviceCommunicationSettingsResponse
func (c *ClientWithResponses) GetV1DeviceCommunicationSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1DeviceCommunicationSettingsResponse, error) {
	rsp, err := c.GetV1DeviceCommunicationSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DeviceCommunicationSettingsResponse(rsp)
}

// PutV1DeviceCommunicationSettingsWithBodyWithResponse request with arbitrary body returning *PutV1DeviceCommunicationSettingsResponse
func (c *ClientWithResponses) PutV1DeviceCommunicationSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1DeviceCommunicationSettingsResponse, error) {
	rsp, err := c.PutV1DeviceCommunicationSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1DeviceCommunicationSettingsResponse(rsp)
}

func (c *ClientWithResponses) PutV1DeviceCommunicationSettingsWithResponse(ctx context.Context, body PutV1DeviceCommunicationSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1DeviceCommunicationSettingsResponse, error) {
	rsp, err := c.PutV1DeviceCommunicationSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1DeviceCommunicationSettingsResponse(rsp)
}

// GetV1DeviceCommunicationSettingsHistoryWithResponse request returning *GetV1DeviceCommunicationSettingsHistoryResponse
func (c *ClientWithResponses) GetV1DeviceCommunicationSettingsHistoryWithResponse(ctx context.Context, params *GetV1DeviceCommunicationSettingsHistoryParams, reqEditors ...RequestEditorFn) (*GetV1DeviceCommunicationSettingsHistoryResponse, error) {
	rsp, err := c.GetV1DeviceCommunicationSettingsHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DeviceCommunicationSettingsHistoryResponse(rsp)
}

// PostV1DeviceCommunicationSettingsHistoryWithBodyWithResponse request with arbitrary body returning *PostV1DeviceCommunicationSettingsHistoryResponse
func (c *ClientWithResponses) PostV1DeviceCommunicationSettingsHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DeviceCommunicationSettingsHistoryResponse, error) {
	rsp, err := c.PostV1DeviceCommunicationSettingsHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DeviceCommunicationSettingsHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1DeviceCommunicationSettingsHistoryWithResponse(ctx context.Context, body PostV1DeviceCommunicationSettingsHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DeviceCommunicationSettingsHistoryResponse, error) {
	rsp, err := c.PostV1DeviceCommunicationSettingsHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DeviceCommunicationSettingsHistoryResponse(rsp)
}

// GetV1DeviceEnrollmentsWithResponse request returning *GetV1DeviceEnrollmentsResponse
func (c *ClientWithResponses) GetV1DeviceEnrollmentsWithResponse(ctx context.Context, params *GetV1DeviceEnrollmentsParams, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsResponse, error) {
	rsp, err := c.GetV1DeviceEnrollments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DeviceEnrollmentsResponse(rsp)
}

// GetV1DeviceEnrollmentsPublicKeyWithResponse request returning *GetV1DeviceEnrollmentsPublicKeyResponse
func (c *ClientWithResponses) GetV1DeviceEnrollmentsPublicKeyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsPublicKeyResponse, error) {
	rsp, err := c.GetV1DeviceEnrollmentsPublicKey(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DeviceEnrollmentsPublicKeyResponse(rsp)
}

// GetV1DeviceEnrollmentsSyncsWithResponse request returning *GetV1DeviceEnrollmentsSyncsResponse
func (c *ClientWithResponses) GetV1DeviceEnrollmentsSyncsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsSyncsResponse, error) {
	rsp, err := c.GetV1DeviceEnrollmentsSyncs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DeviceEnrollmentsSyncsResponse(rsp)
}

// PostV1DeviceEnrollmentsUploadTokenWithBodyWithResponse request with arbitrary body returning *PostV1DeviceEnrollmentsUploadTokenResponse
func (c *ClientWithResponses) PostV1DeviceEnrollmentsUploadTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DeviceEnrollmentsUploadTokenResponse, error) {
	rsp, err := c.PostV1DeviceEnrollmentsUploadTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DeviceEnrollmentsUploadTokenResponse(rsp)
}

func (c *ClientWithResponses) PostV1DeviceEnrollmentsUploadTokenWithResponse(ctx context.Context, body PostV1DeviceEnrollmentsUploadTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DeviceEnrollmentsUploadTokenResponse, error) {
	rsp, err := c.PostV1DeviceEnrollmentsUploadToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DeviceEnrollmentsUploadTokenResponse(rsp)
}

// DeleteV1DeviceEnrollmentsIdWithResponse request returning *DeleteV1DeviceEnrollmentsIdResponse
func (c *ClientWithResponses) DeleteV1DeviceEnrollmentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1DeviceEnrollmentsIdResponse, error) {
	rsp, err := c.DeleteV1DeviceEnrollmentsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1DeviceEnrollmentsIdResponse(rsp)
}

// GetV1DeviceEnrollmentsIdWithResponse request returning *GetV1DeviceEnrollmentsIdResponse
func (c *ClientWithResponses) GetV1DeviceEnrollmentsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsIdResponse, error) {
	rsp, err := c.GetV1DeviceEnrollmentsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DeviceEnrollmentsIdResponse(rsp)
}

// PutV1DeviceEnrollmentsIdWithBodyWithResponse request with arbitrary body returning *PutV1DeviceEnrollmentsIdResponse
func (c *ClientWithResponses) PutV1DeviceEnrollmentsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1DeviceEnrollmentsIdResponse, error) {
	rsp, err := c.PutV1DeviceEnrollmentsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1DeviceEnrollmentsIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1DeviceEnrollmentsIdWithResponse(ctx context.Context, id string, body PutV1DeviceEnrollmentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1DeviceEnrollmentsIdResponse, error) {
	rsp, err := c.PutV1DeviceEnrollmentsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1DeviceEnrollmentsIdResponse(rsp)
}

// GetV1DeviceEnrollmentsIdDevicesWithResponse request returning *GetV1DeviceEnrollmentsIdDevicesResponse
func (c *ClientWithResponses) GetV1DeviceEnrollmentsIdDevicesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsIdDevicesResponse, error) {
	rsp, err := c.GetV1DeviceEnrollmentsIdDevices(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DeviceEnrollmentsIdDevicesResponse(rsp)
}

// PostV1DeviceEnrollmentsIdDisownWithBodyWithResponse request with arbitrary body returning *PostV1DeviceEnrollmentsIdDisownResponse
func (c *ClientWithResponses) PostV1DeviceEnrollmentsIdDisownWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DeviceEnrollmentsIdDisownResponse, error) {
	rsp, err := c.PostV1DeviceEnrollmentsIdDisownWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DeviceEnrollmentsIdDisownResponse(rsp)
}

func (c *ClientWithResponses) PostV1DeviceEnrollmentsIdDisownWithResponse(ctx context.Context, id string, body PostV1DeviceEnrollmentsIdDisownJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DeviceEnrollmentsIdDisownResponse, error) {
	rsp, err := c.PostV1DeviceEnrollmentsIdDisown(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DeviceEnrollmentsIdDisownResponse(rsp)
}

// GetV1DeviceEnrollmentsIdHistoryWithResponse request returning *GetV1DeviceEnrollmentsIdHistoryResponse
func (c *ClientWithResponses) GetV1DeviceEnrollmentsIdHistoryWithResponse(ctx context.Context, id string, params *GetV1DeviceEnrollmentsIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsIdHistoryResponse, error) {
	rsp, err := c.GetV1DeviceEnrollmentsIdHistory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DeviceEnrollmentsIdHistoryResponse(rsp)
}

// PostV1DeviceEnrollmentsIdHistoryWithBodyWithResponse request with arbitrary body returning *PostV1DeviceEnrollmentsIdHistoryResponse
func (c *ClientWithResponses) PostV1DeviceEnrollmentsIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DeviceEnrollmentsIdHistoryResponse, error) {
	rsp, err := c.PostV1DeviceEnrollmentsIdHistoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DeviceEnrollmentsIdHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1DeviceEnrollmentsIdHistoryWithResponse(ctx context.Context, id string, body PostV1DeviceEnrollmentsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DeviceEnrollmentsIdHistoryResponse, error) {
	rsp, err := c.PostV1DeviceEnrollmentsIdHistory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DeviceEnrollmentsIdHistoryResponse(rsp)
}

// GetV1DeviceEnrollmentsIdSyncsWithResponse request returning *GetV1DeviceEnrollmentsIdSyncsResponse
func (c *ClientWithResponses) GetV1DeviceEnrollmentsIdSyncsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsIdSyncsResponse, error) {
	rsp, err := c.GetV1DeviceEnrollmentsIdSyncs(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DeviceEnrollmentsIdSyncsResponse(rsp)
}

// GetV1DeviceEnrollmentsIdSyncsLatestWithResponse request returning *GetV1DeviceEnrollmentsIdSyncsLatestResponse
func (c *ClientWithResponses) GetV1DeviceEnrollmentsIdSyncsLatestWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1DeviceEnrollmentsIdSyncsLatestResponse, error) {
	rsp, err := c.GetV1DeviceEnrollmentsIdSyncsLatest(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DeviceEnrollmentsIdSyncsLatestResponse(rsp)
}

// PutV1DeviceEnrollmentsIdUploadTokenWithBodyWithResponse request with arbitrary body returning *PutV1DeviceEnrollmentsIdUploadTokenResponse
func (c *ClientWithResponses) PutV1DeviceEnrollmentsIdUploadTokenWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1DeviceEnrollmentsIdUploadTokenResponse, error) {
	rsp, err := c.PutV1DeviceEnrollmentsIdUploadTokenWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1DeviceEnrollmentsIdUploadTokenResponse(rsp)
}

func (c *ClientWithResponses) PutV1DeviceEnrollmentsIdUploadTokenWithResponse(ctx context.Context, id string, body PutV1DeviceEnrollmentsIdUploadTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1DeviceEnrollmentsIdUploadTokenResponse, error) {
	rsp, err := c.PutV1DeviceEnrollmentsIdUploadToken(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1DeviceEnrollmentsIdUploadTokenResponse(rsp)
}

// GetV1EbooksWithResponse request returning *GetV1EbooksResponse
func (c *ClientWithResponses) GetV1EbooksWithResponse(ctx context.Context, params *GetV1EbooksParams, reqEditors ...RequestEditorFn) (*GetV1EbooksResponse, error) {
	rsp, err := c.GetV1Ebooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EbooksResponse(rsp)
}

// GetV1EbooksIdWithResponse request returning *GetV1EbooksIdResponse
func (c *ClientWithResponses) GetV1EbooksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1EbooksIdResponse, error) {
	rsp, err := c.GetV1EbooksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EbooksIdResponse(rsp)
}

// GetV1EbooksIdScopeWithResponse request returning *GetV1EbooksIdScopeResponse
func (c *ClientWithResponses) GetV1EbooksIdScopeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1EbooksIdScopeResponse, error) {
	rsp, err := c.GetV1EbooksIdScope(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EbooksIdScopeResponse(rsp)
}

// GetV1EngageWithResponse request returning *GetV1EngageResponse
func (c *ClientWithResponses) GetV1EngageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1EngageResponse, error) {
	rsp, err := c.GetV1Engage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EngageResponse(rsp)
}

// PutV1EngageWithBodyWithResponse request with arbitrary body returning *PutV1EngageResponse
func (c *ClientWithResponses) PutV1EngageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EngageResponse, error) {
	rsp, err := c.PutV1EngageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EngageResponse(rsp)
}

func (c *ClientWithResponses) PutV1EngageWithResponse(ctx context.Context, body PutV1EngageJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EngageResponse, error) {
	rsp, err := c.PutV1Engage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EngageResponse(rsp)
}

// GetV1EngageHistoryWithResponse request returning *GetV1EngageHistoryResponse
func (c *ClientWithResponses) GetV1EngageHistoryWithResponse(ctx context.Context, params *GetV1EngageHistoryParams, reqEditors ...RequestEditorFn) (*GetV1EngageHistoryResponse, error) {
	rsp, err := c.GetV1EngageHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EngageHistoryResponse(rsp)
}

// PostV1EngageHistoryWithBodyWithResponse request with arbitrary body returning *PostV1EngageHistoryResponse
func (c *ClientWithResponses) PostV1EngageHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EngageHistoryResponse, error) {
	rsp, err := c.PostV1EngageHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EngageHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1EngageHistoryWithResponse(ctx context.Context, body PostV1EngageHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EngageHistoryResponse, error) {
	rsp, err := c.PostV1EngageHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EngageHistoryResponse(rsp)
}

// GetV1EnrollmentWithResponse request returning *GetV1EnrollmentResponse
func (c *ClientWithResponses) GetV1EnrollmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1EnrollmentResponse, error) {
	rsp, err := c.GetV1Enrollment(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentResponse(rsp)
}

// PutV1EnrollmentWithBodyWithResponse request with arbitrary body returning *PutV1EnrollmentResponse
func (c *ClientWithResponses) PutV1EnrollmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EnrollmentResponse, error) {
	rsp, err := c.PutV1EnrollmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EnrollmentResponse(rsp)
}

func (c *ClientWithResponses) PutV1EnrollmentWithResponse(ctx context.Context, body PutV1EnrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EnrollmentResponse, error) {
	rsp, err := c.PutV1Enrollment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EnrollmentResponse(rsp)
}

// GetV1EnrollmentCustomizationWithResponse request returning *GetV1EnrollmentCustomizationResponse
func (c *ClientWithResponses) GetV1EnrollmentCustomizationWithResponse(ctx context.Context, params *GetV1EnrollmentCustomizationParams, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationResponse, error) {
	rsp, err := c.GetV1EnrollmentCustomization(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentCustomizationResponse(rsp)
}

// PostV1EnrollmentCustomizationWithBodyWithResponse request with arbitrary body returning *PostV1EnrollmentCustomizationResponse
func (c *ClientWithResponses) PostV1EnrollmentCustomizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationResponse, error) {
	rsp, err := c.PostV1EnrollmentCustomizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentCustomizationResponse(rsp)
}

func (c *ClientWithResponses) PostV1EnrollmentCustomizationWithResponse(ctx context.Context, body PostV1EnrollmentCustomizationJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationResponse, error) {
	rsp, err := c.PostV1EnrollmentCustomization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentCustomizationResponse(rsp)
}

// PostV1EnrollmentCustomizationImagesWithBodyWithResponse request with arbitrary body returning *PostV1EnrollmentCustomizationImagesResponse
func (c *ClientWithResponses) PostV1EnrollmentCustomizationImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationImagesResponse, error) {
	rsp, err := c.PostV1EnrollmentCustomizationImagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentCustomizationImagesResponse(rsp)
}

// PostV1EnrollmentCustomizationParseMarkdownWithBodyWithResponse request with arbitrary body returning *PostV1EnrollmentCustomizationParseMarkdownResponse
func (c *ClientWithResponses) PostV1EnrollmentCustomizationParseMarkdownWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationParseMarkdownResponse, error) {
	rsp, err := c.PostV1EnrollmentCustomizationParseMarkdownWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentCustomizationParseMarkdownResponse(rsp)
}

func (c *ClientWithResponses) PostV1EnrollmentCustomizationParseMarkdownWithResponse(ctx context.Context, body PostV1EnrollmentCustomizationParseMarkdownJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationParseMarkdownResponse, error) {
	rsp, err := c.PostV1EnrollmentCustomizationParseMarkdown(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentCustomizationParseMarkdownResponse(rsp)
}

// DeleteV1EnrollmentCustomizationIdWithResponse request returning *DeleteV1EnrollmentCustomizationIdResponse
func (c *ClientWithResponses) DeleteV1EnrollmentCustomizationIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteV1EnrollmentCustomizationIdResponse, error) {
	rsp, err := c.DeleteV1EnrollmentCustomizationId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1EnrollmentCustomizationIdResponse(rsp)
}

// GetV1EnrollmentCustomizationIdWithResponse request returning *GetV1EnrollmentCustomizationIdResponse
func (c *ClientWithResponses) GetV1EnrollmentCustomizationIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdResponse, error) {
	rsp, err := c.GetV1EnrollmentCustomizationId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentCustomizationIdResponse(rsp)
}

// PutV1EnrollmentCustomizationIdWithBodyWithResponse request with arbitrary body returning *PutV1EnrollmentCustomizationIdResponse
func (c *ClientWithResponses) PutV1EnrollmentCustomizationIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdResponse, error) {
	rsp, err := c.PutV1EnrollmentCustomizationIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EnrollmentCustomizationIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1EnrollmentCustomizationIdWithResponse(ctx context.Context, id int, body PutV1EnrollmentCustomizationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdResponse, error) {
	rsp, err := c.PutV1EnrollmentCustomizationId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EnrollmentCustomizationIdResponse(rsp)
}

// GetV1EnrollmentCustomizationIdAllWithResponse request returning *GetV1EnrollmentCustomizationIdAllResponse
func (c *ClientWithResponses) GetV1EnrollmentCustomizationIdAllWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdAllResponse, error) {
	rsp, err := c.GetV1EnrollmentCustomizationIdAll(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentCustomizationIdAllResponse(rsp)
}

// DeleteV1EnrollmentCustomizationIdAllPanelIdWithResponse request returning *DeleteV1EnrollmentCustomizationIdAllPanelIdResponse
func (c *ClientWithResponses) DeleteV1EnrollmentCustomizationIdAllPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*DeleteV1EnrollmentCustomizationIdAllPanelIdResponse, error) {
	rsp, err := c.DeleteV1EnrollmentCustomizationIdAllPanelId(ctx, id, panelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1EnrollmentCustomizationIdAllPanelIdResponse(rsp)
}

// GetV1EnrollmentCustomizationIdAllPanelIdWithResponse request returning *GetV1EnrollmentCustomizationIdAllPanelIdResponse
func (c *ClientWithResponses) GetV1EnrollmentCustomizationIdAllPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdAllPanelIdResponse, error) {
	rsp, err := c.GetV1EnrollmentCustomizationIdAllPanelId(ctx, id, panelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentCustomizationIdAllPanelIdResponse(rsp)
}

// GetV1EnrollmentCustomizationIdHistoryWithResponse request returning *GetV1EnrollmentCustomizationIdHistoryResponse
func (c *ClientWithResponses) GetV1EnrollmentCustomizationIdHistoryWithResponse(ctx context.Context, id int, params *GetV1EnrollmentCustomizationIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdHistoryResponse, error) {
	rsp, err := c.GetV1EnrollmentCustomizationIdHistory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentCustomizationIdHistoryResponse(rsp)
}

// PostV1EnrollmentCustomizationIdHistoryWithBodyWithResponse request with arbitrary body returning *PostV1EnrollmentCustomizationIdHistoryResponse
func (c *ClientWithResponses) PostV1EnrollmentCustomizationIdHistoryWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdHistoryResponse, error) {
	rsp, err := c.PostV1EnrollmentCustomizationIdHistoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentCustomizationIdHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1EnrollmentCustomizationIdHistoryWithResponse(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdHistoryResponse, error) {
	rsp, err := c.PostV1EnrollmentCustomizationIdHistory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentCustomizationIdHistoryResponse(rsp)
}

// PostV1EnrollmentCustomizationIdLdapWithBodyWithResponse request with arbitrary body returning *PostV1EnrollmentCustomizationIdLdapResponse
func (c *ClientWithResponses) PostV1EnrollmentCustomizationIdLdapWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdLdapResponse, error) {
	rsp, err := c.PostV1EnrollmentCustomizationIdLdapWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentCustomizationIdLdapResponse(rsp)
}

func (c *ClientWithResponses) PostV1EnrollmentCustomizationIdLdapWithResponse(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdLdapJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdLdapResponse, error) {
	rsp, err := c.PostV1EnrollmentCustomizationIdLdap(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentCustomizationIdLdapResponse(rsp)
}

// DeleteV1EnrollmentCustomizationIdLdapPanelIdWithResponse request returning *DeleteV1EnrollmentCustomizationIdLdapPanelIdResponse
func (c *ClientWithResponses) DeleteV1EnrollmentCustomizationIdLdapPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*DeleteV1EnrollmentCustomizationIdLdapPanelIdResponse, error) {
	rsp, err := c.DeleteV1EnrollmentCustomizationIdLdapPanelId(ctx, id, panelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1EnrollmentCustomizationIdLdapPanelIdResponse(rsp)
}

// GetV1EnrollmentCustomizationIdLdapPanelIdWithResponse request returning *GetV1EnrollmentCustomizationIdLdapPanelIdResponse
func (c *ClientWithResponses) GetV1EnrollmentCustomizationIdLdapPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdLdapPanelIdResponse, error) {
	rsp, err := c.GetV1EnrollmentCustomizationIdLdapPanelId(ctx, id, panelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentCustomizationIdLdapPanelIdResponse(rsp)
}

// PutV1EnrollmentCustomizationIdLdapPanelIdWithBodyWithResponse request with arbitrary body returning *PutV1EnrollmentCustomizationIdLdapPanelIdResponse
func (c *ClientWithResponses) PutV1EnrollmentCustomizationIdLdapPanelIdWithBodyWithResponse(ctx context.Context, id int, panelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdLdapPanelIdResponse, error) {
	rsp, err := c.PutV1EnrollmentCustomizationIdLdapPanelIdWithBody(ctx, id, panelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EnrollmentCustomizationIdLdapPanelIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1EnrollmentCustomizationIdLdapPanelIdWithResponse(ctx context.Context, id int, panelId int, body PutV1EnrollmentCustomizationIdLdapPanelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdLdapPanelIdResponse, error) {
	rsp, err := c.PutV1EnrollmentCustomizationIdLdapPanelId(ctx, id, panelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EnrollmentCustomizationIdLdapPanelIdResponse(rsp)
}

// GetV1EnrollmentCustomizationIdPrestagesWithResponse request returning *GetV1EnrollmentCustomizationIdPrestagesResponse
func (c *ClientWithResponses) GetV1EnrollmentCustomizationIdPrestagesWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdPrestagesResponse, error) {
	rsp, err := c.GetV1EnrollmentCustomizationIdPrestages(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentCustomizationIdPrestagesResponse(rsp)
}

// PostV1EnrollmentCustomizationIdSsoWithBodyWithResponse request with arbitrary body returning *PostV1EnrollmentCustomizationIdSsoResponse
func (c *ClientWithResponses) PostV1EnrollmentCustomizationIdSsoWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdSsoResponse, error) {
	rsp, err := c.PostV1EnrollmentCustomizationIdSsoWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentCustomizationIdSsoResponse(rsp)
}

func (c *ClientWithResponses) PostV1EnrollmentCustomizationIdSsoWithResponse(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdSsoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdSsoResponse, error) {
	rsp, err := c.PostV1EnrollmentCustomizationIdSso(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentCustomizationIdSsoResponse(rsp)
}

// DeleteV1EnrollmentCustomizationIdSsoPanelIdWithResponse request returning *DeleteV1EnrollmentCustomizationIdSsoPanelIdResponse
func (c *ClientWithResponses) DeleteV1EnrollmentCustomizationIdSsoPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*DeleteV1EnrollmentCustomizationIdSsoPanelIdResponse, error) {
	rsp, err := c.DeleteV1EnrollmentCustomizationIdSsoPanelId(ctx, id, panelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1EnrollmentCustomizationIdSsoPanelIdResponse(rsp)
}

// GetV1EnrollmentCustomizationIdSsoPanelIdWithResponse request returning *GetV1EnrollmentCustomizationIdSsoPanelIdResponse
func (c *ClientWithResponses) GetV1EnrollmentCustomizationIdSsoPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdSsoPanelIdResponse, error) {
	rsp, err := c.GetV1EnrollmentCustomizationIdSsoPanelId(ctx, id, panelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentCustomizationIdSsoPanelIdResponse(rsp)
}

// PutV1EnrollmentCustomizationIdSsoPanelIdWithBodyWithResponse request with arbitrary body returning *PutV1EnrollmentCustomizationIdSsoPanelIdResponse
func (c *ClientWithResponses) PutV1EnrollmentCustomizationIdSsoPanelIdWithBodyWithResponse(ctx context.Context, id int, panelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdSsoPanelIdResponse, error) {
	rsp, err := c.PutV1EnrollmentCustomizationIdSsoPanelIdWithBody(ctx, id, panelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EnrollmentCustomizationIdSsoPanelIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1EnrollmentCustomizationIdSsoPanelIdWithResponse(ctx context.Context, id int, panelId int, body PutV1EnrollmentCustomizationIdSsoPanelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdSsoPanelIdResponse, error) {
	rsp, err := c.PutV1EnrollmentCustomizationIdSsoPanelId(ctx, id, panelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EnrollmentCustomizationIdSsoPanelIdResponse(rsp)
}

// PostV1EnrollmentCustomizationIdTextWithBodyWithResponse request with arbitrary body returning *PostV1EnrollmentCustomizationIdTextResponse
func (c *ClientWithResponses) PostV1EnrollmentCustomizationIdTextWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdTextResponse, error) {
	rsp, err := c.PostV1EnrollmentCustomizationIdTextWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentCustomizationIdTextResponse(rsp)
}

func (c *ClientWithResponses) PostV1EnrollmentCustomizationIdTextWithResponse(ctx context.Context, id int, body PostV1EnrollmentCustomizationIdTextJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrollmentCustomizationIdTextResponse, error) {
	rsp, err := c.PostV1EnrollmentCustomizationIdText(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentCustomizationIdTextResponse(rsp)
}

// DeleteV1EnrollmentCustomizationIdTextPanelIdWithResponse request returning *DeleteV1EnrollmentCustomizationIdTextPanelIdResponse
func (c *ClientWithResponses) DeleteV1EnrollmentCustomizationIdTextPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*DeleteV1EnrollmentCustomizationIdTextPanelIdResponse, error) {
	rsp, err := c.DeleteV1EnrollmentCustomizationIdTextPanelId(ctx, id, panelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1EnrollmentCustomizationIdTextPanelIdResponse(rsp)
}

// GetV1EnrollmentCustomizationIdTextPanelIdWithResponse request returning *GetV1EnrollmentCustomizationIdTextPanelIdResponse
func (c *ClientWithResponses) GetV1EnrollmentCustomizationIdTextPanelIdWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdTextPanelIdResponse, error) {
	rsp, err := c.GetV1EnrollmentCustomizationIdTextPanelId(ctx, id, panelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentCustomizationIdTextPanelIdResponse(rsp)
}

// PutV1EnrollmentCustomizationIdTextPanelIdWithBodyWithResponse request with arbitrary body returning *PutV1EnrollmentCustomizationIdTextPanelIdResponse
func (c *ClientWithResponses) PutV1EnrollmentCustomizationIdTextPanelIdWithBodyWithResponse(ctx context.Context, id int, panelId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdTextPanelIdResponse, error) {
	rsp, err := c.PutV1EnrollmentCustomizationIdTextPanelIdWithBody(ctx, id, panelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EnrollmentCustomizationIdTextPanelIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1EnrollmentCustomizationIdTextPanelIdWithResponse(ctx context.Context, id int, panelId int, body PutV1EnrollmentCustomizationIdTextPanelIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EnrollmentCustomizationIdTextPanelIdResponse, error) {
	rsp, err := c.PutV1EnrollmentCustomizationIdTextPanelId(ctx, id, panelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EnrollmentCustomizationIdTextPanelIdResponse(rsp)
}

// GetV1EnrollmentCustomizationIdTextPanelIdMarkdownWithResponse request returning *GetV1EnrollmentCustomizationIdTextPanelIdMarkdownResponse
func (c *ClientWithResponses) GetV1EnrollmentCustomizationIdTextPanelIdMarkdownWithResponse(ctx context.Context, id int, panelId int, reqEditors ...RequestEditorFn) (*GetV1EnrollmentCustomizationIdTextPanelIdMarkdownResponse, error) {
	rsp, err := c.GetV1EnrollmentCustomizationIdTextPanelIdMarkdown(ctx, id, panelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentCustomizationIdTextPanelIdMarkdownResponse(rsp)
}

// GetV1EnrollmentAccessGroupsWithResponse request returning *GetV1EnrollmentAccessGroupsResponse
func (c *ClientWithResponses) GetV1EnrollmentAccessGroupsWithResponse(ctx context.Context, params *GetV1EnrollmentAccessGroupsParams, reqEditors ...RequestEditorFn) (*GetV1EnrollmentAccessGroupsResponse, error) {
	rsp, err := c.GetV1EnrollmentAccessGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentAccessGroupsResponse(rsp)
}

// DeleteV1EnrollmentAccessGroupsGroupKeyWithResponse request returning *DeleteV1EnrollmentAccessGroupsGroupKeyResponse
func (c *ClientWithResponses) DeleteV1EnrollmentAccessGroupsGroupKeyWithResponse(ctx context.Context, groupKey string, reqEditors ...RequestEditorFn) (*DeleteV1EnrollmentAccessGroupsGroupKeyResponse, error) {
	rsp, err := c.DeleteV1EnrollmentAccessGroupsGroupKey(ctx, groupKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1EnrollmentAccessGroupsGroupKeyResponse(rsp)
}

// GetV1EnrollmentAccessGroupsGroupKeyWithResponse request returning *GetV1EnrollmentAccessGroupsGroupKeyResponse
func (c *ClientWithResponses) GetV1EnrollmentAccessGroupsGroupKeyWithResponse(ctx context.Context, groupKey string, reqEditors ...RequestEditorFn) (*GetV1EnrollmentAccessGroupsGroupKeyResponse, error) {
	rsp, err := c.GetV1EnrollmentAccessGroupsGroupKey(ctx, groupKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentAccessGroupsGroupKeyResponse(rsp)
}

// PutV1EnrollmentAccessGroupsGroupKeyWithBodyWithResponse request with arbitrary body returning *PutV1EnrollmentAccessGroupsGroupKeyResponse
func (c *ClientWithResponses) PutV1EnrollmentAccessGroupsGroupKeyWithBodyWithResponse(ctx context.Context, groupKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EnrollmentAccessGroupsGroupKeyResponse, error) {
	rsp, err := c.PutV1EnrollmentAccessGroupsGroupKeyWithBody(ctx, groupKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EnrollmentAccessGroupsGroupKeyResponse(rsp)
}

func (c *ClientWithResponses) PutV1EnrollmentAccessGroupsGroupKeyWithResponse(ctx context.Context, groupKey string, body PutV1EnrollmentAccessGroupsGroupKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EnrollmentAccessGroupsGroupKeyResponse, error) {
	rsp, err := c.PutV1EnrollmentAccessGroupsGroupKey(ctx, groupKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EnrollmentAccessGroupsGroupKeyResponse(rsp)
}

// GetV1EnrollmentFilteredLanguageCodesWithResponse request returning *GetV1EnrollmentFilteredLanguageCodesResponse
func (c *ClientWithResponses) GetV1EnrollmentFilteredLanguageCodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1EnrollmentFilteredLanguageCodesResponse, error) {
	rsp, err := c.GetV1EnrollmentFilteredLanguageCodes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentFilteredLanguageCodesResponse(rsp)
}

// GetV1EnrollmentHistoryWithResponse request returning *GetV1EnrollmentHistoryResponse
func (c *ClientWithResponses) GetV1EnrollmentHistoryWithResponse(ctx context.Context, params *GetV1EnrollmentHistoryParams, reqEditors ...RequestEditorFn) (*GetV1EnrollmentHistoryResponse, error) {
	rsp, err := c.GetV1EnrollmentHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentHistoryResponse(rsp)
}

// PostV1EnrollmentHistoryWithBodyWithResponse request with arbitrary body returning *PostV1EnrollmentHistoryResponse
func (c *ClientWithResponses) PostV1EnrollmentHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrollmentHistoryResponse, error) {
	rsp, err := c.PostV1EnrollmentHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1EnrollmentHistoryWithResponse(ctx context.Context, body PostV1EnrollmentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrollmentHistoryResponse, error) {
	rsp, err := c.PostV1EnrollmentHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrollmentHistoryResponse(rsp)
}

// GetV1EnrollmentLanguageCodesWithResponse request returning *GetV1EnrollmentLanguageCodesResponse
func (c *ClientWithResponses) GetV1EnrollmentLanguageCodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1EnrollmentLanguageCodesResponse, error) {
	rsp, err := c.GetV1EnrollmentLanguageCodes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentLanguageCodesResponse(rsp)
}

// GetV1EnrollmentLanguagesWithResponse request returning *GetV1EnrollmentLanguagesResponse
func (c *ClientWithResponses) GetV1EnrollmentLanguagesWithResponse(ctx context.Context, params *GetV1EnrollmentLanguagesParams, reqEditors ...RequestEditorFn) (*GetV1EnrollmentLanguagesResponse, error) {
	rsp, err := c.GetV1EnrollmentLanguages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentLanguagesResponse(rsp)
}

// DeleteV1EnrollmentLanguagesLanguageWithResponse request returning *DeleteV1EnrollmentLanguagesLanguageResponse
func (c *ClientWithResponses) DeleteV1EnrollmentLanguagesLanguageWithResponse(ctx context.Context, language string, reqEditors ...RequestEditorFn) (*DeleteV1EnrollmentLanguagesLanguageResponse, error) {
	rsp, err := c.DeleteV1EnrollmentLanguagesLanguage(ctx, language, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1EnrollmentLanguagesLanguageResponse(rsp)
}

// GetV1EnrollmentLanguagesLanguageWithResponse request returning *GetV1EnrollmentLanguagesLanguageResponse
func (c *ClientWithResponses) GetV1EnrollmentLanguagesLanguageWithResponse(ctx context.Context, language string, reqEditors ...RequestEditorFn) (*GetV1EnrollmentLanguagesLanguageResponse, error) {
	rsp, err := c.GetV1EnrollmentLanguagesLanguage(ctx, language, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1EnrollmentLanguagesLanguageResponse(rsp)
}

// PutV1EnrollmentLanguagesLanguageWithBodyWithResponse request with arbitrary body returning *PutV1EnrollmentLanguagesLanguageResponse
func (c *ClientWithResponses) PutV1EnrollmentLanguagesLanguageWithBodyWithResponse(ctx context.Context, language string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1EnrollmentLanguagesLanguageResponse, error) {
	rsp, err := c.PutV1EnrollmentLanguagesLanguageWithBody(ctx, language, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EnrollmentLanguagesLanguageResponse(rsp)
}

func (c *ClientWithResponses) PutV1EnrollmentLanguagesLanguageWithResponse(ctx context.Context, language string, body PutV1EnrollmentLanguagesLanguageJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1EnrollmentLanguagesLanguageResponse, error) {
	rsp, err := c.PutV1EnrollmentLanguagesLanguage(ctx, language, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1EnrollmentLanguagesLanguageResponse(rsp)
}

// PostV1IconWithBodyWithResponse request with arbitrary body returning *PostV1IconResponse
func (c *ClientWithResponses) PostV1IconWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IconResponse, error) {
	rsp, err := c.PostV1IconWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IconResponse(rsp)
}

// GetV1IconIdWithResponse request returning *GetV1IconIdResponse
func (c *ClientWithResponses) GetV1IconIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1IconIdResponse, error) {
	rsp, err := c.GetV1IconId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1IconIdResponse(rsp)
}

// GetV1InventoryInformationWithResponse request returning *GetV1InventoryInformationResponse
func (c *ClientWithResponses) GetV1InventoryInformationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1InventoryInformationResponse, error) {
	rsp, err := c.GetV1InventoryInformation(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1InventoryInformationResponse(rsp)
}

// DeleteV1InventoryPreloadWithResponse request returning *DeleteV1InventoryPreloadResponse
func (c *ClientWithResponses) DeleteV1InventoryPreloadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteV1InventoryPreloadResponse, error) {
	rsp, err := c.DeleteV1InventoryPreload(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1InventoryPreloadResponse(rsp)
}

// GetV1InventoryPreloadWithResponse request returning *GetV1InventoryPreloadResponse
func (c *ClientWithResponses) GetV1InventoryPreloadWithResponse(ctx context.Context, params *GetV1InventoryPreloadParams, reqEditors ...RequestEditorFn) (*GetV1InventoryPreloadResponse, error) {
	rsp, err := c.GetV1InventoryPreload(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1InventoryPreloadResponse(rsp)
}

// PostV1InventoryPreloadWithBodyWithResponse request with arbitrary body returning *PostV1InventoryPreloadResponse
func (c *ClientWithResponses) PostV1InventoryPreloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1InventoryPreloadResponse, error) {
	rsp, err := c.PostV1InventoryPreloadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1InventoryPreloadResponse(rsp)
}

func (c *ClientWithResponses) PostV1InventoryPreloadWithResponse(ctx context.Context, body PostV1InventoryPreloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1InventoryPreloadResponse, error) {
	rsp, err := c.PostV1InventoryPreload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1InventoryPreloadResponse(rsp)
}

// GetV1InventoryPreloadCsvTemplateWithResponse request returning *GetV1InventoryPreloadCsvTemplateResponse
func (c *ClientWithResponses) GetV1InventoryPreloadCsvTemplateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1InventoryPreloadCsvTemplateResponse, error) {
	rsp, err := c.GetV1InventoryPreloadCsvTemplate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1InventoryPreloadCsvTemplateResponse(rsp)
}

// GetV1InventoryPreloadHistoryWithResponse request returning *GetV1InventoryPreloadHistoryResponse
func (c *ClientWithResponses) GetV1InventoryPreloadHistoryWithResponse(ctx context.Context, params *GetV1InventoryPreloadHistoryParams, reqEditors ...RequestEditorFn) (*GetV1InventoryPreloadHistoryResponse, error) {
	rsp, err := c.GetV1InventoryPreloadHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1InventoryPreloadHistoryResponse(rsp)
}

// PostV1InventoryPreloadHistoryWithBodyWithResponse request with arbitrary body returning *PostV1InventoryPreloadHistoryResponse
func (c *ClientWithResponses) PostV1InventoryPreloadHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1InventoryPreloadHistoryResponse, error) {
	rsp, err := c.PostV1InventoryPreloadHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1InventoryPreloadHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1InventoryPreloadHistoryWithResponse(ctx context.Context, body PostV1InventoryPreloadHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1InventoryPreloadHistoryResponse, error) {
	rsp, err := c.PostV1InventoryPreloadHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1InventoryPreloadHistoryResponse(rsp)
}

// PostV1InventoryPreloadValidateCsvWithBodyWithResponse request with arbitrary body returning *PostV1InventoryPreloadValidateCsvResponse
func (c *ClientWithResponses) PostV1InventoryPreloadValidateCsvWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1InventoryPreloadValidateCsvResponse, error) {
	rsp, err := c.PostV1InventoryPreloadValidateCsvWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1InventoryPreloadValidateCsvResponse(rsp)
}

// DeleteV1InventoryPreloadIdWithResponse request returning *DeleteV1InventoryPreloadIdResponse
func (c *ClientWithResponses) DeleteV1InventoryPreloadIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteV1InventoryPreloadIdResponse, error) {
	rsp, err := c.DeleteV1InventoryPreloadId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1InventoryPreloadIdResponse(rsp)
}

// GetV1InventoryPreloadIdWithResponse request returning *GetV1InventoryPreloadIdResponse
func (c *ClientWithResponses) GetV1InventoryPreloadIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1InventoryPreloadIdResponse, error) {
	rsp, err := c.GetV1InventoryPreloadId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1InventoryPreloadIdResponse(rsp)
}

// PutV1InventoryPreloadIdWithBodyWithResponse request with arbitrary body returning *PutV1InventoryPreloadIdResponse
func (c *ClientWithResponses) PutV1InventoryPreloadIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1InventoryPreloadIdResponse, error) {
	rsp, err := c.PutV1InventoryPreloadIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1InventoryPreloadIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1InventoryPreloadIdWithResponse(ctx context.Context, id int, body PutV1InventoryPreloadIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1InventoryPreloadIdResponse, error) {
	rsp, err := c.PutV1InventoryPreloadId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1InventoryPreloadIdResponse(rsp)
}

// GetV1JamfConnectWithResponse request returning *GetV1JamfConnectResponse
func (c *ClientWithResponses) GetV1JamfConnectWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1JamfConnectResponse, error) {
	rsp, err := c.GetV1JamfConnect(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JamfConnectResponse(rsp)
}

// GetV1JamfConnectConfigProfilesWithResponse request returning *GetV1JamfConnectConfigProfilesResponse
func (c *ClientWithResponses) GetV1JamfConnectConfigProfilesWithResponse(ctx context.Context, params *GetV1JamfConnectConfigProfilesParams, reqEditors ...RequestEditorFn) (*GetV1JamfConnectConfigProfilesResponse, error) {
	rsp, err := c.GetV1JamfConnectConfigProfiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JamfConnectConfigProfilesResponse(rsp)
}

// PutV1JamfConnectConfigProfilesIdWithBodyWithResponse request with arbitrary body returning *PutV1JamfConnectConfigProfilesIdResponse
func (c *ClientWithResponses) PutV1JamfConnectConfigProfilesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1JamfConnectConfigProfilesIdResponse, error) {
	rsp, err := c.PutV1JamfConnectConfigProfilesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1JamfConnectConfigProfilesIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1JamfConnectConfigProfilesIdWithResponse(ctx context.Context, id string, body PutV1JamfConnectConfigProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1JamfConnectConfigProfilesIdResponse, error) {
	rsp, err := c.PutV1JamfConnectConfigProfilesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1JamfConnectConfigProfilesIdResponse(rsp)
}

// GetV1JamfConnectDeploymentsIdTasksWithResponse request returning *GetV1JamfConnectDeploymentsIdTasksResponse
func (c *ClientWithResponses) GetV1JamfConnectDeploymentsIdTasksWithResponse(ctx context.Context, id string, params *GetV1JamfConnectDeploymentsIdTasksParams, reqEditors ...RequestEditorFn) (*GetV1JamfConnectDeploymentsIdTasksResponse, error) {
	rsp, err := c.GetV1JamfConnectDeploymentsIdTasks(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JamfConnectDeploymentsIdTasksResponse(rsp)
}

// PostV1JamfConnectDeploymentsIdTasksRetryWithBodyWithResponse request with arbitrary body returning *PostV1JamfConnectDeploymentsIdTasksRetryResponse
func (c *ClientWithResponses) PostV1JamfConnectDeploymentsIdTasksRetryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1JamfConnectDeploymentsIdTasksRetryResponse, error) {
	rsp, err := c.PostV1JamfConnectDeploymentsIdTasksRetryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JamfConnectDeploymentsIdTasksRetryResponse(rsp)
}

func (c *ClientWithResponses) PostV1JamfConnectDeploymentsIdTasksRetryWithResponse(ctx context.Context, id string, body PostV1JamfConnectDeploymentsIdTasksRetryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1JamfConnectDeploymentsIdTasksRetryResponse, error) {
	rsp, err := c.PostV1JamfConnectDeploymentsIdTasksRetry(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JamfConnectDeploymentsIdTasksRetryResponse(rsp)
}

// GetV1JamfConnectHistoryWithResponse request returning *GetV1JamfConnectHistoryResponse
func (c *ClientWithResponses) GetV1JamfConnectHistoryWithResponse(ctx context.Context, params *GetV1JamfConnectHistoryParams, reqEditors ...RequestEditorFn) (*GetV1JamfConnectHistoryResponse, error) {
	rsp, err := c.GetV1JamfConnectHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JamfConnectHistoryResponse(rsp)
}

// PostV1JamfConnectHistoryWithBodyWithResponse request with arbitrary body returning *PostV1JamfConnectHistoryResponse
func (c *ClientWithResponses) PostV1JamfConnectHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1JamfConnectHistoryResponse, error) {
	rsp, err := c.PostV1JamfConnectHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JamfConnectHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1JamfConnectHistoryWithResponse(ctx context.Context, body PostV1JamfConnectHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1JamfConnectHistoryResponse, error) {
	rsp, err := c.PostV1JamfConnectHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JamfConnectHistoryResponse(rsp)
}

// PostV1JamfManagementFrameworkRedeployIdWithResponse request returning *PostV1JamfManagementFrameworkRedeployIdResponse
func (c *ClientWithResponses) PostV1JamfManagementFrameworkRedeployIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostV1JamfManagementFrameworkRedeployIdResponse, error) {
	rsp, err := c.PostV1JamfManagementFrameworkRedeployId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JamfManagementFrameworkRedeployIdResponse(rsp)
}

// GetV1JamfPackageWithResponse request returning *GetV1JamfPackageResponse
func (c *ClientWithResponses) GetV1JamfPackageWithResponse(ctx context.Context, params *GetV1JamfPackageParams, reqEditors ...RequestEditorFn) (*GetV1JamfPackageResponse, error) {
	rsp, err := c.GetV1JamfPackage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JamfPackageResponse(rsp)
}

// GetV1JamfProInformationWithResponse request returning *GetV1JamfProInformationResponse
func (c *ClientWithResponses) GetV1JamfProInformationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1JamfProInformationResponse, error) {
	rsp, err := c.GetV1JamfProInformation(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JamfProInformationResponse(rsp)
}

// GetV1JamfProServerUrlWithResponse request returning *GetV1JamfProServerUrlResponse
func (c *ClientWithResponses) GetV1JamfProServerUrlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1JamfProServerUrlResponse, error) {
	rsp, err := c.GetV1JamfProServerUrl(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JamfProServerUrlResponse(rsp)
}

// PutV1JamfProServerUrlWithBodyWithResponse request with arbitrary body returning *PutV1JamfProServerUrlResponse
func (c *ClientWithResponses) PutV1JamfProServerUrlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1JamfProServerUrlResponse, error) {
	rsp, err := c.PutV1JamfProServerUrlWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1JamfProServerUrlResponse(rsp)
}

func (c *ClientWithResponses) PutV1JamfProServerUrlWithResponse(ctx context.Context, body PutV1JamfProServerUrlJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1JamfProServerUrlResponse, error) {
	rsp, err := c.PutV1JamfProServerUrl(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1JamfProServerUrlResponse(rsp)
}

// GetV1JamfProServerUrlHistoryWithResponse request returning *GetV1JamfProServerUrlHistoryResponse
func (c *ClientWithResponses) GetV1JamfProServerUrlHistoryWithResponse(ctx context.Context, params *GetV1JamfProServerUrlHistoryParams, reqEditors ...RequestEditorFn) (*GetV1JamfProServerUrlHistoryResponse, error) {
	rsp, err := c.GetV1JamfProServerUrlHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JamfProServerUrlHistoryResponse(rsp)
}

// PostV1JamfProServerUrlHistoryWithBodyWithResponse request with arbitrary body returning *PostV1JamfProServerUrlHistoryResponse
func (c *ClientWithResponses) PostV1JamfProServerUrlHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1JamfProServerUrlHistoryResponse, error) {
	rsp, err := c.PostV1JamfProServerUrlHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JamfProServerUrlHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1JamfProServerUrlHistoryWithResponse(ctx context.Context, body PostV1JamfProServerUrlHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1JamfProServerUrlHistoryResponse, error) {
	rsp, err := c.PostV1JamfProServerUrlHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JamfProServerUrlHistoryResponse(rsp)
}

// GetV1JamfProVersionWithResponse request returning *GetV1JamfProVersionResponse
func (c *ClientWithResponses) GetV1JamfProVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1JamfProVersionResponse, error) {
	rsp, err := c.GetV1JamfProVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JamfProVersionResponse(rsp)
}

// DeleteV1JamfProtectWithResponse request returning *DeleteV1JamfProtectResponse
func (c *ClientWithResponses) DeleteV1JamfProtectWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteV1JamfProtectResponse, error) {
	rsp, err := c.DeleteV1JamfProtect(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1JamfProtectResponse(rsp)
}

// GetV1JamfProtectWithResponse request returning *GetV1JamfProtectResponse
func (c *ClientWithResponses) GetV1JamfProtectWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1JamfProtectResponse, error) {
	rsp, err := c.GetV1JamfProtect(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JamfProtectResponse(rsp)
}

// PutV1JamfProtectWithBodyWithResponse request with arbitrary body returning *PutV1JamfProtectResponse
func (c *ClientWithResponses) PutV1JamfProtectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1JamfProtectResponse, error) {
	rsp, err := c.PutV1JamfProtectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1JamfProtectResponse(rsp)
}

func (c *ClientWithResponses) PutV1JamfProtectWithResponse(ctx context.Context, body PutV1JamfProtectJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1JamfProtectResponse, error) {
	rsp, err := c.PutV1JamfProtect(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1JamfProtectResponse(rsp)
}

// GetV1JamfProtectDeploymentsIdTasksWithResponse request returning *GetV1JamfProtectDeploymentsIdTasksResponse
func (c *ClientWithResponses) GetV1JamfProtectDeploymentsIdTasksWithResponse(ctx context.Context, id string, params *GetV1JamfProtectDeploymentsIdTasksParams, reqEditors ...RequestEditorFn) (*GetV1JamfProtectDeploymentsIdTasksResponse, error) {
	rsp, err := c.GetV1JamfProtectDeploymentsIdTasks(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JamfProtectDeploymentsIdTasksResponse(rsp)
}

// PostV1JamfProtectDeploymentsIdTasksRetryWithBodyWithResponse request with arbitrary body returning *PostV1JamfProtectDeploymentsIdTasksRetryResponse
func (c *ClientWithResponses) PostV1JamfProtectDeploymentsIdTasksRetryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1JamfProtectDeploymentsIdTasksRetryResponse, error) {
	rsp, err := c.PostV1JamfProtectDeploymentsIdTasksRetryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JamfProtectDeploymentsIdTasksRetryResponse(rsp)
}

func (c *ClientWithResponses) PostV1JamfProtectDeploymentsIdTasksRetryWithResponse(ctx context.Context, id string, body PostV1JamfProtectDeploymentsIdTasksRetryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1JamfProtectDeploymentsIdTasksRetryResponse, error) {
	rsp, err := c.PostV1JamfProtectDeploymentsIdTasksRetry(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JamfProtectDeploymentsIdTasksRetryResponse(rsp)
}

// GetV1JamfProtectHistoryWithResponse request returning *GetV1JamfProtectHistoryResponse
func (c *ClientWithResponses) GetV1JamfProtectHistoryWithResponse(ctx context.Context, params *GetV1JamfProtectHistoryParams, reqEditors ...RequestEditorFn) (*GetV1JamfProtectHistoryResponse, error) {
	rsp, err := c.GetV1JamfProtectHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JamfProtectHistoryResponse(rsp)
}

// PostV1JamfProtectHistoryWithBodyWithResponse request with arbitrary body returning *PostV1JamfProtectHistoryResponse
func (c *ClientWithResponses) PostV1JamfProtectHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1JamfProtectHistoryResponse, error) {
	rsp, err := c.PostV1JamfProtectHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JamfProtectHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1JamfProtectHistoryWithResponse(ctx context.Context, body PostV1JamfProtectHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1JamfProtectHistoryResponse, error) {
	rsp, err := c.PostV1JamfProtectHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JamfProtectHistoryResponse(rsp)
}

// GetV1JamfProtectPlansWithResponse request returning *GetV1JamfProtectPlansResponse
func (c *ClientWithResponses) GetV1JamfProtectPlansWithResponse(ctx context.Context, params *GetV1JamfProtectPlansParams, reqEditors ...RequestEditorFn) (*GetV1JamfProtectPlansResponse, error) {
	rsp, err := c.GetV1JamfProtectPlans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1JamfProtectPlansResponse(rsp)
}

// PostV1JamfProtectPlansSyncWithResponse request returning *PostV1JamfProtectPlansSyncResponse
func (c *ClientWithResponses) PostV1JamfProtectPlansSyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV1JamfProtectPlansSyncResponse, error) {
	rsp, err := c.PostV1JamfProtectPlansSync(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JamfProtectPlansSyncResponse(rsp)
}

// PostV1JamfProtectRegisterWithBodyWithResponse request with arbitrary body returning *PostV1JamfProtectRegisterResponse
func (c *ClientWithResponses) PostV1JamfProtectRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1JamfProtectRegisterResponse, error) {
	rsp, err := c.PostV1JamfProtectRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JamfProtectRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostV1JamfProtectRegisterWithResponse(ctx context.Context, body PostV1JamfProtectRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1JamfProtectRegisterResponse, error) {
	rsp, err := c.PostV1JamfProtectRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1JamfProtectRegisterResponse(rsp)
}

// PostV1LdapKeystoreVerifyWithBodyWithResponse request with arbitrary body returning *PostV1LdapKeystoreVerifyResponse
func (c *ClientWithResponses) PostV1LdapKeystoreVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1LdapKeystoreVerifyResponse, error) {
	rsp, err := c.PostV1LdapKeystoreVerifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1LdapKeystoreVerifyResponse(rsp)
}

func (c *ClientWithResponses) PostV1LdapKeystoreVerifyWithResponse(ctx context.Context, body PostV1LdapKeystoreVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1LdapKeystoreVerifyResponse, error) {
	rsp, err := c.PostV1LdapKeystoreVerify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1LdapKeystoreVerifyResponse(rsp)
}

// GetV1LdapGroupsWithResponse request returning *GetV1LdapGroupsResponse
func (c *ClientWithResponses) GetV1LdapGroupsWithResponse(ctx context.Context, params *GetV1LdapGroupsParams, reqEditors ...RequestEditorFn) (*GetV1LdapGroupsResponse, error) {
	rsp, err := c.GetV1LdapGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1LdapGroupsResponse(rsp)
}

// GetV1LdapLdapServersWithResponse request returning *GetV1LdapLdapServersResponse
func (c *ClientWithResponses) GetV1LdapLdapServersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1LdapLdapServersResponse, error) {
	rsp, err := c.GetV1LdapLdapServers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1LdapLdapServersResponse(rsp)
}

// GetV1LdapServersWithResponse request returning *GetV1LdapServersResponse
func (c *ClientWithResponses) GetV1LdapServersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1LdapServersResponse, error) {
	rsp, err := c.GetV1LdapServers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1LdapServersResponse(rsp)
}

// GetV1LocalesWithResponse request returning *GetV1LocalesResponse
func (c *ClientWithResponses) GetV1LocalesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1LocalesResponse, error) {
	rsp, err := c.GetV1Locales(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1LocalesResponse(rsp)
}

// GetV1MacosManagedSoftwareUpdatesAvailableUpdatesWithResponse request returning *GetV1MacosManagedSoftwareUpdatesAvailableUpdatesResponse
func (c *ClientWithResponses) GetV1MacosManagedSoftwareUpdatesAvailableUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MacosManagedSoftwareUpdatesAvailableUpdatesResponse, error) {
	rsp, err := c.GetV1MacosManagedSoftwareUpdatesAvailableUpdates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MacosManagedSoftwareUpdatesAvailableUpdatesResponse(rsp)
}

// PostV1MacosManagedSoftwareUpdatesSendUpdatesWithBodyWithResponse request with arbitrary body returning *PostV1MacosManagedSoftwareUpdatesSendUpdatesResponse
func (c *ClientWithResponses) PostV1MacosManagedSoftwareUpdatesSendUpdatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MacosManagedSoftwareUpdatesSendUpdatesResponse, error) {
	rsp, err := c.PostV1MacosManagedSoftwareUpdatesSendUpdatesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MacosManagedSoftwareUpdatesSendUpdatesResponse(rsp)
}

func (c *ClientWithResponses) PostV1MacosManagedSoftwareUpdatesSendUpdatesWithResponse(ctx context.Context, body PostV1MacosManagedSoftwareUpdatesSendUpdatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MacosManagedSoftwareUpdatesSendUpdatesResponse, error) {
	rsp, err := c.PostV1MacosManagedSoftwareUpdatesSendUpdates(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MacosManagedSoftwareUpdatesSendUpdatesResponse(rsp)
}

// GetV1MdmCommandsWithResponse request returning *GetV1MdmCommandsResponse
func (c *ClientWithResponses) GetV1MdmCommandsWithResponse(ctx context.Context, params *GetV1MdmCommandsParams, reqEditors ...RequestEditorFn) (*GetV1MdmCommandsResponse, error) {
	rsp, err := c.GetV1MdmCommands(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MdmCommandsResponse(rsp)
}

// PostV1MdmRenewProfileWithBodyWithResponse request with arbitrary body returning *PostV1MdmRenewProfileResponse
func (c *ClientWithResponses) PostV1MdmRenewProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MdmRenewProfileResponse, error) {
	rsp, err := c.PostV1MdmRenewProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MdmRenewProfileResponse(rsp)
}

func (c *ClientWithResponses) PostV1MdmRenewProfileWithResponse(ctx context.Context, body PostV1MdmRenewProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MdmRenewProfileResponse, error) {
	rsp, err := c.PostV1MdmRenewProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MdmRenewProfileResponse(rsp)
}

// GetV1MobileDeviceEnrollmentProfileIdDownloadProfileWithResponse request returning *GetV1MobileDeviceEnrollmentProfileIdDownloadProfileResponse
func (c *ClientWithResponses) GetV1MobileDeviceEnrollmentProfileIdDownloadProfileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1MobileDeviceEnrollmentProfileIdDownloadProfileResponse, error) {
	rsp, err := c.GetV1MobileDeviceEnrollmentProfileIdDownloadProfile(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MobileDeviceEnrollmentProfileIdDownloadProfileResponse(rsp)
}

// GetV1MobileDeviceGroupsWithResponse request returning *GetV1MobileDeviceGroupsResponse
func (c *ClientWithResponses) GetV1MobileDeviceGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MobileDeviceGroupsResponse, error) {
	rsp, err := c.GetV1MobileDeviceGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MobileDeviceGroupsResponse(rsp)
}

// GetV1MobileDevicePrestagesWithResponse request returning *GetV1MobileDevicePrestagesResponse
func (c *ClientWithResponses) GetV1MobileDevicePrestagesWithResponse(ctx context.Context, params *GetV1MobileDevicePrestagesParams, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesResponse, error) {
	rsp, err := c.GetV1MobileDevicePrestages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MobileDevicePrestagesResponse(rsp)
}

// PostV1MobileDevicePrestagesWithBodyWithResponse request with arbitrary body returning *PostV1MobileDevicePrestagesResponse
func (c *ClientWithResponses) PostV1MobileDevicePrestagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MobileDevicePrestagesResponse, error) {
	rsp, err := c.PostV1MobileDevicePrestagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MobileDevicePrestagesResponse(rsp)
}

func (c *ClientWithResponses) PostV1MobileDevicePrestagesWithResponse(ctx context.Context, body PostV1MobileDevicePrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MobileDevicePrestagesResponse, error) {
	rsp, err := c.PostV1MobileDevicePrestages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MobileDevicePrestagesResponse(rsp)
}

// GetV1MobileDevicePrestagesScopeWithResponse request returning *GetV1MobileDevicePrestagesScopeResponse
func (c *ClientWithResponses) GetV1MobileDevicePrestagesScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesScopeResponse, error) {
	rsp, err := c.GetV1MobileDevicePrestagesScope(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MobileDevicePrestagesScopeResponse(rsp)
}

// GetV1MobileDevicePrestagesSyncWithResponse request returning *GetV1MobileDevicePrestagesSyncResponse
func (c *ClientWithResponses) GetV1MobileDevicePrestagesSyncWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesSyncResponse, error) {
	rsp, err := c.GetV1MobileDevicePrestagesSync(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MobileDevicePrestagesSyncResponse(rsp)
}

// GetV1MobileDevicePrestagesSyncIdWithResponse request returning *GetV1MobileDevicePrestagesSyncIdResponse
func (c *ClientWithResponses) GetV1MobileDevicePrestagesSyncIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesSyncIdResponse, error) {
	rsp, err := c.GetV1MobileDevicePrestagesSyncId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MobileDevicePrestagesSyncIdResponse(rsp)
}

// GetV1MobileDevicePrestagesSyncIdLatestWithResponse request returning *GetV1MobileDevicePrestagesSyncIdLatestResponse
func (c *ClientWithResponses) GetV1MobileDevicePrestagesSyncIdLatestWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesSyncIdLatestResponse, error) {
	rsp, err := c.GetV1MobileDevicePrestagesSyncIdLatest(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MobileDevicePrestagesSyncIdLatestResponse(rsp)
}

// DeleteV1MobileDevicePrestagesIdWithResponse request returning *DeleteV1MobileDevicePrestagesIdResponse
func (c *ClientWithResponses) DeleteV1MobileDevicePrestagesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteV1MobileDevicePrestagesIdResponse, error) {
	rsp, err := c.DeleteV1MobileDevicePrestagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1MobileDevicePrestagesIdResponse(rsp)
}

// GetV1MobileDevicePrestagesIdWithResponse request returning *GetV1MobileDevicePrestagesIdResponse
func (c *ClientWithResponses) GetV1MobileDevicePrestagesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesIdResponse, error) {
	rsp, err := c.GetV1MobileDevicePrestagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MobileDevicePrestagesIdResponse(rsp)
}

// PutV1MobileDevicePrestagesIdWithBodyWithResponse request with arbitrary body returning *PutV1MobileDevicePrestagesIdResponse
func (c *ClientWithResponses) PutV1MobileDevicePrestagesIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1MobileDevicePrestagesIdResponse, error) {
	rsp, err := c.PutV1MobileDevicePrestagesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1MobileDevicePrestagesIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1MobileDevicePrestagesIdWithResponse(ctx context.Context, id int, body PutV1MobileDevicePrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1MobileDevicePrestagesIdResponse, error) {
	rsp, err := c.PutV1MobileDevicePrestagesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1MobileDevicePrestagesIdResponse(rsp)
}

// DeleteV1MobileDevicePrestagesIdAttachmentsWithBodyWithResponse request with arbitrary body returning *DeleteV1MobileDevicePrestagesIdAttachmentsResponse
func (c *ClientWithResponses) DeleteV1MobileDevicePrestagesIdAttachmentsWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV1MobileDevicePrestagesIdAttachmentsResponse, error) {
	rsp, err := c.DeleteV1MobileDevicePrestagesIdAttachmentsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1MobileDevicePrestagesIdAttachmentsResponse(rsp)
}

func (c *ClientWithResponses) DeleteV1MobileDevicePrestagesIdAttachmentsWithResponse(ctx context.Context, id int, body DeleteV1MobileDevicePrestagesIdAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV1MobileDevicePrestagesIdAttachmentsResponse, error) {
	rsp, err := c.DeleteV1MobileDevicePrestagesIdAttachments(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1MobileDevicePrestagesIdAttachmentsResponse(rsp)
}

// GetV1MobileDevicePrestagesIdAttachmentsWithResponse request returning *GetV1MobileDevicePrestagesIdAttachmentsResponse
func (c *ClientWithResponses) GetV1MobileDevicePrestagesIdAttachmentsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesIdAttachmentsResponse, error) {
	rsp, err := c.GetV1MobileDevicePrestagesIdAttachments(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MobileDevicePrestagesIdAttachmentsResponse(rsp)
}

// PostV1MobileDevicePrestagesIdAttachmentsWithBodyWithResponse request with arbitrary body returning *PostV1MobileDevicePrestagesIdAttachmentsResponse
func (c *ClientWithResponses) PostV1MobileDevicePrestagesIdAttachmentsWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MobileDevicePrestagesIdAttachmentsResponse, error) {
	rsp, err := c.PostV1MobileDevicePrestagesIdAttachmentsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MobileDevicePrestagesIdAttachmentsResponse(rsp)
}

// GetV1MobileDevicePrestagesIdHistoryWithResponse request returning *GetV1MobileDevicePrestagesIdHistoryResponse
func (c *ClientWithResponses) GetV1MobileDevicePrestagesIdHistoryWithResponse(ctx context.Context, id int, params *GetV1MobileDevicePrestagesIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesIdHistoryResponse, error) {
	rsp, err := c.GetV1MobileDevicePrestagesIdHistory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MobileDevicePrestagesIdHistoryResponse(rsp)
}

// PostV1MobileDevicePrestagesIdHistoryWithBodyWithResponse request with arbitrary body returning *PostV1MobileDevicePrestagesIdHistoryResponse
func (c *ClientWithResponses) PostV1MobileDevicePrestagesIdHistoryWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MobileDevicePrestagesIdHistoryResponse, error) {
	rsp, err := c.PostV1MobileDevicePrestagesIdHistoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MobileDevicePrestagesIdHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1MobileDevicePrestagesIdHistoryWithResponse(ctx context.Context, id int, body PostV1MobileDevicePrestagesIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MobileDevicePrestagesIdHistoryResponse, error) {
	rsp, err := c.PostV1MobileDevicePrestagesIdHistory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MobileDevicePrestagesIdHistoryResponse(rsp)
}

// DeleteV1MobileDevicePrestagesIdScopeWithBodyWithResponse request with arbitrary body returning *DeleteV1MobileDevicePrestagesIdScopeResponse
func (c *ClientWithResponses) DeleteV1MobileDevicePrestagesIdScopeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteV1MobileDevicePrestagesIdScopeResponse, error) {
	rsp, err := c.DeleteV1MobileDevicePrestagesIdScopeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1MobileDevicePrestagesIdScopeResponse(rsp)
}

func (c *ClientWithResponses) DeleteV1MobileDevicePrestagesIdScopeWithResponse(ctx context.Context, id int, body DeleteV1MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteV1MobileDevicePrestagesIdScopeResponse, error) {
	rsp, err := c.DeleteV1MobileDevicePrestagesIdScope(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1MobileDevicePrestagesIdScopeResponse(rsp)
}

// GetV1MobileDevicePrestagesIdScopeWithResponse request returning *GetV1MobileDevicePrestagesIdScopeResponse
func (c *ClientWithResponses) GetV1MobileDevicePrestagesIdScopeWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1MobileDevicePrestagesIdScopeResponse, error) {
	rsp, err := c.GetV1MobileDevicePrestagesIdScope(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MobileDevicePrestagesIdScopeResponse(rsp)
}

// PostV1MobileDevicePrestagesIdScopeWithBodyWithResponse request with arbitrary body returning *PostV1MobileDevicePrestagesIdScopeResponse
func (c *ClientWithResponses) PostV1MobileDevicePrestagesIdScopeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MobileDevicePrestagesIdScopeResponse, error) {
	rsp, err := c.PostV1MobileDevicePrestagesIdScopeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MobileDevicePrestagesIdScopeResponse(rsp)
}

func (c *ClientWithResponses) PostV1MobileDevicePrestagesIdScopeWithResponse(ctx context.Context, id int, body PostV1MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MobileDevicePrestagesIdScopeResponse, error) {
	rsp, err := c.PostV1MobileDevicePrestagesIdScope(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MobileDevicePrestagesIdScopeResponse(rsp)
}

// PutV1MobileDevicePrestagesIdScopeWithBodyWithResponse request with arbitrary body returning *PutV1MobileDevicePrestagesIdScopeResponse
func (c *ClientWithResponses) PutV1MobileDevicePrestagesIdScopeWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1MobileDevicePrestagesIdScopeResponse, error) {
	rsp, err := c.PutV1MobileDevicePrestagesIdScopeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1MobileDevicePrestagesIdScopeResponse(rsp)
}

func (c *ClientWithResponses) PutV1MobileDevicePrestagesIdScopeWithResponse(ctx context.Context, id int, body PutV1MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1MobileDevicePrestagesIdScopeResponse, error) {
	rsp, err := c.PutV1MobileDevicePrestagesIdScope(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1MobileDevicePrestagesIdScopeResponse(rsp)
}

// GetV1MobileDevicesWithResponse request returning *GetV1MobileDevicesResponse
func (c *ClientWithResponses) GetV1MobileDevicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1MobileDevicesResponse, error) {
	rsp, err := c.GetV1MobileDevices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MobileDevicesResponse(rsp)
}

// GetV1MobileDevicesIdWithResponse request returning *GetV1MobileDevicesIdResponse
func (c *ClientWithResponses) GetV1MobileDevicesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1MobileDevicesIdResponse, error) {
	rsp, err := c.GetV1MobileDevicesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MobileDevicesIdResponse(rsp)
}

// PatchV1MobileDevicesIdWithBodyWithResponse request with arbitrary body returning *PatchV1MobileDevicesIdResponse
func (c *ClientWithResponses) PatchV1MobileDevicesIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1MobileDevicesIdResponse, error) {
	rsp, err := c.PatchV1MobileDevicesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1MobileDevicesIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV1MobileDevicesIdWithResponse(ctx context.Context, id int, body PatchV1MobileDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1MobileDevicesIdResponse, error) {
	rsp, err := c.PatchV1MobileDevicesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1MobileDevicesIdResponse(rsp)
}

// GetV1MobileDevicesIdDetailWithResponse request returning *GetV1MobileDevicesIdDetailResponse
func (c *ClientWithResponses) GetV1MobileDevicesIdDetailWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1MobileDevicesIdDetailResponse, error) {
	rsp, err := c.GetV1MobileDevicesIdDetail(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1MobileDevicesIdDetailResponse(rsp)
}

// PostV1MobileDevicesIdRecalculateSmartGroupsWithResponse request returning *PostV1MobileDevicesIdRecalculateSmartGroupsResponse
func (c *ClientWithResponses) PostV1MobileDevicesIdRecalculateSmartGroupsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostV1MobileDevicesIdRecalculateSmartGroupsResponse, error) {
	rsp, err := c.PostV1MobileDevicesIdRecalculateSmartGroups(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MobileDevicesIdRecalculateSmartGroupsResponse(rsp)
}

// GetV1NotificationsWithResponse request returning *GetV1NotificationsResponse
func (c *ClientWithResponses) GetV1NotificationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1NotificationsResponse, error) {
	rsp, err := c.GetV1Notifications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1NotificationsResponse(rsp)
}

// DeleteV1NotificationsTypeIdWithResponse request returning *DeleteV1NotificationsTypeIdResponse
func (c *ClientWithResponses) DeleteV1NotificationsTypeIdWithResponse(ctx context.Context, pType NotificationType, id string, reqEditors ...RequestEditorFn) (*DeleteV1NotificationsTypeIdResponse, error) {
	rsp, err := c.DeleteV1NotificationsTypeId(ctx, pType, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1NotificationsTypeIdResponse(rsp)
}

// GetV1ParentAppWithResponse request returning *GetV1ParentAppResponse
func (c *ClientWithResponses) GetV1ParentAppWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ParentAppResponse, error) {
	rsp, err := c.GetV1ParentApp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ParentAppResponse(rsp)
}

// PutV1ParentAppWithBodyWithResponse request with arbitrary body returning *PutV1ParentAppResponse
func (c *ClientWithResponses) PutV1ParentAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ParentAppResponse, error) {
	rsp, err := c.PutV1ParentAppWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ParentAppResponse(rsp)
}

func (c *ClientWithResponses) PutV1ParentAppWithResponse(ctx context.Context, body PutV1ParentAppJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ParentAppResponse, error) {
	rsp, err := c.PutV1ParentApp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ParentAppResponse(rsp)
}

// GetV1ParentAppHistoryWithResponse request returning *GetV1ParentAppHistoryResponse
func (c *ClientWithResponses) GetV1ParentAppHistoryWithResponse(ctx context.Context, params *GetV1ParentAppHistoryParams, reqEditors ...RequestEditorFn) (*GetV1ParentAppHistoryResponse, error) {
	rsp, err := c.GetV1ParentAppHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ParentAppHistoryResponse(rsp)
}

// PostV1ParentAppHistoryWithBodyWithResponse request with arbitrary body returning *PostV1ParentAppHistoryResponse
func (c *ClientWithResponses) PostV1ParentAppHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ParentAppHistoryResponse, error) {
	rsp, err := c.PostV1ParentAppHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ParentAppHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1ParentAppHistoryWithResponse(ctx context.Context, body PostV1ParentAppHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ParentAppHistoryResponse, error) {
	rsp, err := c.PostV1ParentAppHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ParentAppHistoryResponse(rsp)
}

// GetV1PkiCertificateAuthorityActiveWithResponse request returning *GetV1PkiCertificateAuthorityActiveResponse
func (c *ClientWithResponses) GetV1PkiCertificateAuthorityActiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1PkiCertificateAuthorityActiveResponse, error) {
	rsp, err := c.GetV1PkiCertificateAuthorityActive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PkiCertificateAuthorityActiveResponse(rsp)
}

// GetV1PkiCertificateAuthorityActiveDerWithResponse request returning *GetV1PkiCertificateAuthorityActiveDerResponse
func (c *ClientWithResponses) GetV1PkiCertificateAuthorityActiveDerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1PkiCertificateAuthorityActiveDerResponse, error) {
	rsp, err := c.GetV1PkiCertificateAuthorityActiveDer(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PkiCertificateAuthorityActiveDerResponse(rsp)
}

// GetV1PkiCertificateAuthorityActivePemWithResponse request returning *GetV1PkiCertificateAuthorityActivePemResponse
func (c *ClientWithResponses) GetV1PkiCertificateAuthorityActivePemWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1PkiCertificateAuthorityActivePemResponse, error) {
	rsp, err := c.GetV1PkiCertificateAuthorityActivePem(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PkiCertificateAuthorityActivePemResponse(rsp)
}

// GetV1PkiCertificateAuthorityIdWithResponse request returning *GetV1PkiCertificateAuthorityIdResponse
func (c *ClientWithResponses) GetV1PkiCertificateAuthorityIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiCertificateAuthorityIdResponse, error) {
	rsp, err := c.GetV1PkiCertificateAuthorityId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PkiCertificateAuthorityIdResponse(rsp)
}

// GetV1PkiCertificateAuthorityIdDerWithResponse request returning *GetV1PkiCertificateAuthorityIdDerResponse
func (c *ClientWithResponses) GetV1PkiCertificateAuthorityIdDerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiCertificateAuthorityIdDerResponse, error) {
	rsp, err := c.GetV1PkiCertificateAuthorityIdDer(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PkiCertificateAuthorityIdDerResponse(rsp)
}

// GetV1PkiCertificateAuthorityIdPemWithResponse request returning *GetV1PkiCertificateAuthorityIdPemResponse
func (c *ClientWithResponses) GetV1PkiCertificateAuthorityIdPemWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiCertificateAuthorityIdPemResponse, error) {
	rsp, err := c.GetV1PkiCertificateAuthorityIdPem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PkiCertificateAuthorityIdPemResponse(rsp)
}

// PostV1PkiVenafiWithBodyWithResponse request with arbitrary body returning *PostV1PkiVenafiResponse
func (c *ClientWithResponses) PostV1PkiVenafiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PkiVenafiResponse, error) {
	rsp, err := c.PostV1PkiVenafiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PkiVenafiResponse(rsp)
}

func (c *ClientWithResponses) PostV1PkiVenafiWithResponse(ctx context.Context, body PostV1PkiVenafiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PkiVenafiResponse, error) {
	rsp, err := c.PostV1PkiVenafi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PkiVenafiResponse(rsp)
}

// DeleteV1PkiVenafiIdWithResponse request returning *DeleteV1PkiVenafiIdResponse
func (c *ClientWithResponses) DeleteV1PkiVenafiIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1PkiVenafiIdResponse, error) {
	rsp, err := c.DeleteV1PkiVenafiId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1PkiVenafiIdResponse(rsp)
}

// GetV1PkiVenafiIdWithResponse request returning *GetV1PkiVenafiIdResponse
func (c *ClientWithResponses) GetV1PkiVenafiIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiVenafiIdResponse, error) {
	rsp, err := c.GetV1PkiVenafiId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PkiVenafiIdResponse(rsp)
}

// PatchV1PkiVenafiIdWithBodyWithResponse request with arbitrary body returning *PatchV1PkiVenafiIdResponse
func (c *ClientWithResponses) PatchV1PkiVenafiIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1PkiVenafiIdResponse, error) {
	rsp, err := c.PatchV1PkiVenafiIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1PkiVenafiIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV1PkiVenafiIdWithResponse(ctx context.Context, id string, body PatchV1PkiVenafiIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV1PkiVenafiIdResponse, error) {
	rsp, err := c.PatchV1PkiVenafiId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1PkiVenafiIdResponse(rsp)
}

// GetV1PkiVenafiIdConnectionStatusWithResponse request returning *GetV1PkiVenafiIdConnectionStatusResponse
func (c *ClientWithResponses) GetV1PkiVenafiIdConnectionStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiVenafiIdConnectionStatusResponse, error) {
	rsp, err := c.GetV1PkiVenafiIdConnectionStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PkiVenafiIdConnectionStatusResponse(rsp)
}

// GetV1PkiVenafiIdDependentProfilesWithResponse request returning *GetV1PkiVenafiIdDependentProfilesResponse
func (c *ClientWithResponses) GetV1PkiVenafiIdDependentProfilesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiVenafiIdDependentProfilesResponse, error) {
	rsp, err := c.GetV1PkiVenafiIdDependentProfiles(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PkiVenafiIdDependentProfilesResponse(rsp)
}

// GetV1PkiVenafiIdHistoryWithResponse request returning *GetV1PkiVenafiIdHistoryResponse
func (c *ClientWithResponses) GetV1PkiVenafiIdHistoryWithResponse(ctx context.Context, id string, params *GetV1PkiVenafiIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1PkiVenafiIdHistoryResponse, error) {
	rsp, err := c.GetV1PkiVenafiIdHistory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PkiVenafiIdHistoryResponse(rsp)
}

// PostV1PkiVenafiIdHistoryWithBodyWithResponse request with arbitrary body returning *PostV1PkiVenafiIdHistoryResponse
func (c *ClientWithResponses) PostV1PkiVenafiIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PkiVenafiIdHistoryResponse, error) {
	rsp, err := c.PostV1PkiVenafiIdHistoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PkiVenafiIdHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1PkiVenafiIdHistoryWithResponse(ctx context.Context, id string, body PostV1PkiVenafiIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1PkiVenafiIdHistoryResponse, error) {
	rsp, err := c.PostV1PkiVenafiIdHistory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PkiVenafiIdHistoryResponse(rsp)
}

// GetV1PkiVenafiIdJamfPublicKeyWithResponse request returning *GetV1PkiVenafiIdJamfPublicKeyResponse
func (c *ClientWithResponses) GetV1PkiVenafiIdJamfPublicKeyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiVenafiIdJamfPublicKeyResponse, error) {
	rsp, err := c.GetV1PkiVenafiIdJamfPublicKey(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PkiVenafiIdJamfPublicKeyResponse(rsp)
}

// PostV1PkiVenafiIdJamfPublicKeyRegenerateWithResponse request returning *PostV1PkiVenafiIdJamfPublicKeyRegenerateResponse
func (c *ClientWithResponses) PostV1PkiVenafiIdJamfPublicKeyRegenerateWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostV1PkiVenafiIdJamfPublicKeyRegenerateResponse, error) {
	rsp, err := c.PostV1PkiVenafiIdJamfPublicKeyRegenerate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PkiVenafiIdJamfPublicKeyRegenerateResponse(rsp)
}

// DeleteV1PkiVenafiIdProxyTrustStoreWithResponse request returning *DeleteV1PkiVenafiIdProxyTrustStoreResponse
func (c *ClientWithResponses) DeleteV1PkiVenafiIdProxyTrustStoreWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1PkiVenafiIdProxyTrustStoreResponse, error) {
	rsp, err := c.DeleteV1PkiVenafiIdProxyTrustStore(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1PkiVenafiIdProxyTrustStoreResponse(rsp)
}

// GetV1PkiVenafiIdProxyTrustStoreWithResponse request returning *GetV1PkiVenafiIdProxyTrustStoreResponse
func (c *ClientWithResponses) GetV1PkiVenafiIdProxyTrustStoreWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1PkiVenafiIdProxyTrustStoreResponse, error) {
	rsp, err := c.GetV1PkiVenafiIdProxyTrustStore(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PkiVenafiIdProxyTrustStoreResponse(rsp)
}

// PostV1PkiVenafiIdProxyTrustStoreWithBodyWithResponse request with arbitrary body returning *PostV1PkiVenafiIdProxyTrustStoreResponse
func (c *ClientWithResponses) PostV1PkiVenafiIdProxyTrustStoreWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1PkiVenafiIdProxyTrustStoreResponse, error) {
	rsp, err := c.PostV1PkiVenafiIdProxyTrustStoreWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1PkiVenafiIdProxyTrustStoreResponse(rsp)
}

// GetV1PolicyPropertiesWithResponse request returning *GetV1PolicyPropertiesResponse
func (c *ClientWithResponses) GetV1PolicyPropertiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1PolicyPropertiesResponse, error) {
	rsp, err := c.GetV1PolicyProperties(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1PolicyPropertiesResponse(rsp)
}

// PutV1PolicyPropertiesWithBodyWithResponse request with arbitrary body returning *PutV1PolicyPropertiesResponse
func (c *ClientWithResponses) PutV1PolicyPropertiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1PolicyPropertiesResponse, error) {
	rsp, err := c.PutV1PolicyPropertiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1PolicyPropertiesResponse(rsp)
}

func (c *ClientWithResponses) PutV1PolicyPropertiesWithResponse(ctx context.Context, body PutV1PolicyPropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1PolicyPropertiesResponse, error) {
	rsp, err := c.PutV1PolicyProperties(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1PolicyPropertiesResponse(rsp)
}

// GetV1ReenrollmentWithResponse request returning *GetV1ReenrollmentResponse
func (c *ClientWithResponses) GetV1ReenrollmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1ReenrollmentResponse, error) {
	rsp, err := c.GetV1Reenrollment(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ReenrollmentResponse(rsp)
}

// PutV1ReenrollmentWithBodyWithResponse request with arbitrary body returning *PutV1ReenrollmentResponse
func (c *ClientWithResponses) PutV1ReenrollmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ReenrollmentResponse, error) {
	rsp, err := c.PutV1ReenrollmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ReenrollmentResponse(rsp)
}

func (c *ClientWithResponses) PutV1ReenrollmentWithResponse(ctx context.Context, body PutV1ReenrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ReenrollmentResponse, error) {
	rsp, err := c.PutV1Reenrollment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ReenrollmentResponse(rsp)
}

// GetV1ReenrollmentHistoryWithResponse request returning *GetV1ReenrollmentHistoryResponse
func (c *ClientWithResponses) GetV1ReenrollmentHistoryWithResponse(ctx context.Context, params *GetV1ReenrollmentHistoryParams, reqEditors ...RequestEditorFn) (*GetV1ReenrollmentHistoryResponse, error) {
	rsp, err := c.GetV1ReenrollmentHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ReenrollmentHistoryResponse(rsp)
}

// PostV1ReenrollmentHistoryWithBodyWithResponse request with arbitrary body returning *PostV1ReenrollmentHistoryResponse
func (c *ClientWithResponses) PostV1ReenrollmentHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ReenrollmentHistoryResponse, error) {
	rsp, err := c.PostV1ReenrollmentHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ReenrollmentHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1ReenrollmentHistoryWithResponse(ctx context.Context, body PostV1ReenrollmentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ReenrollmentHistoryResponse, error) {
	rsp, err := c.PostV1ReenrollmentHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ReenrollmentHistoryResponse(rsp)
}

// PostV1ReenrollmentHistoryExportWithBodyWithResponse request with arbitrary body returning *PostV1ReenrollmentHistoryExportResponse
func (c *ClientWithResponses) PostV1ReenrollmentHistoryExportWithBodyWithResponse(ctx context.Context, params *PostV1ReenrollmentHistoryExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ReenrollmentHistoryExportResponse, error) {
	rsp, err := c.PostV1ReenrollmentHistoryExportWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ReenrollmentHistoryExportResponse(rsp)
}

func (c *ClientWithResponses) PostV1ReenrollmentHistoryExportWithResponse(ctx context.Context, params *PostV1ReenrollmentHistoryExportParams, body PostV1ReenrollmentHistoryExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ReenrollmentHistoryExportResponse, error) {
	rsp, err := c.PostV1ReenrollmentHistoryExport(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ReenrollmentHistoryExportResponse(rsp)
}

// GetV1ScriptsWithResponse request returning *GetV1ScriptsResponse
func (c *ClientWithResponses) GetV1ScriptsWithResponse(ctx context.Context, params *GetV1ScriptsParams, reqEditors ...RequestEditorFn) (*GetV1ScriptsResponse, error) {
	rsp, err := c.GetV1Scripts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ScriptsResponse(rsp)
}

// PostV1ScriptsWithBodyWithResponse request with arbitrary body returning *PostV1ScriptsResponse
func (c *ClientWithResponses) PostV1ScriptsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ScriptsResponse, error) {
	rsp, err := c.PostV1ScriptsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ScriptsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ScriptsWithResponse(ctx context.Context, body PostV1ScriptsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ScriptsResponse, error) {
	rsp, err := c.PostV1Scripts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ScriptsResponse(rsp)
}

// DeleteV1ScriptsIdWithResponse request returning *DeleteV1ScriptsIdResponse
func (c *ClientWithResponses) DeleteV1ScriptsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1ScriptsIdResponse, error) {
	rsp, err := c.DeleteV1ScriptsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ScriptsIdResponse(rsp)
}

// GetV1ScriptsIdWithResponse request returning *GetV1ScriptsIdResponse
func (c *ClientWithResponses) GetV1ScriptsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1ScriptsIdResponse, error) {
	rsp, err := c.GetV1ScriptsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ScriptsIdResponse(rsp)
}

// PutV1ScriptsIdWithBodyWithResponse request with arbitrary body returning *PutV1ScriptsIdResponse
func (c *ClientWithResponses) PutV1ScriptsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1ScriptsIdResponse, error) {
	rsp, err := c.PutV1ScriptsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ScriptsIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1ScriptsIdWithResponse(ctx context.Context, id string, body PutV1ScriptsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1ScriptsIdResponse, error) {
	rsp, err := c.PutV1ScriptsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1ScriptsIdResponse(rsp)
}

// GetV1ScriptsIdDownloadWithResponse request returning *GetV1ScriptsIdDownloadResponse
func (c *ClientWithResponses) GetV1ScriptsIdDownloadWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1ScriptsIdDownloadResponse, error) {
	rsp, err := c.GetV1ScriptsIdDownload(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ScriptsIdDownloadResponse(rsp)
}

// GetV1ScriptsIdHistoryWithResponse request returning *GetV1ScriptsIdHistoryResponse
func (c *ClientWithResponses) GetV1ScriptsIdHistoryWithResponse(ctx context.Context, id string, params *GetV1ScriptsIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1ScriptsIdHistoryResponse, error) {
	rsp, err := c.GetV1ScriptsIdHistory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ScriptsIdHistoryResponse(rsp)
}

// PostV1ScriptsIdHistoryWithBodyWithResponse request with arbitrary body returning *PostV1ScriptsIdHistoryResponse
func (c *ClientWithResponses) PostV1ScriptsIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ScriptsIdHistoryResponse, error) {
	rsp, err := c.PostV1ScriptsIdHistoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ScriptsIdHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1ScriptsIdHistoryWithResponse(ctx context.Context, id string, body PostV1ScriptsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ScriptsIdHistoryResponse, error) {
	rsp, err := c.PostV1ScriptsIdHistory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ScriptsIdHistoryResponse(rsp)
}

// PostV1SearchMobileDevicesWithBodyWithResponse request with arbitrary body returning *PostV1SearchMobileDevicesResponse
func (c *ClientWithResponses) PostV1SearchMobileDevicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SearchMobileDevicesResponse, error) {
	rsp, err := c.PostV1SearchMobileDevicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SearchMobileDevicesResponse(rsp)
}

func (c *ClientWithResponses) PostV1SearchMobileDevicesWithResponse(ctx context.Context, body PostV1SearchMobileDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SearchMobileDevicesResponse, error) {
	rsp, err := c.PostV1SearchMobileDevices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SearchMobileDevicesResponse(rsp)
}

// GetV1SelfServiceBrandingIosWithResponse request returning *GetV1SelfServiceBrandingIosResponse
func (c *ClientWithResponses) GetV1SelfServiceBrandingIosWithResponse(ctx context.Context, params *GetV1SelfServiceBrandingIosParams, reqEditors ...RequestEditorFn) (*GetV1SelfServiceBrandingIosResponse, error) {
	rsp, err := c.GetV1SelfServiceBrandingIos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SelfServiceBrandingIosResponse(rsp)
}

// PostV1SelfServiceBrandingIosWithBodyWithResponse request with arbitrary body returning *PostV1SelfServiceBrandingIosResponse
func (c *ClientWithResponses) PostV1SelfServiceBrandingIosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SelfServiceBrandingIosResponse, error) {
	rsp, err := c.PostV1SelfServiceBrandingIosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SelfServiceBrandingIosResponse(rsp)
}

func (c *ClientWithResponses) PostV1SelfServiceBrandingIosWithResponse(ctx context.Context, body PostV1SelfServiceBrandingIosJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SelfServiceBrandingIosResponse, error) {
	rsp, err := c.PostV1SelfServiceBrandingIos(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SelfServiceBrandingIosResponse(rsp)
}

// DeleteV1SelfServiceBrandingIosIdWithResponse request returning *DeleteV1SelfServiceBrandingIosIdResponse
func (c *ClientWithResponses) DeleteV1SelfServiceBrandingIosIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1SelfServiceBrandingIosIdResponse, error) {
	rsp, err := c.DeleteV1SelfServiceBrandingIosId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1SelfServiceBrandingIosIdResponse(rsp)
}

// GetV1SelfServiceBrandingIosIdWithResponse request returning *GetV1SelfServiceBrandingIosIdResponse
func (c *ClientWithResponses) GetV1SelfServiceBrandingIosIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1SelfServiceBrandingIosIdResponse, error) {
	rsp, err := c.GetV1SelfServiceBrandingIosId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SelfServiceBrandingIosIdResponse(rsp)
}

// PutV1SelfServiceBrandingIosIdWithBodyWithResponse request with arbitrary body returning *PutV1SelfServiceBrandingIosIdResponse
func (c *ClientWithResponses) PutV1SelfServiceBrandingIosIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1SelfServiceBrandingIosIdResponse, error) {
	rsp, err := c.PutV1SelfServiceBrandingIosIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1SelfServiceBrandingIosIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1SelfServiceBrandingIosIdWithResponse(ctx context.Context, id string, body PutV1SelfServiceBrandingIosIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1SelfServiceBrandingIosIdResponse, error) {
	rsp, err := c.PutV1SelfServiceBrandingIosId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1SelfServiceBrandingIosIdResponse(rsp)
}

// GetV1SelfServiceBrandingMacosWithResponse request returning *GetV1SelfServiceBrandingMacosResponse
func (c *ClientWithResponses) GetV1SelfServiceBrandingMacosWithResponse(ctx context.Context, params *GetV1SelfServiceBrandingMacosParams, reqEditors ...RequestEditorFn) (*GetV1SelfServiceBrandingMacosResponse, error) {
	rsp, err := c.GetV1SelfServiceBrandingMacos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SelfServiceBrandingMacosResponse(rsp)
}

// PostV1SelfServiceBrandingMacosWithBodyWithResponse request with arbitrary body returning *PostV1SelfServiceBrandingMacosResponse
func (c *ClientWithResponses) PostV1SelfServiceBrandingMacosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SelfServiceBrandingMacosResponse, error) {
	rsp, err := c.PostV1SelfServiceBrandingMacosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SelfServiceBrandingMacosResponse(rsp)
}

func (c *ClientWithResponses) PostV1SelfServiceBrandingMacosWithResponse(ctx context.Context, body PostV1SelfServiceBrandingMacosJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SelfServiceBrandingMacosResponse, error) {
	rsp, err := c.PostV1SelfServiceBrandingMacos(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SelfServiceBrandingMacosResponse(rsp)
}

// DeleteV1SelfServiceBrandingMacosIdWithResponse request returning *DeleteV1SelfServiceBrandingMacosIdResponse
func (c *ClientWithResponses) DeleteV1SelfServiceBrandingMacosIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1SelfServiceBrandingMacosIdResponse, error) {
	rsp, err := c.DeleteV1SelfServiceBrandingMacosId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1SelfServiceBrandingMacosIdResponse(rsp)
}

// GetV1SelfServiceBrandingMacosIdWithResponse request returning *GetV1SelfServiceBrandingMacosIdResponse
func (c *ClientWithResponses) GetV1SelfServiceBrandingMacosIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1SelfServiceBrandingMacosIdResponse, error) {
	rsp, err := c.GetV1SelfServiceBrandingMacosId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SelfServiceBrandingMacosIdResponse(rsp)
}

// PutV1SelfServiceBrandingMacosIdWithBodyWithResponse request with arbitrary body returning *PutV1SelfServiceBrandingMacosIdResponse
func (c *ClientWithResponses) PutV1SelfServiceBrandingMacosIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1SelfServiceBrandingMacosIdResponse, error) {
	rsp, err := c.PutV1SelfServiceBrandingMacosIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1SelfServiceBrandingMacosIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1SelfServiceBrandingMacosIdWithResponse(ctx context.Context, id string, body PutV1SelfServiceBrandingMacosIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1SelfServiceBrandingMacosIdResponse, error) {
	rsp, err := c.PutV1SelfServiceBrandingMacosId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1SelfServiceBrandingMacosIdResponse(rsp)
}

// GetV1SelfServiceSettingsWithResponse request returning *GetV1SelfServiceSettingsResponse
func (c *ClientWithResponses) GetV1SelfServiceSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SelfServiceSettingsResponse, error) {
	rsp, err := c.GetV1SelfServiceSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SelfServiceSettingsResponse(rsp)
}

// PutV1SelfServiceSettingsWithBodyWithResponse request with arbitrary body returning *PutV1SelfServiceSettingsResponse
func (c *ClientWithResponses) PutV1SelfServiceSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1SelfServiceSettingsResponse, error) {
	rsp, err := c.PutV1SelfServiceSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1SelfServiceSettingsResponse(rsp)
}

func (c *ClientWithResponses) PutV1SelfServiceSettingsWithResponse(ctx context.Context, body PutV1SelfServiceSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1SelfServiceSettingsResponse, error) {
	rsp, err := c.PutV1SelfServiceSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1SelfServiceSettingsResponse(rsp)
}

// GetV1SitesWithResponse request returning *GetV1SitesResponse
func (c *ClientWithResponses) GetV1SitesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SitesResponse, error) {
	rsp, err := c.GetV1Sites(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SitesResponse(rsp)
}

// PostV1SmartComputerGroupsIdRecalculateWithResponse request returning *PostV1SmartComputerGroupsIdRecalculateResponse
func (c *ClientWithResponses) PostV1SmartComputerGroupsIdRecalculateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostV1SmartComputerGroupsIdRecalculateResponse, error) {
	rsp, err := c.PostV1SmartComputerGroupsIdRecalculate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SmartComputerGroupsIdRecalculateResponse(rsp)
}

// PostV1SmartMobileDeviceGroupsIdRecalculateWithResponse request returning *PostV1SmartMobileDeviceGroupsIdRecalculateResponse
func (c *ClientWithResponses) PostV1SmartMobileDeviceGroupsIdRecalculateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostV1SmartMobileDeviceGroupsIdRecalculateResponse, error) {
	rsp, err := c.PostV1SmartMobileDeviceGroupsIdRecalculate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SmartMobileDeviceGroupsIdRecalculateResponse(rsp)
}

// PostV1SmartUserGroupsIdRecalculateWithResponse request returning *PostV1SmartUserGroupsIdRecalculateResponse
func (c *ClientWithResponses) PostV1SmartUserGroupsIdRecalculateWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostV1SmartUserGroupsIdRecalculateResponse, error) {
	rsp, err := c.PostV1SmartUserGroupsIdRecalculate(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SmartUserGroupsIdRecalculateResponse(rsp)
}

// GetV1SsoWithResponse request returning *GetV1SsoResponse
func (c *ClientWithResponses) GetV1SsoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SsoResponse, error) {
	rsp, err := c.GetV1Sso(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SsoResponse(rsp)
}

// PutV1SsoWithBodyWithResponse request with arbitrary body returning *PutV1SsoResponse
func (c *ClientWithResponses) PutV1SsoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1SsoResponse, error) {
	rsp, err := c.PutV1SsoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1SsoResponse(rsp)
}

func (c *ClientWithResponses) PutV1SsoWithResponse(ctx context.Context, body PutV1SsoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1SsoResponse, error) {
	rsp, err := c.PutV1Sso(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1SsoResponse(rsp)
}

// DeleteV1SsoCertWithResponse request returning *DeleteV1SsoCertResponse
func (c *ClientWithResponses) DeleteV1SsoCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteV1SsoCertResponse, error) {
	rsp, err := c.DeleteV1SsoCert(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1SsoCertResponse(rsp)
}

// GetV1SsoCertWithResponse request returning *GetV1SsoCertResponse
func (c *ClientWithResponses) GetV1SsoCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SsoCertResponse, error) {
	rsp, err := c.GetV1SsoCert(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SsoCertResponse(rsp)
}

// PostV1SsoCertWithResponse request returning *PostV1SsoCertResponse
func (c *ClientWithResponses) PostV1SsoCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV1SsoCertResponse, error) {
	rsp, err := c.PostV1SsoCert(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SsoCertResponse(rsp)
}

// PutV1SsoCertWithBodyWithResponse request with arbitrary body returning *PutV1SsoCertResponse
func (c *ClientWithResponses) PutV1SsoCertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1SsoCertResponse, error) {
	rsp, err := c.PutV1SsoCertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1SsoCertResponse(rsp)
}

func (c *ClientWithResponses) PutV1SsoCertWithResponse(ctx context.Context, body PutV1SsoCertJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1SsoCertResponse, error) {
	rsp, err := c.PutV1SsoCert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1SsoCertResponse(rsp)
}

// GetV1SsoCertDownloadWithResponse request returning *GetV1SsoCertDownloadResponse
func (c *ClientWithResponses) GetV1SsoCertDownloadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SsoCertDownloadResponse, error) {
	rsp, err := c.GetV1SsoCertDownload(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SsoCertDownloadResponse(rsp)
}

// PostV1SsoCertParseWithBodyWithResponse request with arbitrary body returning *PostV1SsoCertParseResponse
func (c *ClientWithResponses) PostV1SsoCertParseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SsoCertParseResponse, error) {
	rsp, err := c.PostV1SsoCertParseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SsoCertParseResponse(rsp)
}

func (c *ClientWithResponses) PostV1SsoCertParseWithResponse(ctx context.Context, body PostV1SsoCertParseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SsoCertParseResponse, error) {
	rsp, err := c.PostV1SsoCertParse(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SsoCertParseResponse(rsp)
}

// GetV1SsoDependenciesWithResponse request returning *GetV1SsoDependenciesResponse
func (c *ClientWithResponses) GetV1SsoDependenciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SsoDependenciesResponse, error) {
	rsp, err := c.GetV1SsoDependencies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SsoDependenciesResponse(rsp)
}

// PostV1SsoDisableWithResponse request returning *PostV1SsoDisableResponse
func (c *ClientWithResponses) PostV1SsoDisableWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV1SsoDisableResponse, error) {
	rsp, err := c.PostV1SsoDisable(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SsoDisableResponse(rsp)
}

// GetV1SsoHistoryWithResponse request returning *GetV1SsoHistoryResponse
func (c *ClientWithResponses) GetV1SsoHistoryWithResponse(ctx context.Context, params *GetV1SsoHistoryParams, reqEditors ...RequestEditorFn) (*GetV1SsoHistoryResponse, error) {
	rsp, err := c.GetV1SsoHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SsoHistoryResponse(rsp)
}

// PostV1SsoHistoryWithBodyWithResponse request with arbitrary body returning *PostV1SsoHistoryResponse
func (c *ClientWithResponses) PostV1SsoHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SsoHistoryResponse, error) {
	rsp, err := c.PostV1SsoHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SsoHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1SsoHistoryWithResponse(ctx context.Context, body PostV1SsoHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SsoHistoryResponse, error) {
	rsp, err := c.PostV1SsoHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SsoHistoryResponse(rsp)
}

// GetV1SsoMetadataDownloadWithResponse request returning *GetV1SsoMetadataDownloadResponse
func (c *ClientWithResponses) GetV1SsoMetadataDownloadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1SsoMetadataDownloadResponse, error) {
	rsp, err := c.GetV1SsoMetadataDownload(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SsoMetadataDownloadResponse(rsp)
}

// PostV1SsoValidateWithBodyWithResponse request with arbitrary body returning *PostV1SsoValidateResponse
func (c *ClientWithResponses) PostV1SsoValidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SsoValidateResponse, error) {
	rsp, err := c.PostV1SsoValidateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SsoValidateResponse(rsp)
}

func (c *ClientWithResponses) PostV1SsoValidateWithResponse(ctx context.Context, body PostV1SsoValidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SsoValidateResponse, error) {
	rsp, err := c.PostV1SsoValidate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SsoValidateResponse(rsp)
}

// GetV1StaticUserGroupsWithResponse request returning *GetV1StaticUserGroupsResponse
func (c *ClientWithResponses) GetV1StaticUserGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1StaticUserGroupsResponse, error) {
	rsp, err := c.GetV1StaticUserGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1StaticUserGroupsResponse(rsp)
}

// GetV1StaticUserGroupsIdWithResponse request returning *GetV1StaticUserGroupsIdResponse
func (c *ClientWithResponses) GetV1StaticUserGroupsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1StaticUserGroupsIdResponse, error) {
	rsp, err := c.GetV1StaticUserGroupsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1StaticUserGroupsIdResponse(rsp)
}

// GetV1SupervisionIdentitiesWithResponse request returning *GetV1SupervisionIdentitiesResponse
func (c *ClientWithResponses) GetV1SupervisionIdentitiesWithResponse(ctx context.Context, params *GetV1SupervisionIdentitiesParams, reqEditors ...RequestEditorFn) (*GetV1SupervisionIdentitiesResponse, error) {
	rsp, err := c.GetV1SupervisionIdentities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SupervisionIdentitiesResponse(rsp)
}

// PostV1SupervisionIdentitiesWithBodyWithResponse request with arbitrary body returning *PostV1SupervisionIdentitiesResponse
func (c *ClientWithResponses) PostV1SupervisionIdentitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SupervisionIdentitiesResponse, error) {
	rsp, err := c.PostV1SupervisionIdentitiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SupervisionIdentitiesResponse(rsp)
}

func (c *ClientWithResponses) PostV1SupervisionIdentitiesWithResponse(ctx context.Context, body PostV1SupervisionIdentitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SupervisionIdentitiesResponse, error) {
	rsp, err := c.PostV1SupervisionIdentities(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SupervisionIdentitiesResponse(rsp)
}

// PostV1SupervisionIdentitiesUploadWithBodyWithResponse request with arbitrary body returning *PostV1SupervisionIdentitiesUploadResponse
func (c *ClientWithResponses) PostV1SupervisionIdentitiesUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SupervisionIdentitiesUploadResponse, error) {
	rsp, err := c.PostV1SupervisionIdentitiesUploadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SupervisionIdentitiesUploadResponse(rsp)
}

func (c *ClientWithResponses) PostV1SupervisionIdentitiesUploadWithResponse(ctx context.Context, body PostV1SupervisionIdentitiesUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SupervisionIdentitiesUploadResponse, error) {
	rsp, err := c.PostV1SupervisionIdentitiesUpload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SupervisionIdentitiesUploadResponse(rsp)
}

// DeleteV1SupervisionIdentitiesIdWithResponse request returning *DeleteV1SupervisionIdentitiesIdResponse
func (c *ClientWithResponses) DeleteV1SupervisionIdentitiesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteV1SupervisionIdentitiesIdResponse, error) {
	rsp, err := c.DeleteV1SupervisionIdentitiesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1SupervisionIdentitiesIdResponse(rsp)
}

// GetV1SupervisionIdentitiesIdWithResponse request returning *GetV1SupervisionIdentitiesIdResponse
func (c *ClientWithResponses) GetV1SupervisionIdentitiesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1SupervisionIdentitiesIdResponse, error) {
	rsp, err := c.GetV1SupervisionIdentitiesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SupervisionIdentitiesIdResponse(rsp)
}

// PutV1SupervisionIdentitiesIdWithBodyWithResponse request with arbitrary body returning *PutV1SupervisionIdentitiesIdResponse
func (c *ClientWithResponses) PutV1SupervisionIdentitiesIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1SupervisionIdentitiesIdResponse, error) {
	rsp, err := c.PutV1SupervisionIdentitiesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1SupervisionIdentitiesIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1SupervisionIdentitiesIdWithResponse(ctx context.Context, id int, body PutV1SupervisionIdentitiesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1SupervisionIdentitiesIdResponse, error) {
	rsp, err := c.PutV1SupervisionIdentitiesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1SupervisionIdentitiesIdResponse(rsp)
}

// GetV1SupervisionIdentitiesIdDownloadWithResponse request returning *GetV1SupervisionIdentitiesIdDownloadResponse
func (c *ClientWithResponses) GetV1SupervisionIdentitiesIdDownloadWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetV1SupervisionIdentitiesIdDownloadResponse, error) {
	rsp, err := c.GetV1SupervisionIdentitiesIdDownload(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SupervisionIdentitiesIdDownloadResponse(rsp)
}

// PostV1SystemInitializeWithBodyWithResponse request with arbitrary body returning *PostV1SystemInitializeResponse
func (c *ClientWithResponses) PostV1SystemInitializeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SystemInitializeResponse, error) {
	rsp, err := c.PostV1SystemInitializeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SystemInitializeResponse(rsp)
}

func (c *ClientWithResponses) PostV1SystemInitializeWithResponse(ctx context.Context, body PostV1SystemInitializeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SystemInitializeResponse, error) {
	rsp, err := c.PostV1SystemInitialize(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SystemInitializeResponse(rsp)
}

// PostV1SystemInitializeDatabaseConnectionWithBodyWithResponse request with arbitrary body returning *PostV1SystemInitializeDatabaseConnectionResponse
func (c *ClientWithResponses) PostV1SystemInitializeDatabaseConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SystemInitializeDatabaseConnectionResponse, error) {
	rsp, err := c.PostV1SystemInitializeDatabaseConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SystemInitializeDatabaseConnectionResponse(rsp)
}

func (c *ClientWithResponses) PostV1SystemInitializeDatabaseConnectionWithResponse(ctx context.Context, body PostV1SystemInitializeDatabaseConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SystemInitializeDatabaseConnectionResponse, error) {
	rsp, err := c.PostV1SystemInitializeDatabaseConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SystemInitializeDatabaseConnectionResponse(rsp)
}

// GetV1TeacherAppWithResponse request returning *GetV1TeacherAppResponse
func (c *ClientWithResponses) GetV1TeacherAppWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1TeacherAppResponse, error) {
	rsp, err := c.GetV1TeacherApp(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1TeacherAppResponse(rsp)
}

// PutV1TeacherAppWithBodyWithResponse request with arbitrary body returning *PutV1TeacherAppResponse
func (c *ClientWithResponses) PutV1TeacherAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1TeacherAppResponse, error) {
	rsp, err := c.PutV1TeacherAppWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1TeacherAppResponse(rsp)
}

func (c *ClientWithResponses) PutV1TeacherAppWithResponse(ctx context.Context, body PutV1TeacherAppJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1TeacherAppResponse, error) {
	rsp, err := c.PutV1TeacherApp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1TeacherAppResponse(rsp)
}

// GetV1TeacherAppHistoryWithResponse request returning *GetV1TeacherAppHistoryResponse
func (c *ClientWithResponses) GetV1TeacherAppHistoryWithResponse(ctx context.Context, params *GetV1TeacherAppHistoryParams, reqEditors ...RequestEditorFn) (*GetV1TeacherAppHistoryResponse, error) {
	rsp, err := c.GetV1TeacherAppHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1TeacherAppHistoryResponse(rsp)
}

// PostV1TeacherAppHistoryWithBodyWithResponse request with arbitrary body returning *PostV1TeacherAppHistoryResponse
func (c *ClientWithResponses) PostV1TeacherAppHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1TeacherAppHistoryResponse, error) {
	rsp, err := c.PostV1TeacherAppHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1TeacherAppHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV1TeacherAppHistoryWithResponse(ctx context.Context, body PostV1TeacherAppHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1TeacherAppHistoryResponse, error) {
	rsp, err := c.PostV1TeacherAppHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1TeacherAppHistoryResponse(rsp)
}

// GetV1TimeZonesWithResponse request returning *GetV1TimeZonesResponse
func (c *ClientWithResponses) GetV1TimeZonesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1TimeZonesResponse, error) {
	rsp, err := c.GetV1TimeZones(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1TimeZonesResponse(rsp)
}

// DeleteV1UserPreferencesKeyIdWithResponse request returning *DeleteV1UserPreferencesKeyIdResponse
func (c *ClientWithResponses) DeleteV1UserPreferencesKeyIdWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*DeleteV1UserPreferencesKeyIdResponse, error) {
	rsp, err := c.DeleteV1UserPreferencesKeyId(ctx, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1UserPreferencesKeyIdResponse(rsp)
}

// GetV1UserPreferencesKeyIdWithResponse request returning *GetV1UserPreferencesKeyIdResponse
func (c *ClientWithResponses) GetV1UserPreferencesKeyIdWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*GetV1UserPreferencesKeyIdResponse, error) {
	rsp, err := c.GetV1UserPreferencesKeyId(ctx, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1UserPreferencesKeyIdResponse(rsp)
}

// PutV1UserPreferencesKeyIdWithBodyWithResponse request with arbitrary body returning *PutV1UserPreferencesKeyIdResponse
func (c *ClientWithResponses) PutV1UserPreferencesKeyIdWithBodyWithResponse(ctx context.Context, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1UserPreferencesKeyIdResponse, error) {
	rsp, err := c.PutV1UserPreferencesKeyIdWithBody(ctx, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1UserPreferencesKeyIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1UserPreferencesKeyIdWithResponse(ctx context.Context, keyId string, body PutV1UserPreferencesKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1UserPreferencesKeyIdResponse, error) {
	rsp, err := c.PutV1UserPreferencesKeyId(ctx, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1UserPreferencesKeyIdResponse(rsp)
}

// PostV1UsersIdRecalculateSmartGroupsWithResponse request returning *PostV1UsersIdRecalculateSmartGroupsResponse
func (c *ClientWithResponses) PostV1UsersIdRecalculateSmartGroupsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PostV1UsersIdRecalculateSmartGroupsResponse, error) {
	rsp, err := c.PostV1UsersIdRecalculateSmartGroups(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersIdRecalculateSmartGroupsResponse(rsp)
}

// GetV1VolumePurchasingLocationsWithResponse request returning *GetV1VolumePurchasingLocationsResponse
func (c *ClientWithResponses) GetV1VolumePurchasingLocationsWithResponse(ctx context.Context, params *GetV1VolumePurchasingLocationsParams, reqEditors ...RequestEditorFn) (*GetV1VolumePurchasingLocationsResponse, error) {
	rsp, err := c.GetV1VolumePurchasingLocations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1VolumePurchasingLocationsResponse(rsp)
}

// PostV1VolumePurchasingLocationsWithBodyWithResponse request with arbitrary body returning *PostV1VolumePurchasingLocationsResponse
func (c *ClientWithResponses) PostV1VolumePurchasingLocationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1VolumePurchasingLocationsResponse, error) {
	rsp, err := c.PostV1VolumePurchasingLocationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1VolumePurchasingLocationsResponse(rsp)
}

func (c *ClientWithResponses) PostV1VolumePurchasingLocationsWithResponse(ctx context.Context, body PostV1VolumePurchasingLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1VolumePurchasingLocationsResponse, error) {
	rsp, err := c.PostV1VolumePurchasingLocations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1VolumePurchasingLocationsResponse(rsp)
}

// DeleteV1VolumePurchasingLocationsIdWithResponse request returning *DeleteV1VolumePurchasingLocationsIdResponse
func (c *ClientWithResponses) DeleteV1VolumePurchasingLocationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1VolumePurchasingLocationsIdResponse, error) {
	rsp, err := c.DeleteV1VolumePurchasingLocationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1VolumePurchasingLocationsIdResponse(rsp)
}

// GetV1VolumePurchasingLocationsIdWithResponse request returning *GetV1VolumePurchasingLocationsIdResponse
func (c *ClientWithResponses) GetV1VolumePurchasingLocationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1VolumePurchasingLocationsIdResponse, error) {
	rsp, err := c.GetV1VolumePurchasingLocationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1VolumePurchasingLocationsIdResponse(rsp)
}

// PatchV1VolumePurchasingLocationsIdWithBodyWithResponse request with arbitrary body returning *PatchV1VolumePurchasingLocationsIdResponse
func (c *ClientWithResponses) PatchV1VolumePurchasingLocationsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV1VolumePurchasingLocationsIdResponse, error) {
	rsp, err := c.PatchV1VolumePurchasingLocationsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV1VolumePurchasingLocationsIdResponse(rsp)
}

// GetV1VolumePurchasingLocationsIdHistoryWithResponse request returning *GetV1VolumePurchasingLocationsIdHistoryResponse
func (c *ClientWithResponses) GetV1VolumePurchasingLocationsIdHistoryWithResponse(ctx context.Context, id string, params *GetV1VolumePurchasingLocationsIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV1VolumePurchasingLocationsIdHistoryResponse, error) {
	rsp, err := c.GetV1VolumePurchasingLocationsIdHistory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1VolumePurchasingLocationsIdHistoryResponse(rsp)
}

// PostV1VolumePurchasingLocationsIdReclaimWithResponse request returning *PostV1VolumePurchasingLocationsIdReclaimResponse
func (c *ClientWithResponses) PostV1VolumePurchasingLocationsIdReclaimWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostV1VolumePurchasingLocationsIdReclaimResponse, error) {
	rsp, err := c.PostV1VolumePurchasingLocationsIdReclaim(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1VolumePurchasingLocationsIdReclaimResponse(rsp)
}

// PostV1VolumePurchasingLocationsIdRevokeLicensesWithResponse request returning *PostV1VolumePurchasingLocationsIdRevokeLicensesResponse
func (c *ClientWithResponses) PostV1VolumePurchasingLocationsIdRevokeLicensesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*PostV1VolumePurchasingLocationsIdRevokeLicensesResponse, error) {
	rsp, err := c.PostV1VolumePurchasingLocationsIdRevokeLicenses(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1VolumePurchasingLocationsIdRevokeLicensesResponse(rsp)
}

// GetV1VolumePurchasingSubscriptionsWithResponse request returning *GetV1VolumePurchasingSubscriptionsResponse
func (c *ClientWithResponses) GetV1VolumePurchasingSubscriptionsWithResponse(ctx context.Context, params *GetV1VolumePurchasingSubscriptionsParams, reqEditors ...RequestEditorFn) (*GetV1VolumePurchasingSubscriptionsResponse, error) {
	rsp, err := c.GetV1VolumePurchasingSubscriptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1VolumePurchasingSubscriptionsResponse(rsp)
}

// PostV1VolumePurchasingSubscriptionsWithBodyWithResponse request with arbitrary body returning *PostV1VolumePurchasingSubscriptionsResponse
func (c *ClientWithResponses) PostV1VolumePurchasingSubscriptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1VolumePurchasingSubscriptionsResponse, error) {
	rsp, err := c.PostV1VolumePurchasingSubscriptionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1VolumePurchasingSubscriptionsResponse(rsp)
}

func (c *ClientWithResponses) PostV1VolumePurchasingSubscriptionsWithResponse(ctx context.Context, body PostV1VolumePurchasingSubscriptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1VolumePurchasingSubscriptionsResponse, error) {
	rsp, err := c.PostV1VolumePurchasingSubscriptions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1VolumePurchasingSubscriptionsResponse(rsp)
}

// DeleteV1VolumePurchasingSubscriptionsIdWithResponse request returning *DeleteV1VolumePurchasingSubscriptionsIdResponse
func (c *ClientWithResponses) DeleteV1VolumePurchasingSubscriptionsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1VolumePurchasingSubscriptionsIdResponse, error) {
	rsp, err := c.DeleteV1VolumePurchasingSubscriptionsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1VolumePurchasingSubscriptionsIdResponse(rsp)
}

// GetV1VolumePurchasingSubscriptionsIdWithResponse request returning *GetV1VolumePurchasingSubscriptionsIdResponse
func (c *ClientWithResponses) GetV1VolumePurchasingSubscriptionsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1VolumePurchasingSubscriptionsIdResponse, error) {
	rsp, err := c.GetV1VolumePurchasingSubscriptionsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1VolumePurchasingSubscriptionsIdResponse(rsp)
}

// PutV1VolumePurchasingSubscriptionsIdWithBodyWithResponse request with arbitrary body returning *PutV1VolumePurchasingSubscriptionsIdResponse
func (c *ClientWithResponses) PutV1VolumePurchasingSubscriptionsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1VolumePurchasingSubscriptionsIdResponse, error) {
	rsp, err := c.PutV1VolumePurchasingSubscriptionsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1VolumePurchasingSubscriptionsIdResponse(rsp)
}

func (c *ClientWithResponses) PutV1VolumePurchasingSubscriptionsIdWithResponse(ctx context.Context, id string, body PutV1VolumePurchasingSubscriptionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1VolumePurchasingSubscriptionsIdResponse, error) {
	rsp, err := c.PutV1VolumePurchasingSubscriptionsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1VolumePurchasingSubscriptionsIdResponse(rsp)
}

// GetV2CheckInWithResponse request returning *GetV2CheckInResponse
func (c *ClientWithResponses) GetV2CheckInWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2CheckInResponse, error) {
	rsp, err := c.GetV2CheckIn(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CheckInResponse(rsp)
}

// PutV2CheckInWithBodyWithResponse request with arbitrary body returning *PutV2CheckInResponse
func (c *ClientWithResponses) PutV2CheckInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2CheckInResponse, error) {
	rsp, err := c.PutV2CheckInWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2CheckInResponse(rsp)
}

func (c *ClientWithResponses) PutV2CheckInWithResponse(ctx context.Context, body PutV2CheckInJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2CheckInResponse, error) {
	rsp, err := c.PutV2CheckIn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2CheckInResponse(rsp)
}

// GetV2CheckInHistoryWithResponse request returning *GetV2CheckInHistoryResponse
func (c *ClientWithResponses) GetV2CheckInHistoryWithResponse(ctx context.Context, params *GetV2CheckInHistoryParams, reqEditors ...RequestEditorFn) (*GetV2CheckInHistoryResponse, error) {
	rsp, err := c.GetV2CheckInHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CheckInHistoryResponse(rsp)
}

// PostV2CheckInHistoryWithBodyWithResponse request with arbitrary body returning *PostV2CheckInHistoryResponse
func (c *ClientWithResponses) PostV2CheckInHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CheckInHistoryResponse, error) {
	rsp, err := c.PostV2CheckInHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CheckInHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV2CheckInHistoryWithResponse(ctx context.Context, body PostV2CheckInHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CheckInHistoryResponse, error) {
	rsp, err := c.PostV2CheckInHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CheckInHistoryResponse(rsp)
}

// PostV2CloudLdapsWithBodyWithResponse request with arbitrary body returning *PostV2CloudLdapsResponse
func (c *ClientWithResponses) PostV2CloudLdapsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2CloudLdapsResponse, error) {
	rsp, err := c.PostV2CloudLdapsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CloudLdapsResponse(rsp)
}

func (c *ClientWithResponses) PostV2CloudLdapsWithResponse(ctx context.Context, body PostV2CloudLdapsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2CloudLdapsResponse, error) {
	rsp, err := c.PostV2CloudLdaps(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2CloudLdapsResponse(rsp)
}

// GetV2CloudLdapsDefaultsProviderMappingsWithResponse request returning *GetV2CloudLdapsDefaultsProviderMappingsResponse
func (c *ClientWithResponses) GetV2CloudLdapsDefaultsProviderMappingsWithResponse(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*GetV2CloudLdapsDefaultsProviderMappingsResponse, error) {
	rsp, err := c.GetV2CloudLdapsDefaultsProviderMappings(ctx, provider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CloudLdapsDefaultsProviderMappingsResponse(rsp)
}

// GetV2CloudLdapsDefaultsProviderServerConfigurationWithResponse request returning *GetV2CloudLdapsDefaultsProviderServerConfigurationResponse
func (c *ClientWithResponses) GetV2CloudLdapsDefaultsProviderServerConfigurationWithResponse(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*GetV2CloudLdapsDefaultsProviderServerConfigurationResponse, error) {
	rsp, err := c.GetV2CloudLdapsDefaultsProviderServerConfiguration(ctx, provider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CloudLdapsDefaultsProviderServerConfigurationResponse(rsp)
}

// DeleteV2CloudLdapsIdWithResponse request returning *DeleteV2CloudLdapsIdResponse
func (c *ClientWithResponses) DeleteV2CloudLdapsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV2CloudLdapsIdResponse, error) {
	rsp, err := c.DeleteV2CloudLdapsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2CloudLdapsIdResponse(rsp)
}

// GetV2CloudLdapsIdWithResponse request returning *GetV2CloudLdapsIdResponse
func (c *ClientWithResponses) GetV2CloudLdapsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2CloudLdapsIdResponse, error) {
	rsp, err := c.GetV2CloudLdapsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CloudLdapsIdResponse(rsp)
}

// PutV2CloudLdapsIdWithBodyWithResponse request with arbitrary body returning *PutV2CloudLdapsIdResponse
func (c *ClientWithResponses) PutV2CloudLdapsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2CloudLdapsIdResponse, error) {
	rsp, err := c.PutV2CloudLdapsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2CloudLdapsIdResponse(rsp)
}

func (c *ClientWithResponses) PutV2CloudLdapsIdWithResponse(ctx context.Context, id string, body PutV2CloudLdapsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2CloudLdapsIdResponse, error) {
	rsp, err := c.PutV2CloudLdapsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2CloudLdapsIdResponse(rsp)
}

// GetV2CloudLdapsIdConnectionBindWithResponse request returning *GetV2CloudLdapsIdConnectionBindResponse
func (c *ClientWithResponses) GetV2CloudLdapsIdConnectionBindWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2CloudLdapsIdConnectionBindResponse, error) {
	rsp, err := c.GetV2CloudLdapsIdConnectionBind(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CloudLdapsIdConnectionBindResponse(rsp)
}

// GetV2CloudLdapsIdConnectionSearchWithResponse request returning *GetV2CloudLdapsIdConnectionSearchResponse
func (c *ClientWithResponses) GetV2CloudLdapsIdConnectionSearchWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2CloudLdapsIdConnectionSearchResponse, error) {
	rsp, err := c.GetV2CloudLdapsIdConnectionSearch(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CloudLdapsIdConnectionSearchResponse(rsp)
}

// GetV2CloudLdapsIdConnectionStatusWithResponse request returning *GetV2CloudLdapsIdConnectionStatusResponse
func (c *ClientWithResponses) GetV2CloudLdapsIdConnectionStatusWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2CloudLdapsIdConnectionStatusResponse, error) {
	rsp, err := c.GetV2CloudLdapsIdConnectionStatus(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CloudLdapsIdConnectionStatusResponse(rsp)
}

// GetV2CloudLdapsIdMappingsWithResponse request returning *GetV2CloudLdapsIdMappingsResponse
func (c *ClientWithResponses) GetV2CloudLdapsIdMappingsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2CloudLdapsIdMappingsResponse, error) {
	rsp, err := c.GetV2CloudLdapsIdMappings(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CloudLdapsIdMappingsResponse(rsp)
}

// PutV2CloudLdapsIdMappingsWithBodyWithResponse request with arbitrary body returning *PutV2CloudLdapsIdMappingsResponse
func (c *ClientWithResponses) PutV2CloudLdapsIdMappingsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2CloudLdapsIdMappingsResponse, error) {
	rsp, err := c.PutV2CloudLdapsIdMappingsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2CloudLdapsIdMappingsResponse(rsp)
}

func (c *ClientWithResponses) PutV2CloudLdapsIdMappingsWithResponse(ctx context.Context, id string, body PutV2CloudLdapsIdMappingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2CloudLdapsIdMappingsResponse, error) {
	rsp, err := c.PutV2CloudLdapsIdMappings(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2CloudLdapsIdMappingsResponse(rsp)
}

// GetV2ComputerPrestagesWithResponse request returning *GetV2ComputerPrestagesResponse
func (c *ClientWithResponses) GetV2ComputerPrestagesWithResponse(ctx context.Context, params *GetV2ComputerPrestagesParams, reqEditors ...RequestEditorFn) (*GetV2ComputerPrestagesResponse, error) {
	rsp, err := c.GetV2ComputerPrestages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ComputerPrestagesResponse(rsp)
}

// PostV2ComputerPrestagesWithBodyWithResponse request with arbitrary body returning *PostV2ComputerPrestagesResponse
func (c *ClientWithResponses) PostV2ComputerPrestagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ComputerPrestagesResponse, error) {
	rsp, err := c.PostV2ComputerPrestagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ComputerPrestagesResponse(rsp)
}

func (c *ClientWithResponses) PostV2ComputerPrestagesWithResponse(ctx context.Context, body PostV2ComputerPrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ComputerPrestagesResponse, error) {
	rsp, err := c.PostV2ComputerPrestages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ComputerPrestagesResponse(rsp)
}

// GetV2ComputerPrestagesScopeWithResponse request returning *GetV2ComputerPrestagesScopeResponse
func (c *ClientWithResponses) GetV2ComputerPrestagesScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2ComputerPrestagesScopeResponse, error) {
	rsp, err := c.GetV2ComputerPrestagesScope(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ComputerPrestagesScopeResponse(rsp)
}

// DeleteV2ComputerPrestagesIdWithResponse request returning *DeleteV2ComputerPrestagesIdResponse
func (c *ClientWithResponses) DeleteV2ComputerPrestagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV2ComputerPrestagesIdResponse, error) {
	rsp, err := c.DeleteV2ComputerPrestagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2ComputerPrestagesIdResponse(rsp)
}

// GetV2ComputerPrestagesIdWithResponse request returning *GetV2ComputerPrestagesIdResponse
func (c *ClientWithResponses) GetV2ComputerPrestagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2ComputerPrestagesIdResponse, error) {
	rsp, err := c.GetV2ComputerPrestagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ComputerPrestagesIdResponse(rsp)
}

// PutV2ComputerPrestagesIdWithBodyWithResponse request with arbitrary body returning *PutV2ComputerPrestagesIdResponse
func (c *ClientWithResponses) PutV2ComputerPrestagesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2ComputerPrestagesIdResponse, error) {
	rsp, err := c.PutV2ComputerPrestagesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2ComputerPrestagesIdResponse(rsp)
}

func (c *ClientWithResponses) PutV2ComputerPrestagesIdWithResponse(ctx context.Context, id string, body PutV2ComputerPrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2ComputerPrestagesIdResponse, error) {
	rsp, err := c.PutV2ComputerPrestagesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2ComputerPrestagesIdResponse(rsp)
}

// GetV2ComputerPrestagesIdScopeWithResponse request returning *GetV2ComputerPrestagesIdScopeResponse
func (c *ClientWithResponses) GetV2ComputerPrestagesIdScopeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2ComputerPrestagesIdScopeResponse, error) {
	rsp, err := c.GetV2ComputerPrestagesIdScope(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ComputerPrestagesIdScopeResponse(rsp)
}

// PostV2ComputerPrestagesIdScopeWithBodyWithResponse request with arbitrary body returning *PostV2ComputerPrestagesIdScopeResponse
func (c *ClientWithResponses) PostV2ComputerPrestagesIdScopeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ComputerPrestagesIdScopeResponse, error) {
	rsp, err := c.PostV2ComputerPrestagesIdScopeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ComputerPrestagesIdScopeResponse(rsp)
}

func (c *ClientWithResponses) PostV2ComputerPrestagesIdScopeWithResponse(ctx context.Context, id string, body PostV2ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ComputerPrestagesIdScopeResponse, error) {
	rsp, err := c.PostV2ComputerPrestagesIdScope(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ComputerPrestagesIdScopeResponse(rsp)
}

// PutV2ComputerPrestagesIdScopeWithBodyWithResponse request with arbitrary body returning *PutV2ComputerPrestagesIdScopeResponse
func (c *ClientWithResponses) PutV2ComputerPrestagesIdScopeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2ComputerPrestagesIdScopeResponse, error) {
	rsp, err := c.PutV2ComputerPrestagesIdScopeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2ComputerPrestagesIdScopeResponse(rsp)
}

func (c *ClientWithResponses) PutV2ComputerPrestagesIdScopeWithResponse(ctx context.Context, id string, body PutV2ComputerPrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2ComputerPrestagesIdScopeResponse, error) {
	rsp, err := c.PutV2ComputerPrestagesIdScope(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2ComputerPrestagesIdScopeResponse(rsp)
}

// PostV2ComputerPrestagesIdScopeDeleteMultipleWithBodyWithResponse request with arbitrary body returning *PostV2ComputerPrestagesIdScopeDeleteMultipleResponse
func (c *ClientWithResponses) PostV2ComputerPrestagesIdScopeDeleteMultipleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2ComputerPrestagesIdScopeDeleteMultipleResponse, error) {
	rsp, err := c.PostV2ComputerPrestagesIdScopeDeleteMultipleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ComputerPrestagesIdScopeDeleteMultipleResponse(rsp)
}

func (c *ClientWithResponses) PostV2ComputerPrestagesIdScopeDeleteMultipleWithResponse(ctx context.Context, id string, body PostV2ComputerPrestagesIdScopeDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2ComputerPrestagesIdScopeDeleteMultipleResponse, error) {
	rsp, err := c.PostV2ComputerPrestagesIdScopeDeleteMultiple(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2ComputerPrestagesIdScopeDeleteMultipleResponse(rsp)
}

// GetV2EnrollmentWithResponse request returning *GetV2EnrollmentResponse
func (c *ClientWithResponses) GetV2EnrollmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2EnrollmentResponse, error) {
	rsp, err := c.GetV2Enrollment(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2EnrollmentResponse(rsp)
}

// PutV2EnrollmentWithBodyWithResponse request with arbitrary body returning *PutV2EnrollmentResponse
func (c *ClientWithResponses) PutV2EnrollmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2EnrollmentResponse, error) {
	rsp, err := c.PutV2EnrollmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2EnrollmentResponse(rsp)
}

func (c *ClientWithResponses) PutV2EnrollmentWithResponse(ctx context.Context, body PutV2EnrollmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2EnrollmentResponse, error) {
	rsp, err := c.PutV2Enrollment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2EnrollmentResponse(rsp)
}

// GetV2EnrollmentCustomizationsWithResponse request returning *GetV2EnrollmentCustomizationsResponse
func (c *ClientWithResponses) GetV2EnrollmentCustomizationsWithResponse(ctx context.Context, params *GetV2EnrollmentCustomizationsParams, reqEditors ...RequestEditorFn) (*GetV2EnrollmentCustomizationsResponse, error) {
	rsp, err := c.GetV2EnrollmentCustomizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2EnrollmentCustomizationsResponse(rsp)
}

// PostV2EnrollmentCustomizationsWithBodyWithResponse request with arbitrary body returning *PostV2EnrollmentCustomizationsResponse
func (c *ClientWithResponses) PostV2EnrollmentCustomizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2EnrollmentCustomizationsResponse, error) {
	rsp, err := c.PostV2EnrollmentCustomizationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2EnrollmentCustomizationsResponse(rsp)
}

func (c *ClientWithResponses) PostV2EnrollmentCustomizationsWithResponse(ctx context.Context, body PostV2EnrollmentCustomizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2EnrollmentCustomizationsResponse, error) {
	rsp, err := c.PostV2EnrollmentCustomizations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2EnrollmentCustomizationsResponse(rsp)
}

// PostV2EnrollmentCustomizationsImagesWithBodyWithResponse request with arbitrary body returning *PostV2EnrollmentCustomizationsImagesResponse
func (c *ClientWithResponses) PostV2EnrollmentCustomizationsImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2EnrollmentCustomizationsImagesResponse, error) {
	rsp, err := c.PostV2EnrollmentCustomizationsImagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2EnrollmentCustomizationsImagesResponse(rsp)
}

// DeleteV2EnrollmentCustomizationsIdWithResponse request returning *DeleteV2EnrollmentCustomizationsIdResponse
func (c *ClientWithResponses) DeleteV2EnrollmentCustomizationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV2EnrollmentCustomizationsIdResponse, error) {
	rsp, err := c.DeleteV2EnrollmentCustomizationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2EnrollmentCustomizationsIdResponse(rsp)
}

// GetV2EnrollmentCustomizationsIdWithResponse request returning *GetV2EnrollmentCustomizationsIdResponse
func (c *ClientWithResponses) GetV2EnrollmentCustomizationsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2EnrollmentCustomizationsIdResponse, error) {
	rsp, err := c.GetV2EnrollmentCustomizationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2EnrollmentCustomizationsIdResponse(rsp)
}

// PutV2EnrollmentCustomizationsIdWithBodyWithResponse request with arbitrary body returning *PutV2EnrollmentCustomizationsIdResponse
func (c *ClientWithResponses) PutV2EnrollmentCustomizationsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2EnrollmentCustomizationsIdResponse, error) {
	rsp, err := c.PutV2EnrollmentCustomizationsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2EnrollmentCustomizationsIdResponse(rsp)
}

func (c *ClientWithResponses) PutV2EnrollmentCustomizationsIdWithResponse(ctx context.Context, id string, body PutV2EnrollmentCustomizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2EnrollmentCustomizationsIdResponse, error) {
	rsp, err := c.PutV2EnrollmentCustomizationsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2EnrollmentCustomizationsIdResponse(rsp)
}

// GetV2EnrollmentCustomizationsIdHistoryWithResponse request returning *GetV2EnrollmentCustomizationsIdHistoryResponse
func (c *ClientWithResponses) GetV2EnrollmentCustomizationsIdHistoryWithResponse(ctx context.Context, id string, params *GetV2EnrollmentCustomizationsIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV2EnrollmentCustomizationsIdHistoryResponse, error) {
	rsp, err := c.GetV2EnrollmentCustomizationsIdHistory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2EnrollmentCustomizationsIdHistoryResponse(rsp)
}

// PostV2EnrollmentCustomizationsIdHistoryWithBodyWithResponse request with arbitrary body returning *PostV2EnrollmentCustomizationsIdHistoryResponse
func (c *ClientWithResponses) PostV2EnrollmentCustomizationsIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2EnrollmentCustomizationsIdHistoryResponse, error) {
	rsp, err := c.PostV2EnrollmentCustomizationsIdHistoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2EnrollmentCustomizationsIdHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV2EnrollmentCustomizationsIdHistoryWithResponse(ctx context.Context, id string, body PostV2EnrollmentCustomizationsIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2EnrollmentCustomizationsIdHistoryResponse, error) {
	rsp, err := c.PostV2EnrollmentCustomizationsIdHistory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2EnrollmentCustomizationsIdHistoryResponse(rsp)
}

// GetV2EnrollmentCustomizationsIdPrestagesWithResponse request returning *GetV2EnrollmentCustomizationsIdPrestagesResponse
func (c *ClientWithResponses) GetV2EnrollmentCustomizationsIdPrestagesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2EnrollmentCustomizationsIdPrestagesResponse, error) {
	rsp, err := c.GetV2EnrollmentCustomizationsIdPrestages(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2EnrollmentCustomizationsIdPrestagesResponse(rsp)
}

// GetV2EnrollmentAccessGroupsWithResponse request returning *GetV2EnrollmentAccessGroupsResponse
func (c *ClientWithResponses) GetV2EnrollmentAccessGroupsWithResponse(ctx context.Context, params *GetV2EnrollmentAccessGroupsParams, reqEditors ...RequestEditorFn) (*GetV2EnrollmentAccessGroupsResponse, error) {
	rsp, err := c.GetV2EnrollmentAccessGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2EnrollmentAccessGroupsResponse(rsp)
}

// PostV2EnrollmentAccessGroupsWithBodyWithResponse request with arbitrary body returning *PostV2EnrollmentAccessGroupsResponse
func (c *ClientWithResponses) PostV2EnrollmentAccessGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2EnrollmentAccessGroupsResponse, error) {
	rsp, err := c.PostV2EnrollmentAccessGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2EnrollmentAccessGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostV2EnrollmentAccessGroupsWithResponse(ctx context.Context, body PostV2EnrollmentAccessGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2EnrollmentAccessGroupsResponse, error) {
	rsp, err := c.PostV2EnrollmentAccessGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2EnrollmentAccessGroupsResponse(rsp)
}

// DeleteV2EnrollmentAccessGroupsServerIdGroupIdWithResponse request returning *DeleteV2EnrollmentAccessGroupsServerIdGroupIdResponse
func (c *ClientWithResponses) DeleteV2EnrollmentAccessGroupsServerIdGroupIdWithResponse(ctx context.Context, serverId string, groupId string, reqEditors ...RequestEditorFn) (*DeleteV2EnrollmentAccessGroupsServerIdGroupIdResponse, error) {
	rsp, err := c.DeleteV2EnrollmentAccessGroupsServerIdGroupId(ctx, serverId, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2EnrollmentAccessGroupsServerIdGroupIdResponse(rsp)
}

// GetV2EnrollmentAccessGroupsServerIdGroupIdWithResponse request returning *GetV2EnrollmentAccessGroupsServerIdGroupIdResponse
func (c *ClientWithResponses) GetV2EnrollmentAccessGroupsServerIdGroupIdWithResponse(ctx context.Context, serverId string, groupId string, reqEditors ...RequestEditorFn) (*GetV2EnrollmentAccessGroupsServerIdGroupIdResponse, error) {
	rsp, err := c.GetV2EnrollmentAccessGroupsServerIdGroupId(ctx, serverId, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2EnrollmentAccessGroupsServerIdGroupIdResponse(rsp)
}

// PutV2EnrollmentAccessGroupsServerIdGroupIdWithBodyWithResponse request with arbitrary body returning *PutV2EnrollmentAccessGroupsServerIdGroupIdResponse
func (c *ClientWithResponses) PutV2EnrollmentAccessGroupsServerIdGroupIdWithBodyWithResponse(ctx context.Context, serverId string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2EnrollmentAccessGroupsServerIdGroupIdResponse, error) {
	rsp, err := c.PutV2EnrollmentAccessGroupsServerIdGroupIdWithBody(ctx, serverId, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2EnrollmentAccessGroupsServerIdGroupIdResponse(rsp)
}

func (c *ClientWithResponses) PutV2EnrollmentAccessGroupsServerIdGroupIdWithResponse(ctx context.Context, serverId string, groupId string, body PutV2EnrollmentAccessGroupsServerIdGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2EnrollmentAccessGroupsServerIdGroupIdResponse, error) {
	rsp, err := c.PutV2EnrollmentAccessGroupsServerIdGroupId(ctx, serverId, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2EnrollmentAccessGroupsServerIdGroupIdResponse(rsp)
}

// GetV2EnrollmentFilteredLanguageCodesWithResponse request returning *GetV2EnrollmentFilteredLanguageCodesResponse
func (c *ClientWithResponses) GetV2EnrollmentFilteredLanguageCodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2EnrollmentFilteredLanguageCodesResponse, error) {
	rsp, err := c.GetV2EnrollmentFilteredLanguageCodes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2EnrollmentFilteredLanguageCodesResponse(rsp)
}

// GetV2EnrollmentHistoryWithResponse request returning *GetV2EnrollmentHistoryResponse
func (c *ClientWithResponses) GetV2EnrollmentHistoryWithResponse(ctx context.Context, params *GetV2EnrollmentHistoryParams, reqEditors ...RequestEditorFn) (*GetV2EnrollmentHistoryResponse, error) {
	rsp, err := c.GetV2EnrollmentHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2EnrollmentHistoryResponse(rsp)
}

// PostV2EnrollmentHistoryWithBodyWithResponse request with arbitrary body returning *PostV2EnrollmentHistoryResponse
func (c *ClientWithResponses) PostV2EnrollmentHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2EnrollmentHistoryResponse, error) {
	rsp, err := c.PostV2EnrollmentHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2EnrollmentHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV2EnrollmentHistoryWithResponse(ctx context.Context, body PostV2EnrollmentHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2EnrollmentHistoryResponse, error) {
	rsp, err := c.PostV2EnrollmentHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2EnrollmentHistoryResponse(rsp)
}

// PostV2EnrollmentHistoryExportWithBodyWithResponse request with arbitrary body returning *PostV2EnrollmentHistoryExportResponse
func (c *ClientWithResponses) PostV2EnrollmentHistoryExportWithBodyWithResponse(ctx context.Context, params *PostV2EnrollmentHistoryExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2EnrollmentHistoryExportResponse, error) {
	rsp, err := c.PostV2EnrollmentHistoryExportWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2EnrollmentHistoryExportResponse(rsp)
}

func (c *ClientWithResponses) PostV2EnrollmentHistoryExportWithResponse(ctx context.Context, params *PostV2EnrollmentHistoryExportParams, body PostV2EnrollmentHistoryExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2EnrollmentHistoryExportResponse, error) {
	rsp, err := c.PostV2EnrollmentHistoryExport(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2EnrollmentHistoryExportResponse(rsp)
}

// GetV2EnrollmentLanguageCodesWithResponse request returning *GetV2EnrollmentLanguageCodesResponse
func (c *ClientWithResponses) GetV2EnrollmentLanguageCodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2EnrollmentLanguageCodesResponse, error) {
	rsp, err := c.GetV2EnrollmentLanguageCodes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2EnrollmentLanguageCodesResponse(rsp)
}

// GetV2EnrollmentLanguagesWithResponse request returning *GetV2EnrollmentLanguagesResponse
func (c *ClientWithResponses) GetV2EnrollmentLanguagesWithResponse(ctx context.Context, params *GetV2EnrollmentLanguagesParams, reqEditors ...RequestEditorFn) (*GetV2EnrollmentLanguagesResponse, error) {
	rsp, err := c.GetV2EnrollmentLanguages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2EnrollmentLanguagesResponse(rsp)
}

// PostV2EnrollmentLanguagesDeleteMultipleWithBodyWithResponse request with arbitrary body returning *PostV2EnrollmentLanguagesDeleteMultipleResponse
func (c *ClientWithResponses) PostV2EnrollmentLanguagesDeleteMultipleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2EnrollmentLanguagesDeleteMultipleResponse, error) {
	rsp, err := c.PostV2EnrollmentLanguagesDeleteMultipleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2EnrollmentLanguagesDeleteMultipleResponse(rsp)
}

func (c *ClientWithResponses) PostV2EnrollmentLanguagesDeleteMultipleWithResponse(ctx context.Context, body PostV2EnrollmentLanguagesDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2EnrollmentLanguagesDeleteMultipleResponse, error) {
	rsp, err := c.PostV2EnrollmentLanguagesDeleteMultiple(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2EnrollmentLanguagesDeleteMultipleResponse(rsp)
}

// DeleteV2EnrollmentLanguagesLanguageIdWithResponse request returning *DeleteV2EnrollmentLanguagesLanguageIdResponse
func (c *ClientWithResponses) DeleteV2EnrollmentLanguagesLanguageIdWithResponse(ctx context.Context, languageId string, reqEditors ...RequestEditorFn) (*DeleteV2EnrollmentLanguagesLanguageIdResponse, error) {
	rsp, err := c.DeleteV2EnrollmentLanguagesLanguageId(ctx, languageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2EnrollmentLanguagesLanguageIdResponse(rsp)
}

// GetV2EnrollmentLanguagesLanguageIdWithResponse request returning *GetV2EnrollmentLanguagesLanguageIdResponse
func (c *ClientWithResponses) GetV2EnrollmentLanguagesLanguageIdWithResponse(ctx context.Context, languageId string, reqEditors ...RequestEditorFn) (*GetV2EnrollmentLanguagesLanguageIdResponse, error) {
	rsp, err := c.GetV2EnrollmentLanguagesLanguageId(ctx, languageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2EnrollmentLanguagesLanguageIdResponse(rsp)
}

// PutV2EnrollmentLanguagesLanguageIdWithBodyWithResponse request with arbitrary body returning *PutV2EnrollmentLanguagesLanguageIdResponse
func (c *ClientWithResponses) PutV2EnrollmentLanguagesLanguageIdWithBodyWithResponse(ctx context.Context, languageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2EnrollmentLanguagesLanguageIdResponse, error) {
	rsp, err := c.PutV2EnrollmentLanguagesLanguageIdWithBody(ctx, languageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2EnrollmentLanguagesLanguageIdResponse(rsp)
}

func (c *ClientWithResponses) PutV2EnrollmentLanguagesLanguageIdWithResponse(ctx context.Context, languageId string, body PutV2EnrollmentLanguagesLanguageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2EnrollmentLanguagesLanguageIdResponse, error) {
	rsp, err := c.PutV2EnrollmentLanguagesLanguageId(ctx, languageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2EnrollmentLanguagesLanguageIdResponse(rsp)
}

// GetV2InventoryPreloadCsvWithResponse request returning *GetV2InventoryPreloadCsvResponse
func (c *ClientWithResponses) GetV2InventoryPreloadCsvWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2InventoryPreloadCsvResponse, error) {
	rsp, err := c.GetV2InventoryPreloadCsv(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2InventoryPreloadCsvResponse(rsp)
}

// PostV2InventoryPreloadCsvWithBodyWithResponse request with arbitrary body returning *PostV2InventoryPreloadCsvResponse
func (c *ClientWithResponses) PostV2InventoryPreloadCsvWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadCsvResponse, error) {
	rsp, err := c.PostV2InventoryPreloadCsvWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2InventoryPreloadCsvResponse(rsp)
}

// GetV2InventoryPreloadCsvTemplateWithResponse request returning *GetV2InventoryPreloadCsvTemplateResponse
func (c *ClientWithResponses) GetV2InventoryPreloadCsvTemplateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2InventoryPreloadCsvTemplateResponse, error) {
	rsp, err := c.GetV2InventoryPreloadCsvTemplate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2InventoryPreloadCsvTemplateResponse(rsp)
}

// PostV2InventoryPreloadCsvValidateWithBodyWithResponse request with arbitrary body returning *PostV2InventoryPreloadCsvValidateResponse
func (c *ClientWithResponses) PostV2InventoryPreloadCsvValidateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadCsvValidateResponse, error) {
	rsp, err := c.PostV2InventoryPreloadCsvValidateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2InventoryPreloadCsvValidateResponse(rsp)
}

// GetV2InventoryPreloadEaColumnsWithResponse request returning *GetV2InventoryPreloadEaColumnsResponse
func (c *ClientWithResponses) GetV2InventoryPreloadEaColumnsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2InventoryPreloadEaColumnsResponse, error) {
	rsp, err := c.GetV2InventoryPreloadEaColumns(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2InventoryPreloadEaColumnsResponse(rsp)
}

// PostV2InventoryPreloadExportWithBodyWithResponse request with arbitrary body returning *PostV2InventoryPreloadExportResponse
func (c *ClientWithResponses) PostV2InventoryPreloadExportWithBodyWithResponse(ctx context.Context, params *PostV2InventoryPreloadExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadExportResponse, error) {
	rsp, err := c.PostV2InventoryPreloadExportWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2InventoryPreloadExportResponse(rsp)
}

func (c *ClientWithResponses) PostV2InventoryPreloadExportWithResponse(ctx context.Context, params *PostV2InventoryPreloadExportParams, body PostV2InventoryPreloadExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadExportResponse, error) {
	rsp, err := c.PostV2InventoryPreloadExport(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2InventoryPreloadExportResponse(rsp)
}

// GetV2InventoryPreloadHistoryWithResponse request returning *GetV2InventoryPreloadHistoryResponse
func (c *ClientWithResponses) GetV2InventoryPreloadHistoryWithResponse(ctx context.Context, params *GetV2InventoryPreloadHistoryParams, reqEditors ...RequestEditorFn) (*GetV2InventoryPreloadHistoryResponse, error) {
	rsp, err := c.GetV2InventoryPreloadHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2InventoryPreloadHistoryResponse(rsp)
}

// PostV2InventoryPreloadHistoryWithBodyWithResponse request with arbitrary body returning *PostV2InventoryPreloadHistoryResponse
func (c *ClientWithResponses) PostV2InventoryPreloadHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadHistoryResponse, error) {
	rsp, err := c.PostV2InventoryPreloadHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2InventoryPreloadHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV2InventoryPreloadHistoryWithResponse(ctx context.Context, body PostV2InventoryPreloadHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadHistoryResponse, error) {
	rsp, err := c.PostV2InventoryPreloadHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2InventoryPreloadHistoryResponse(rsp)
}

// GetV2InventoryPreloadRecordsWithResponse request returning *GetV2InventoryPreloadRecordsResponse
func (c *ClientWithResponses) GetV2InventoryPreloadRecordsWithResponse(ctx context.Context, params *GetV2InventoryPreloadRecordsParams, reqEditors ...RequestEditorFn) (*GetV2InventoryPreloadRecordsResponse, error) {
	rsp, err := c.GetV2InventoryPreloadRecords(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2InventoryPreloadRecordsResponse(rsp)
}

// PostV2InventoryPreloadRecordsWithBodyWithResponse request with arbitrary body returning *PostV2InventoryPreloadRecordsResponse
func (c *ClientWithResponses) PostV2InventoryPreloadRecordsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadRecordsResponse, error) {
	rsp, err := c.PostV2InventoryPreloadRecordsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2InventoryPreloadRecordsResponse(rsp)
}

func (c *ClientWithResponses) PostV2InventoryPreloadRecordsWithResponse(ctx context.Context, body PostV2InventoryPreloadRecordsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadRecordsResponse, error) {
	rsp, err := c.PostV2InventoryPreloadRecords(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2InventoryPreloadRecordsResponse(rsp)
}

// PostV2InventoryPreloadRecordsDeleteAllWithResponse request returning *PostV2InventoryPreloadRecordsDeleteAllResponse
func (c *ClientWithResponses) PostV2InventoryPreloadRecordsDeleteAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV2InventoryPreloadRecordsDeleteAllResponse, error) {
	rsp, err := c.PostV2InventoryPreloadRecordsDeleteAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2InventoryPreloadRecordsDeleteAllResponse(rsp)
}

// DeleteV2InventoryPreloadRecordsIdWithResponse request returning *DeleteV2InventoryPreloadRecordsIdResponse
func (c *ClientWithResponses) DeleteV2InventoryPreloadRecordsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV2InventoryPreloadRecordsIdResponse, error) {
	rsp, err := c.DeleteV2InventoryPreloadRecordsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2InventoryPreloadRecordsIdResponse(rsp)
}

// GetV2InventoryPreloadRecordsIdWithResponse request returning *GetV2InventoryPreloadRecordsIdResponse
func (c *ClientWithResponses) GetV2InventoryPreloadRecordsIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2InventoryPreloadRecordsIdResponse, error) {
	rsp, err := c.GetV2InventoryPreloadRecordsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2InventoryPreloadRecordsIdResponse(rsp)
}

// PutV2InventoryPreloadRecordsIdWithBodyWithResponse request with arbitrary body returning *PutV2InventoryPreloadRecordsIdResponse
func (c *ClientWithResponses) PutV2InventoryPreloadRecordsIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2InventoryPreloadRecordsIdResponse, error) {
	rsp, err := c.PutV2InventoryPreloadRecordsIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2InventoryPreloadRecordsIdResponse(rsp)
}

func (c *ClientWithResponses) PutV2InventoryPreloadRecordsIdWithResponse(ctx context.Context, id string, body PutV2InventoryPreloadRecordsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2InventoryPreloadRecordsIdResponse, error) {
	rsp, err := c.PutV2InventoryPreloadRecordsId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2InventoryPreloadRecordsIdResponse(rsp)
}

// GetV2JamfPackageWithResponse request returning *GetV2JamfPackageResponse
func (c *ClientWithResponses) GetV2JamfPackageWithResponse(ctx context.Context, params *GetV2JamfPackageParams, reqEditors ...RequestEditorFn) (*GetV2JamfPackageResponse, error) {
	rsp, err := c.GetV2JamfPackage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2JamfPackageResponse(rsp)
}

// GetV2JamfProInformationWithResponse request returning *GetV2JamfProInformationResponse
func (c *ClientWithResponses) GetV2JamfProInformationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2JamfProInformationResponse, error) {
	rsp, err := c.GetV2JamfProInformation(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2JamfProInformationResponse(rsp)
}

// GetV2MobileDevicePrestagesWithResponse request returning *GetV2MobileDevicePrestagesResponse
func (c *ClientWithResponses) GetV2MobileDevicePrestagesWithResponse(ctx context.Context, params *GetV2MobileDevicePrestagesParams, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesResponse, error) {
	rsp, err := c.GetV2MobileDevicePrestages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MobileDevicePrestagesResponse(rsp)
}

// PostV2MobileDevicePrestagesWithBodyWithResponse request with arbitrary body returning *PostV2MobileDevicePrestagesResponse
func (c *ClientWithResponses) PostV2MobileDevicePrestagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesResponse, error) {
	rsp, err := c.PostV2MobileDevicePrestagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2MobileDevicePrestagesResponse(rsp)
}

func (c *ClientWithResponses) PostV2MobileDevicePrestagesWithResponse(ctx context.Context, body PostV2MobileDevicePrestagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesResponse, error) {
	rsp, err := c.PostV2MobileDevicePrestages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2MobileDevicePrestagesResponse(rsp)
}

// GetV2MobileDevicePrestagesScopeWithResponse request returning *GetV2MobileDevicePrestagesScopeResponse
func (c *ClientWithResponses) GetV2MobileDevicePrestagesScopeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesScopeResponse, error) {
	rsp, err := c.GetV2MobileDevicePrestagesScope(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MobileDevicePrestagesScopeResponse(rsp)
}

// GetV2MobileDevicePrestagesSyncsWithResponse request returning *GetV2MobileDevicePrestagesSyncsResponse
func (c *ClientWithResponses) GetV2MobileDevicePrestagesSyncsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesSyncsResponse, error) {
	rsp, err := c.GetV2MobileDevicePrestagesSyncs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MobileDevicePrestagesSyncsResponse(rsp)
}

// DeleteV2MobileDevicePrestagesIdWithResponse request returning *DeleteV2MobileDevicePrestagesIdResponse
func (c *ClientWithResponses) DeleteV2MobileDevicePrestagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV2MobileDevicePrestagesIdResponse, error) {
	rsp, err := c.DeleteV2MobileDevicePrestagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2MobileDevicePrestagesIdResponse(rsp)
}

// GetV2MobileDevicePrestagesIdWithResponse request returning *GetV2MobileDevicePrestagesIdResponse
func (c *ClientWithResponses) GetV2MobileDevicePrestagesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesIdResponse, error) {
	rsp, err := c.GetV2MobileDevicePrestagesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MobileDevicePrestagesIdResponse(rsp)
}

// PutV2MobileDevicePrestagesIdWithBodyWithResponse request with arbitrary body returning *PutV2MobileDevicePrestagesIdResponse
func (c *ClientWithResponses) PutV2MobileDevicePrestagesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2MobileDevicePrestagesIdResponse, error) {
	rsp, err := c.PutV2MobileDevicePrestagesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2MobileDevicePrestagesIdResponse(rsp)
}

func (c *ClientWithResponses) PutV2MobileDevicePrestagesIdWithResponse(ctx context.Context, id string, body PutV2MobileDevicePrestagesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2MobileDevicePrestagesIdResponse, error) {
	rsp, err := c.PutV2MobileDevicePrestagesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2MobileDevicePrestagesIdResponse(rsp)
}

// GetV2MobileDevicePrestagesIdAttachmentsWithResponse request returning *GetV2MobileDevicePrestagesIdAttachmentsResponse
func (c *ClientWithResponses) GetV2MobileDevicePrestagesIdAttachmentsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesIdAttachmentsResponse, error) {
	rsp, err := c.GetV2MobileDevicePrestagesIdAttachments(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MobileDevicePrestagesIdAttachmentsResponse(rsp)
}

// PostV2MobileDevicePrestagesIdAttachmentsWithBodyWithResponse request with arbitrary body returning *PostV2MobileDevicePrestagesIdAttachmentsResponse
func (c *ClientWithResponses) PostV2MobileDevicePrestagesIdAttachmentsWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdAttachmentsResponse, error) {
	rsp, err := c.PostV2MobileDevicePrestagesIdAttachmentsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2MobileDevicePrestagesIdAttachmentsResponse(rsp)
}

// PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleWithBodyWithResponse request with arbitrary body returning *PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleResponse
func (c *ClientWithResponses) PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleResponse, error) {
	rsp, err := c.PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleResponse(rsp)
}

func (c *ClientWithResponses) PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleWithResponse(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleResponse, error) {
	rsp, err := c.PostV2MobileDevicePrestagesIdAttachmentsDeleteMultiple(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleResponse(rsp)
}

// GetV2MobileDevicePrestagesIdHistoryWithResponse request returning *GetV2MobileDevicePrestagesIdHistoryResponse
func (c *ClientWithResponses) GetV2MobileDevicePrestagesIdHistoryWithResponse(ctx context.Context, id string, params *GetV2MobileDevicePrestagesIdHistoryParams, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesIdHistoryResponse, error) {
	rsp, err := c.GetV2MobileDevicePrestagesIdHistory(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MobileDevicePrestagesIdHistoryResponse(rsp)
}

// PostV2MobileDevicePrestagesIdHistoryWithBodyWithResponse request with arbitrary body returning *PostV2MobileDevicePrestagesIdHistoryResponse
func (c *ClientWithResponses) PostV2MobileDevicePrestagesIdHistoryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdHistoryResponse, error) {
	rsp, err := c.PostV2MobileDevicePrestagesIdHistoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2MobileDevicePrestagesIdHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV2MobileDevicePrestagesIdHistoryWithResponse(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdHistoryResponse, error) {
	rsp, err := c.PostV2MobileDevicePrestagesIdHistory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2MobileDevicePrestagesIdHistoryResponse(rsp)
}

// GetV2MobileDevicePrestagesIdScopeWithResponse request returning *GetV2MobileDevicePrestagesIdScopeResponse
func (c *ClientWithResponses) GetV2MobileDevicePrestagesIdScopeWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesIdScopeResponse, error) {
	rsp, err := c.GetV2MobileDevicePrestagesIdScope(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MobileDevicePrestagesIdScopeResponse(rsp)
}

// PostV2MobileDevicePrestagesIdScopeWithBodyWithResponse request with arbitrary body returning *PostV2MobileDevicePrestagesIdScopeResponse
func (c *ClientWithResponses) PostV2MobileDevicePrestagesIdScopeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdScopeResponse, error) {
	rsp, err := c.PostV2MobileDevicePrestagesIdScopeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2MobileDevicePrestagesIdScopeResponse(rsp)
}

func (c *ClientWithResponses) PostV2MobileDevicePrestagesIdScopeWithResponse(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdScopeResponse, error) {
	rsp, err := c.PostV2MobileDevicePrestagesIdScope(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2MobileDevicePrestagesIdScopeResponse(rsp)
}

// PutV2MobileDevicePrestagesIdScopeWithBodyWithResponse request with arbitrary body returning *PutV2MobileDevicePrestagesIdScopeResponse
func (c *ClientWithResponses) PutV2MobileDevicePrestagesIdScopeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2MobileDevicePrestagesIdScopeResponse, error) {
	rsp, err := c.PutV2MobileDevicePrestagesIdScopeWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2MobileDevicePrestagesIdScopeResponse(rsp)
}

func (c *ClientWithResponses) PutV2MobileDevicePrestagesIdScopeWithResponse(ctx context.Context, id string, body PutV2MobileDevicePrestagesIdScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2MobileDevicePrestagesIdScopeResponse, error) {
	rsp, err := c.PutV2MobileDevicePrestagesIdScope(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2MobileDevicePrestagesIdScopeResponse(rsp)
}

// PostV2MobileDevicePrestagesIdScopeDeleteMultipleWithBodyWithResponse request with arbitrary body returning *PostV2MobileDevicePrestagesIdScopeDeleteMultipleResponse
func (c *ClientWithResponses) PostV2MobileDevicePrestagesIdScopeDeleteMultipleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdScopeDeleteMultipleResponse, error) {
	rsp, err := c.PostV2MobileDevicePrestagesIdScopeDeleteMultipleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2MobileDevicePrestagesIdScopeDeleteMultipleResponse(rsp)
}

func (c *ClientWithResponses) PostV2MobileDevicePrestagesIdScopeDeleteMultipleWithResponse(ctx context.Context, id string, body PostV2MobileDevicePrestagesIdScopeDeleteMultipleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2MobileDevicePrestagesIdScopeDeleteMultipleResponse, error) {
	rsp, err := c.PostV2MobileDevicePrestagesIdScopeDeleteMultiple(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2MobileDevicePrestagesIdScopeDeleteMultipleResponse(rsp)
}

// GetV2MobileDevicePrestagesIdSyncsWithResponse request returning *GetV2MobileDevicePrestagesIdSyncsResponse
func (c *ClientWithResponses) GetV2MobileDevicePrestagesIdSyncsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesIdSyncsResponse, error) {
	rsp, err := c.GetV2MobileDevicePrestagesIdSyncs(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MobileDevicePrestagesIdSyncsResponse(rsp)
}

// GetV2MobileDevicePrestagesIdSyncsLatestWithResponse request returning *GetV2MobileDevicePrestagesIdSyncsLatestResponse
func (c *ClientWithResponses) GetV2MobileDevicePrestagesIdSyncsLatestWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2MobileDevicePrestagesIdSyncsLatestResponse, error) {
	rsp, err := c.GetV2MobileDevicePrestagesIdSyncsLatest(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MobileDevicePrestagesIdSyncsLatestResponse(rsp)
}

// GetV2MobileDevicesWithResponse request returning *GetV2MobileDevicesResponse
func (c *ClientWithResponses) GetV2MobileDevicesWithResponse(ctx context.Context, params *GetV2MobileDevicesParams, reqEditors ...RequestEditorFn) (*GetV2MobileDevicesResponse, error) {
	rsp, err := c.GetV2MobileDevices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MobileDevicesResponse(rsp)
}

// GetV2MobileDevicesIdWithResponse request returning *GetV2MobileDevicesIdResponse
func (c *ClientWithResponses) GetV2MobileDevicesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2MobileDevicesIdResponse, error) {
	rsp, err := c.GetV2MobileDevicesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MobileDevicesIdResponse(rsp)
}

// PatchV2MobileDevicesIdWithBodyWithResponse request with arbitrary body returning *PatchV2MobileDevicesIdResponse
func (c *ClientWithResponses) PatchV2MobileDevicesIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchV2MobileDevicesIdResponse, error) {
	rsp, err := c.PatchV2MobileDevicesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2MobileDevicesIdResponse(rsp)
}

func (c *ClientWithResponses) PatchV2MobileDevicesIdWithResponse(ctx context.Context, id string, body PatchV2MobileDevicesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchV2MobileDevicesIdResponse, error) {
	rsp, err := c.PatchV2MobileDevicesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchV2MobileDevicesIdResponse(rsp)
}

// GetV2MobileDevicesIdDetailWithResponse request returning *GetV2MobileDevicesIdDetailResponse
func (c *ClientWithResponses) GetV2MobileDevicesIdDetailWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV2MobileDevicesIdDetailResponse, error) {
	rsp, err := c.GetV2MobileDevicesIdDetail(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2MobileDevicesIdDetailResponse(rsp)
}

// DeleteV2SsoCertWithResponse request returning *DeleteV2SsoCertResponse
func (c *ClientWithResponses) DeleteV2SsoCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteV2SsoCertResponse, error) {
	rsp, err := c.DeleteV2SsoCert(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV2SsoCertResponse(rsp)
}

// GetV2SsoCertWithResponse request returning *GetV2SsoCertResponse
func (c *ClientWithResponses) GetV2SsoCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2SsoCertResponse, error) {
	rsp, err := c.GetV2SsoCert(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SsoCertResponse(rsp)
}

// PostV2SsoCertWithResponse request returning *PostV2SsoCertResponse
func (c *ClientWithResponses) PostV2SsoCertWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostV2SsoCertResponse, error) {
	rsp, err := c.PostV2SsoCert(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2SsoCertResponse(rsp)
}

// PutV2SsoCertWithBodyWithResponse request with arbitrary body returning *PutV2SsoCertResponse
func (c *ClientWithResponses) PutV2SsoCertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV2SsoCertResponse, error) {
	rsp, err := c.PutV2SsoCertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2SsoCertResponse(rsp)
}

func (c *ClientWithResponses) PutV2SsoCertWithResponse(ctx context.Context, body PutV2SsoCertJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV2SsoCertResponse, error) {
	rsp, err := c.PutV2SsoCert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV2SsoCertResponse(rsp)
}

// GetV2SsoCertDownloadWithResponse request returning *GetV2SsoCertDownloadResponse
func (c *ClientWithResponses) GetV2SsoCertDownloadWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV2SsoCertDownloadResponse, error) {
	rsp, err := c.GetV2SsoCertDownload(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2SsoCertDownloadResponse(rsp)
}

// PostV2SsoCertParseWithBodyWithResponse request with arbitrary body returning *PostV2SsoCertParseResponse
func (c *ClientWithResponses) PostV2SsoCertParseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV2SsoCertParseResponse, error) {
	rsp, err := c.PostV2SsoCertParseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2SsoCertParseResponse(rsp)
}

func (c *ClientWithResponses) PostV2SsoCertParseWithResponse(ctx context.Context, body PostV2SsoCertParseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV2SsoCertParseResponse, error) {
	rsp, err := c.PostV2SsoCertParse(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV2SsoCertParseResponse(rsp)
}

// GetV3CheckInWithResponse request returning *GetV3CheckInResponse
func (c *ClientWithResponses) GetV3CheckInWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV3CheckInResponse, error) {
	rsp, err := c.GetV3CheckIn(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3CheckInResponse(rsp)
}

// PutV3CheckInWithBodyWithResponse request with arbitrary body returning *PutV3CheckInResponse
func (c *ClientWithResponses) PutV3CheckInWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV3CheckInResponse, error) {
	rsp, err := c.PutV3CheckInWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV3CheckInResponse(rsp)
}

func (c *ClientWithResponses) PutV3CheckInWithResponse(ctx context.Context, body PutV3CheckInJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV3CheckInResponse, error) {
	rsp, err := c.PutV3CheckIn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV3CheckInResponse(rsp)
}

// GetV3CheckInHistoryWithResponse request returning *GetV3CheckInHistoryResponse
func (c *ClientWithResponses) GetV3CheckInHistoryWithResponse(ctx context.Context, params *GetV3CheckInHistoryParams, reqEditors ...RequestEditorFn) (*GetV3CheckInHistoryResponse, error) {
	rsp, err := c.GetV3CheckInHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV3CheckInHistoryResponse(rsp)
}

// PostV3CheckInHistoryWithBodyWithResponse request with arbitrary body returning *PostV3CheckInHistoryResponse
func (c *ClientWithResponses) PostV3CheckInHistoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV3CheckInHistoryResponse, error) {
	rsp, err := c.PostV3CheckInHistoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3CheckInHistoryResponse(rsp)
}

func (c *ClientWithResponses) PostV3CheckInHistoryWithResponse(ctx context.Context, body PostV3CheckInHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV3CheckInHistoryResponse, error) {
	rsp, err := c.PostV3CheckInHistory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV3CheckInHistoryResponse(rsp)
}

// GetVppAdminAccountsWithResponse request returning *GetVppAdminAccountsResponse
func (c *ClientWithResponses) GetVppAdminAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVppAdminAccountsResponse, error) {
	rsp, err := c.GetVppAdminAccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVppAdminAccountsResponse(rsp)
}

// GetVppSubscriptionsWithResponse request returning *GetVppSubscriptionsResponse
func (c *ClientWithResponses) GetVppSubscriptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVppSubscriptionsResponse, error) {
	rsp, err := c.GetVppSubscriptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVppSubscriptionsResponse(rsp)
}

// GetVppSubscriptionsIdWithResponse request returning *GetVppSubscriptionsIdResponse
func (c *ClientWithResponses) GetVppSubscriptionsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetVppSubscriptionsIdResponse, error) {
	rsp, err := c.GetVppSubscriptionsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVppSubscriptionsIdResponse(rsp)
}

// ParseGetAuthResponse parses an HTTP response from a GetAuthWithResponse call
func ParseGetAuthResponse(rsp *http.Response) (*GetAuthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Authorization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthCurrentResponse parses an HTTP response from a PostAuthCurrentWithResponse call
func ParsePostAuthCurrentResponse(rsp *http.Response) (*PostAuthCurrentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthCurrentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CurrentAuthorization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthInvalidateTokenResponse parses an HTTP response from a PostAuthInvalidateTokenWithResponse call
func ParsePostAuthInvalidateTokenResponse(rsp *http.Response) (*PostAuthInvalidateTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthInvalidateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAuthKeepAliveResponse parses an HTTP response from a PostAuthKeepAliveWithResponse call
func ParsePostAuthKeepAliveResponse(rsp *http.Response) (*PostAuthKeepAliveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthKeepAliveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthTokensResponse parses an HTTP response from a PostAuthTokensWithResponse call
func ParsePostAuthTokensResponse(rsp *http.Response) (*PostAuthTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDevicesExtensionAttributesResponse parses an HTTP response from a GetDevicesExtensionAttributesWithResponse call
func ParseGetDevicesExtensionAttributesResponse(rsp *http.Response) (*GetDevicesExtensionAttributesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDevicesExtensionAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileDeviceExtensionAttributeResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteInventoryPreloadResponse parses an HTTP response from a DeleteInventoryPreloadWithResponse call
func ParseDeleteInventoryPreloadResponse(rsp *http.Response) (*DeleteInventoryPreloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInventoryPreloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInventoryPreloadResponse parses an HTTP response from a GetInventoryPreloadWithResponse call
func ParseGetInventoryPreloadResponse(rsp *http.Response) (*GetInventoryPreloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInventoryPreloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []InventoryPreloadRecordSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePostInventoryPreloadResponse parses an HTTP response from a PostInventoryPreloadWithResponse call
func ParsePostInventoryPreloadResponse(rsp *http.Response) (*PostInventoryPreloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInventoryPreloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InventoryPreloadRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetInventoryPreloadCsvTemplateResponse parses an HTTP response from a GetInventoryPreloadCsvTemplateWithResponse call
func ParseGetInventoryPreloadCsvTemplateResponse(rsp *http.Response) (*GetInventoryPreloadCsvTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInventoryPreloadCsvTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetInventoryPreloadHistoryResponse parses an HTTP response from a GetInventoryPreloadHistoryWithResponse call
func ParseGetInventoryPreloadHistoryResponse(rsp *http.Response) (*GetInventoryPreloadHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInventoryPreloadHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInventoryPreloadHistoryNotesResponse parses an HTTP response from a PostInventoryPreloadHistoryNotesWithResponse call
func ParsePostInventoryPreloadHistoryNotesResponse(rsp *http.Response) (*PostInventoryPreloadHistoryNotesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInventoryPreloadHistoryNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostInventoryPreloadValidateCsvResponse parses an HTTP response from a PostInventoryPreloadValidateCsvWithResponse call
func ParsePostInventoryPreloadValidateCsvResponse(rsp *http.Response) (*PostInventoryPreloadValidateCsvResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInventoryPreloadValidateCsvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryPreloadCsvValidationSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest InventoryPreloadInvalidCsvResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	}

	return response, nil
}

// ParseDeleteInventoryPreloadIdResponse parses an HTTP response from a DeleteInventoryPreloadIdWithResponse call
func ParseDeleteInventoryPreloadIdResponse(rsp *http.Response) (*DeleteInventoryPreloadIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInventoryPreloadIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetInventoryPreloadIdResponse parses an HTTP response from a GetInventoryPreloadIdWithResponse call
func ParseGetInventoryPreloadIdResponse(rsp *http.Response) (*GetInventoryPreloadIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInventoryPreloadIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryPreloadRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutInventoryPreloadIdResponse parses an HTTP response from a PutInventoryPreloadIdWithResponse call
func ParsePutInventoryPreloadIdResponse(rsp *http.Response) (*PutInventoryPreloadIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInventoryPreloadIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryPreloadRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetLdapGroupsResponse parses an HTTP response from a GetLdapGroupsWithResponse call
func ParseGetLdapGroupsResponse(rsp *http.Response) (*GetLdapGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLdapGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LdapGroupSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLdapServersResponse parses an HTTP response from a GetLdapServersWithResponse call
func ParseGetLdapServersResponse(rsp *http.Response) (*GetLdapServersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLdapServersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LdapServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNotificationsAlertsResponse parses an HTTP response from a GetNotificationsAlertsWithResponse call
func ParseGetNotificationsAlertsResponse(rsp *http.Response) (*GetNotificationsAlertsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotificationsAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Notification
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteNotificationsAlertsIdResponse parses an HTTP response from a DeleteNotificationsAlertsIdWithResponse call
func ParseDeleteNotificationsAlertsIdResponse(rsp *http.Response) (*DeleteNotificationsAlertsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNotificationsAlertsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteNotificationsAlertsTypeIdResponse parses an HTTP response from a DeleteNotificationsAlertsTypeIdWithResponse call
func ParseDeleteNotificationsAlertsTypeIdResponse(rsp *http.Response) (*DeleteNotificationsAlertsTypeIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNotificationsAlertsTypeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPatchDisclaimerAgreeResponse parses an HTTP response from a PostPatchDisclaimerAgreeWithResponse call
func ParsePostPatchDisclaimerAgreeResponse(rsp *http.Response) (*PostPatchDisclaimerAgreeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPatchDisclaimerAgreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPatchObjPolicyIdResponse parses an HTTP response from a GetPatchObjPolicyIdWithResponse call
func ParseGetPatchObjPolicyIdResponse(rsp *http.Response) (*GetPatchObjPolicyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatchObjPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchPolicySummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPatchObjPolicyIdLogsEligibleRetryCountResponse parses an HTTP response from a GetPatchObjPolicyIdLogsEligibleRetryCountWithResponse call
func ParseGetPatchObjPolicyIdLogsEligibleRetryCountResponse(rsp *http.Response) (*GetPatchObjPolicyIdLogsEligibleRetryCountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatchObjPolicyIdLogsEligibleRetryCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegerWrapper
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPatchObjPolicyIdSoftwareTitleConfigurationIdResponse parses an HTTP response from a GetPatchObjPolicyIdSoftwareTitleConfigurationIdWithResponse call
func ParseGetPatchObjPolicyIdSoftwareTitleConfigurationIdResponse(rsp *http.Response) (*GetPatchObjPolicyIdSoftwareTitleConfigurationIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatchObjPolicyIdSoftwareTitleConfigurationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegerWrapper
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPatchObjSoftwareTitleIdPoliciesResponse parses an HTTP response from a GetPatchObjSoftwareTitleIdPoliciesWithResponse call
func ParseGetPatchObjSoftwareTitleIdPoliciesResponse(rsp *http.Response) (*GetPatchObjSoftwareTitleIdPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatchObjSoftwareTitleIdPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SoftwareTitlePatchPolicySummaries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPatchObjSoftwareTitleConfigurationIdResponse parses an HTTP response from a GetPatchObjSoftwareTitleConfigurationIdWithResponse call
func ParseGetPatchObjSoftwareTitleConfigurationIdResponse(rsp *http.Response) (*GetPatchObjSoftwareTitleConfigurationIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatchObjSoftwareTitleConfigurationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SoftwareTitleConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPatchObjIdResponse parses an HTTP response from a GetPatchObjIdWithResponse call
func ParseGetPatchObjIdResponse(rsp *http.Response) (*GetPatchObjIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatchObjIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActivePatchSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPatchObjIdResponse parses an HTTP response from a PutPatchObjIdWithResponse call
func ParsePutPatchObjIdResponse(rsp *http.Response) (*PutPatchObjIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPatchObjIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActivePatchSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPatchObjIdVersionsResponse parses an HTTP response from a GetPatchObjIdVersionsWithResponse call
func ParseGetPatchObjIdVersionsResponse(rsp *http.Response) (*GetPatchObjIdVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatchObjIdVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PatchVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPatchObjsPolicyIdResponse parses an HTTP response from a GetPatchObjsPolicyIdWithResponse call
func ParseGetPatchObjsPolicyIdResponse(rsp *http.Response) (*GetPatchObjsPolicyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatchObjsPolicyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchPolicySummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPatchOnDashboardResponse parses an HTTP response from a GetPatchOnDashboardWithResponse call
func ParseGetPatchOnDashboardResponse(rsp *http.Response) (*GetPatchOnDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatchOnDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchIdsOnDashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPatchPatchPoliciesResponse parses an HTTP response from a GetPatchPatchPoliciesWithResponse call
func ParseGetPatchPatchPoliciesResponse(rsp *http.Response) (*GetPatchPatchPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatchPatchPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PatchPolicySummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePatchPatchPoliciesIdDashboardResponse parses an HTTP response from a DeletePatchPatchPoliciesIdDashboardWithResponse call
func ParseDeletePatchPatchPoliciesIdDashboardResponse(rsp *http.Response) (*DeletePatchPatchPoliciesIdDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePatchPatchPoliciesIdDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPatchPatchPoliciesIdDashboardResponse parses an HTTP response from a GetPatchPatchPoliciesIdDashboardWithResponse call
func ParseGetPatchPatchPoliciesIdDashboardResponse(rsp *http.Response) (*GetPatchPatchPoliciesIdDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatchPatchPoliciesIdDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchPolicyOnDashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostPatchPatchPoliciesIdDashboardResponse parses an HTTP response from a PostPatchPatchPoliciesIdDashboardWithResponse call
func ParsePostPatchPatchPoliciesIdDashboardResponse(rsp *http.Response) (*PostPatchPatchPoliciesIdDashboardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPatchPatchPoliciesIdDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPatchPatchPoliciesIdLogsResponse parses an HTTP response from a GetPatchPatchPoliciesIdLogsWithResponse call
func ParseGetPatchPatchPoliciesIdLogsResponse(rsp *http.Response) (*GetPatchPatchPoliciesIdLogsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatchPatchPoliciesIdLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PatchPolicyAttempt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPatchRetryPolicyResponse parses an HTTP response from a PostPatchRetryPolicyWithResponse call
func ParsePostPatchRetryPolicyResponse(rsp *http.Response) (*PostPatchRetryPolicyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPatchRetryPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPatchSearchActivePatchHistoryResponse parses an HTTP response from a PostPatchSearchActivePatchHistoryWithResponse call
func ParsePostPatchSearchActivePatchHistoryResponse(rsp *http.Response) (*PostPatchSearchActivePatchHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPatchSearchActivePatchHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActivePatchHistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPatchSearchPatchPolicyLogsResponse parses an HTTP response from a PostPatchSearchPatchPolicyLogsWithResponse call
func ParsePostPatchSearchPatchPolicyLogsResponse(rsp *http.Response) (*PostPatchSearchPatchPolicyLogsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPatchSearchPatchPolicyLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatchPolicyLogSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPatchSvcDisclaimerAgreeResponse parses an HTTP response from a PostPatchSvcDisclaimerAgreeWithResponse call
func ParsePostPatchSvcDisclaimerAgreeResponse(rsp *http.Response) (*PostPatchSvcDisclaimerAgreeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPatchSvcDisclaimerAgreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPatchSvcRetryPolicyResponse parses an HTTP response from a PostPatchSvcRetryPolicyWithResponse call
func ParsePostPatchSvcRetryPolicyResponse(rsp *http.Response) (*PostPatchSvcRetryPolicyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPatchSvcRetryPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPatchIdResponse parses an HTTP response from a GetPatchIdWithResponse call
func ParseGetPatchIdResponse(rsp *http.Response) (*GetPatchIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatchIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActivePatchSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPatchIdResponse parses an HTTP response from a PutPatchIdWithResponse call
func ParsePutPatchIdResponse(rsp *http.Response) (*PutPatchIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPatchIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActivePatchSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPatchIdVersionsResponse parses an HTTP response from a GetPatchIdVersionsWithResponse call
func ParseGetPatchIdVersionsResponse(rsp *http.Response) (*GetPatchIdVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPatchIdVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PatchVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPreviewComputersResponse parses an HTTP response from a GetPreviewComputersWithResponse call
func ParseGetPreviewComputersResponse(rsp *http.Response) (*GetPreviewComputersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewComputersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputersSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPreviewEnrollmentAccessGroupsResponse parses an HTTP response from a GetPreviewEnrollmentAccessGroupsWithResponse call
func ParseGetPreviewEnrollmentAccessGroupsResponse(rsp *http.Response) (*GetPreviewEnrollmentAccessGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewEnrollmentAccessGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessGroupsPreviewSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPreviewEnrollmentAccessGroupsResponse parses an HTTP response from a PostPreviewEnrollmentAccessGroupsWithResponse call
func ParsePostPreviewEnrollmentAccessGroupsResponse(rsp *http.Response) (*PostPreviewEnrollmentAccessGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPreviewEnrollmentAccessGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeletePreviewEnrollmentAccessGroupsIdResponse parses an HTTP response from a DeletePreviewEnrollmentAccessGroupsIdWithResponse call
func ParseDeletePreviewEnrollmentAccessGroupsIdResponse(rsp *http.Response) (*DeletePreviewEnrollmentAccessGroupsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePreviewEnrollmentAccessGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPreviewEnrollmentAccessGroupsIdResponse parses an HTTP response from a GetPreviewEnrollmentAccessGroupsIdWithResponse call
func ParseGetPreviewEnrollmentAccessGroupsIdResponse(rsp *http.Response) (*GetPreviewEnrollmentAccessGroupsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewEnrollmentAccessGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentAccessGroupPreview
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutPreviewEnrollmentAccessGroupsIdResponse parses an HTTP response from a PutPreviewEnrollmentAccessGroupsIdWithResponse call
func ParsePutPreviewEnrollmentAccessGroupsIdResponse(rsp *http.Response) (*PutPreviewEnrollmentAccessGroupsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPreviewEnrollmentAccessGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentAccessGroupPreview
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostPreviewMdmCommandsResponse parses an HTTP response from a PostPreviewMdmCommandsWithResponse call
func ParsePostPreviewMdmCommandsResponse(rsp *http.Response) (*PostPreviewMdmCommandsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPreviewMdmCommandsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPreviewRemoteAdministrationConfigurationsResponse parses an HTTP response from a GetPreviewRemoteAdministrationConfigurationsWithResponse call
func ParseGetPreviewRemoteAdministrationConfigurationsResponse(rsp *http.Response) (*GetPreviewRemoteAdministrationConfigurationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewRemoteAdministrationConfigurationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RemoteAdministrationSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostPreviewRemoteAdministrationConfigurationsTeamViewerResponse parses an HTTP response from a PostPreviewRemoteAdministrationConfigurationsTeamViewerWithResponse call
func ParsePostPreviewRemoteAdministrationConfigurationsTeamViewerResponse(rsp *http.Response) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPreviewRemoteAdministrationConfigurationsTeamViewerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse parses an HTTP response from a GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsWithResponse call
func ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse(rsp *http.Response) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionDetailsSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse parses an HTTP response from a PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsWithResponse call
func ParsePostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse(rsp *http.Response) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResponse parses an HTTP response from a GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdWithResponse call
func ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResponse(rsp *http.Response) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseResponse parses an HTTP response from a PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseWithResponse call
func ParsePostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseResponse(rsp *http.Response) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdCloseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationResponse parses an HTTP response from a PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationWithResponse call
func ParsePostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationResponse(rsp *http.Response) (*PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdResendNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusResponse parses an HTTP response from a GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusWithResponse call
func ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusResponse(rsp *http.Response) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewRemoteAdministrationConfigurationsTeamViewerConfigurationIdSessionsSessionIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SessionStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeletePreviewRemoteAdministrationConfigurationsTeamViewerIdResponse parses an HTTP response from a DeletePreviewRemoteAdministrationConfigurationsTeamViewerIdWithResponse call
func ParseDeletePreviewRemoteAdministrationConfigurationsTeamViewerIdResponse(rsp *http.Response) (*DeletePreviewRemoteAdministrationConfigurationsTeamViewerIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePreviewRemoteAdministrationConfigurationsTeamViewerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse parses an HTTP response from a GetPreviewRemoteAdministrationConfigurationsTeamViewerIdWithResponse call
func ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse(rsp *http.Response) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionConfigurationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse parses an HTTP response from a PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdWithResponse call
func ParsePatchPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse(rsp *http.Response) (*PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPreviewRemoteAdministrationConfigurationsTeamViewerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionConfigurationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusResponse parses an HTTP response from a GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusWithResponse call
func ParseGetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusResponse(rsp *http.Response) (*GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewRemoteAdministrationConfigurationsTeamViewerIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionConfigurationStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSelfServiceBrandingImagesResponse parses an HTTP response from a PostSelfServiceBrandingImagesWithResponse call
func ParsePostSelfServiceBrandingImagesResponse(rsp *http.Response) (*PostSelfServiceBrandingImagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSelfServiceBrandingImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BrandingImageUrl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostSettingsIssueTomcatSslCertificateResponse parses an HTTP response from a PostSettingsIssueTomcatSslCertificateWithResponse call
func ParsePostSettingsIssueTomcatSslCertificateResponse(rsp *http.Response) (*PostSettingsIssueTomcatSslCertificateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSettingsIssueTomcatSslCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSettingsObjPolicyPropertiesResponse parses an HTTP response from a GetSettingsObjPolicyPropertiesWithResponse call
func ParseGetSettingsObjPolicyPropertiesResponse(rsp *http.Response) (*GetSettingsObjPolicyPropertiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsObjPolicyPropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyProperties
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSettingsObjPolicyPropertiesResponse parses an HTTP response from a PutSettingsObjPolicyPropertiesWithResponse call
func ParsePutSettingsObjPolicyPropertiesResponse(rsp *http.Response) (*PutSettingsObjPolicyPropertiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSettingsObjPolicyPropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PolicyProperties
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetSettingsSitesResponse parses an HTTP response from a GetSettingsSitesWithResponse call
func ParseGetSettingsSitesResponse(rsp *http.Response) (*GetSettingsSitesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettingsSitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStartupStatusResponse parses an HTTP response from a GetStartupStatusWithResponse call
func ParseGetStartupStatusResponse(rsp *http.Response) (*GetStartupStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStartupStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StartupStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSystemInitializeResponse parses an HTTP response from a PostSystemInitializeWithResponse call
func ParsePostSystemInitializeResponse(rsp *http.Response) (*PostSystemInitializeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSystemInitializeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostSystemInitializeDatabaseConnectionResponse parses an HTTP response from a PostSystemInitializeDatabaseConnectionWithResponse call
func ParsePostSystemInitializeDatabaseConnectionResponse(rsp *http.Response) (*PostSystemInitializeDatabaseConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSystemInitializeDatabaseConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserObjPreferenceKeyResponse parses an HTTP response from a DeleteUserObjPreferenceKeyWithResponse call
func ParseDeleteUserObjPreferenceKeyResponse(rsp *http.Response) (*DeleteUserObjPreferenceKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserObjPreferenceKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserObjPreferenceKeyResponse parses an HTTP response from a GetUserObjPreferenceKeyWithResponse call
func ParseGetUserObjPreferenceKeyResponse(rsp *http.Response) (*GetUserObjPreferenceKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserObjPreferenceKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPreferencesJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutUserObjPreferenceKeyResponse parses an HTTP response from a PutUserObjPreferenceKeyWithResponse call
func ParsePutUserObjPreferenceKeyResponse(rsp *http.Response) (*PutUserObjPreferenceKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserObjPreferenceKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPreferencesJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserUpdateSessionResponse parses an HTTP response from a PostUserUpdateSessionWithResponse call
func ParsePostUserUpdateSessionResponse(rsp *http.Response) (*PostUserUpdateSessionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserUpdateSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Session
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1AdueSessionTokenSettingsResponse parses an HTTP response from a GetV1AdueSessionTokenSettingsWithResponse call
func ParseGetV1AdueSessionTokenSettingsResponse(rsp *http.Response) (*GetV1AdueSessionTokenSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AdueSessionTokenSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountDrivenUserEnrollmentSessionTokenSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1AdueSessionTokenSettingsResponse parses an HTTP response from a PutV1AdueSessionTokenSettingsWithResponse call
func ParsePutV1AdueSessionTokenSettingsResponse(rsp *http.Response) (*PutV1AdueSessionTokenSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1AdueSessionTokenSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountDrivenUserEnrollmentSessionTokenSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1AdvancedMobileDeviceSearchesResponse parses an HTTP response from a GetV1AdvancedMobileDeviceSearchesWithResponse call
func ParseGetV1AdvancedMobileDeviceSearchesResponse(rsp *http.Response) (*GetV1AdvancedMobileDeviceSearchesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AdvancedMobileDeviceSearchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdvancedSearchSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1AdvancedMobileDeviceSearchesResponse parses an HTTP response from a PostV1AdvancedMobileDeviceSearchesWithResponse call
func ParsePostV1AdvancedMobileDeviceSearchesResponse(rsp *http.Response) (*PostV1AdvancedMobileDeviceSearchesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AdvancedMobileDeviceSearchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetV1AdvancedMobileDeviceSearchesChoicesResponse parses an HTTP response from a GetV1AdvancedMobileDeviceSearchesChoicesWithResponse call
func ParseGetV1AdvancedMobileDeviceSearchesChoicesResponse(rsp *http.Response) (*GetV1AdvancedMobileDeviceSearchesChoicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AdvancedMobileDeviceSearchesChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdvancedSearchCriteriaChoices
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1AdvancedMobileDeviceSearchesDeleteMultipleResponse parses an HTTP response from a PostV1AdvancedMobileDeviceSearchesDeleteMultipleWithResponse call
func ParsePostV1AdvancedMobileDeviceSearchesDeleteMultipleResponse(rsp *http.Response) (*PostV1AdvancedMobileDeviceSearchesDeleteMultipleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AdvancedMobileDeviceSearchesDeleteMultipleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV1AdvancedMobileDeviceSearchesIdResponse parses an HTTP response from a DeleteV1AdvancedMobileDeviceSearchesIdWithResponse call
func ParseDeleteV1AdvancedMobileDeviceSearchesIdResponse(rsp *http.Response) (*DeleteV1AdvancedMobileDeviceSearchesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1AdvancedMobileDeviceSearchesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1AdvancedMobileDeviceSearchesIdResponse parses an HTTP response from a GetV1AdvancedMobileDeviceSearchesIdWithResponse call
func ParseGetV1AdvancedMobileDeviceSearchesIdResponse(rsp *http.Response) (*GetV1AdvancedMobileDeviceSearchesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AdvancedMobileDeviceSearchesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdvancedSearch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1AdvancedMobileDeviceSearchesIdResponse parses an HTTP response from a PutV1AdvancedMobileDeviceSearchesIdWithResponse call
func ParsePutV1AdvancedMobileDeviceSearchesIdResponse(rsp *http.Response) (*PutV1AdvancedMobileDeviceSearchesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1AdvancedMobileDeviceSearchesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdvancedSearch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1AdvancedUserContentSearchesResponse parses an HTTP response from a GetV1AdvancedUserContentSearchesWithResponse call
func ParseGetV1AdvancedUserContentSearchesResponse(rsp *http.Response) (*GetV1AdvancedUserContentSearchesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AdvancedUserContentSearchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdvancedUserContentSearchSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1AdvancedUserContentSearchesResponse parses an HTTP response from a PostV1AdvancedUserContentSearchesWithResponse call
func ParsePostV1AdvancedUserContentSearchesResponse(rsp *http.Response) (*PostV1AdvancedUserContentSearchesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AdvancedUserContentSearchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV1AdvancedUserContentSearchesIdResponse parses an HTTP response from a DeleteV1AdvancedUserContentSearchesIdWithResponse call
func ParseDeleteV1AdvancedUserContentSearchesIdResponse(rsp *http.Response) (*DeleteV1AdvancedUserContentSearchesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1AdvancedUserContentSearchesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1AdvancedUserContentSearchesIdResponse parses an HTTP response from a GetV1AdvancedUserContentSearchesIdWithResponse call
func ParseGetV1AdvancedUserContentSearchesIdResponse(rsp *http.Response) (*GetV1AdvancedUserContentSearchesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AdvancedUserContentSearchesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdvancedUserContentSearch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1AdvancedUserContentSearchesIdResponse parses an HTTP response from a PutV1AdvancedUserContentSearchesIdWithResponse call
func ParsePutV1AdvancedUserContentSearchesIdResponse(rsp *http.Response) (*PutV1AdvancedUserContentSearchesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1AdvancedUserContentSearchesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdvancedUserContentSearch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1AppDynamicsScriptConfigurationResponse parses an HTTP response from a GetV1AppDynamicsScriptConfigurationWithResponse call
func ParseGetV1AppDynamicsScriptConfigurationResponse(rsp *http.Response) (*GetV1AppDynamicsScriptConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AppDynamicsScriptConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppDynamicsConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1AppRequestFormInputFieldsResponse parses an HTTP response from a GetV1AppRequestFormInputFieldsWithResponse call
func ParseGetV1AppRequestFormInputFieldsResponse(rsp *http.Response) (*GetV1AppRequestFormInputFieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AppRequestFormInputFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppRequestFormInputFieldSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1AppRequestFormInputFieldsResponse parses an HTTP response from a PostV1AppRequestFormInputFieldsWithResponse call
func ParsePostV1AppRequestFormInputFieldsResponse(rsp *http.Response) (*PostV1AppRequestFormInputFieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AppRequestFormInputFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppRequestFormInputField
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePutV1AppRequestFormInputFieldsResponse parses an HTTP response from a PutV1AppRequestFormInputFieldsWithResponse call
func ParsePutV1AppRequestFormInputFieldsResponse(rsp *http.Response) (*PutV1AppRequestFormInputFieldsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1AppRequestFormInputFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AppRequestFormInputField
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteV1AppRequestFormInputFieldsIdResponse parses an HTTP response from a DeleteV1AppRequestFormInputFieldsIdWithResponse call
func ParseDeleteV1AppRequestFormInputFieldsIdResponse(rsp *http.Response) (*DeleteV1AppRequestFormInputFieldsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1AppRequestFormInputFieldsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1AppRequestFormInputFieldsIdResponse parses an HTTP response from a GetV1AppRequestFormInputFieldsIdWithResponse call
func ParseGetV1AppRequestFormInputFieldsIdResponse(rsp *http.Response) (*GetV1AppRequestFormInputFieldsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AppRequestFormInputFieldsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppRequestFormInputField
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1AppRequestFormInputFieldsIdResponse parses an HTTP response from a PutV1AppRequestFormInputFieldsIdWithResponse call
func ParsePutV1AppRequestFormInputFieldsIdResponse(rsp *http.Response) (*PutV1AppRequestFormInputFieldsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1AppRequestFormInputFieldsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppRequestFormInputField
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1AppRequestSettingsResponse parses an HTTP response from a GetV1AppRequestSettingsWithResponse call
func ParseGetV1AppRequestSettingsResponse(rsp *http.Response) (*GetV1AppRequestSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AppRequestSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppRequestSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1AppRequestSettingsResponse parses an HTTP response from a PutV1AppRequestSettingsWithResponse call
func ParsePutV1AppRequestSettingsResponse(rsp *http.Response) (*PutV1AppRequestSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1AppRequestSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppRequestSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1AppStoreCountryCodesResponse parses an HTTP response from a GetV1AppStoreCountryCodesWithResponse call
func ParseGetV1AppStoreCountryCodesResponse(rsp *http.Response) (*GetV1AppStoreCountryCodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AppStoreCountryCodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CountryCodes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1AuthResponse parses an HTTP response from a GetV1AuthWithResponse call
func ParseGetV1AuthResponse(rsp *http.Response) (*GetV1AuthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthorizationV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1AuthInvalidateTokenResponse parses an HTTP response from a PostV1AuthInvalidateTokenWithResponse call
func ParsePostV1AuthInvalidateTokenResponse(rsp *http.Response) (*PostV1AuthInvalidateTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AuthInvalidateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV1AuthKeepAliveResponse parses an HTTP response from a PostV1AuthKeepAliveWithResponse call
func ParsePostV1AuthKeepAliveResponse(rsp *http.Response) (*PostV1AuthKeepAliveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AuthKeepAliveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthTokenV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1AuthTokenResponse parses an HTTP response from a PostV1AuthTokenWithResponse call
func ParsePostV1AuthTokenResponse(rsp *http.Response) (*PostV1AuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthTokenV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1AzureAdMigrationReportsResponse parses an HTTP response from a PostV1AzureAdMigrationReportsWithResponse call
func ParsePostV1AzureAdMigrationReportsResponse(rsp *http.Response) (*PostV1AzureAdMigrationReportsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1AzureAdMigrationReportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1AzureAdMigrationReportsPendingResponse parses an HTTP response from a GetV1AzureAdMigrationReportsPendingWithResponse call
func ParseGetV1AzureAdMigrationReportsPendingResponse(rsp *http.Response) (*GetV1AzureAdMigrationReportsPendingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AzureAdMigrationReportsPendingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AzureAdMigrationReportProcessStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1AzureAdMigrationReportsIdResponse parses an HTTP response from a GetV1AzureAdMigrationReportsIdWithResponse call
func ParseGetV1AzureAdMigrationReportsIdResponse(rsp *http.Response) (*GetV1AzureAdMigrationReportsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AzureAdMigrationReportsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AzureAdMigrationReportProcessStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1AzureAdMigrationReportsIdDownloadResponse parses an HTTP response from a GetV1AzureAdMigrationReportsIdDownloadWithResponse call
func ParseGetV1AzureAdMigrationReportsIdDownloadResponse(rsp *http.Response) (*GetV1AzureAdMigrationReportsIdDownloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AzureAdMigrationReportsIdDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1BuildingsResponse parses an HTTP response from a GetV1BuildingsWithResponse call
func ParseGetV1BuildingsResponse(rsp *http.Response) (*GetV1BuildingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1BuildingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildingSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1BuildingsResponse parses an HTTP response from a PostV1BuildingsWithResponse call
func ParsePostV1BuildingsResponse(rsp *http.Response) (*PostV1BuildingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1BuildingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostV1BuildingsDeleteMultipleResponse parses an HTTP response from a PostV1BuildingsDeleteMultipleWithResponse call
func ParsePostV1BuildingsDeleteMultipleResponse(rsp *http.Response) (*PostV1BuildingsDeleteMultipleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1BuildingsDeleteMultipleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV1BuildingsIdResponse parses an HTTP response from a DeleteV1BuildingsIdWithResponse call
func ParseDeleteV1BuildingsIdResponse(rsp *http.Response) (*DeleteV1BuildingsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1BuildingsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1BuildingsIdResponse parses an HTTP response from a GetV1BuildingsIdWithResponse call
func ParseGetV1BuildingsIdResponse(rsp *http.Response) (*GetV1BuildingsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1BuildingsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Building
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1BuildingsIdResponse parses an HTTP response from a PutV1BuildingsIdWithResponse call
func ParsePutV1BuildingsIdResponse(rsp *http.Response) (*PutV1BuildingsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1BuildingsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Building
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1BuildingsIdHistoryResponse parses an HTTP response from a GetV1BuildingsIdHistoryWithResponse call
func ParseGetV1BuildingsIdHistoryResponse(rsp *http.Response) (*GetV1BuildingsIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1BuildingsIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1BuildingsIdHistoryResponse parses an HTTP response from a PostV1BuildingsIdHistoryWithResponse call
func ParsePostV1BuildingsIdHistoryResponse(rsp *http.Response) (*PostV1BuildingsIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1BuildingsIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1CacheSettingsResponse parses an HTTP response from a GetV1CacheSettingsWithResponse call
func ParseGetV1CacheSettingsResponse(rsp *http.Response) (*GetV1CacheSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1CacheSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CacheSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1CacheSettingsResponse parses an HTTP response from a PutV1CacheSettingsWithResponse call
func ParsePutV1CacheSettingsResponse(rsp *http.Response) (*PutV1CacheSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1CacheSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CacheSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetV1CategoriesResponse parses an HTTP response from a GetV1CategoriesWithResponse call
func ParseGetV1CategoriesResponse(rsp *http.Response) (*GetV1CategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1CategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoriesSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1CategoriesResponse parses an HTTP response from a PostV1CategoriesWithResponse call
func ParsePostV1CategoriesResponse(rsp *http.Response) (*PostV1CategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1CategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostV1CategoriesDeleteMultipleResponse parses an HTTP response from a PostV1CategoriesDeleteMultipleWithResponse call
func ParsePostV1CategoriesDeleteMultipleResponse(rsp *http.Response) (*PostV1CategoriesDeleteMultipleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1CategoriesDeleteMultipleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV1CategoriesIdResponse parses an HTTP response from a DeleteV1CategoriesIdWithResponse call
func ParseDeleteV1CategoriesIdResponse(rsp *http.Response) (*DeleteV1CategoriesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1CategoriesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1CategoriesIdResponse parses an HTTP response from a GetV1CategoriesIdWithResponse call
func ParseGetV1CategoriesIdResponse(rsp *http.Response) (*GetV1CategoriesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1CategoriesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1CategoriesIdResponse parses an HTTP response from a PutV1CategoriesIdWithResponse call
func ParsePutV1CategoriesIdResponse(rsp *http.Response) (*PutV1CategoriesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1CategoriesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1CategoriesIdHistoryResponse parses an HTTP response from a GetV1CategoriesIdHistoryWithResponse call
func ParseGetV1CategoriesIdHistoryResponse(rsp *http.Response) (*GetV1CategoriesIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1CategoriesIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1CategoriesIdHistoryResponse parses an HTTP response from a PostV1CategoriesIdHistoryWithResponse call
func ParsePostV1CategoriesIdHistoryResponse(rsp *http.Response) (*PostV1CategoriesIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1CategoriesIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ClassicLdapIdResponse parses an HTTP response from a GetV1ClassicLdapIdWithResponse call
func ParseGetV1ClassicLdapIdResponse(rsp *http.Response) (*GetV1ClassicLdapIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ClassicLdapIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClassicLdapMappings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1CloudAzureResponse parses an HTTP response from a PostV1CloudAzureWithResponse call
func ParsePostV1CloudAzureResponse(rsp *http.Response) (*PostV1CloudAzureResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1CloudAzureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1CloudAzureDefaultsMappingsResponse parses an HTTP response from a GetV1CloudAzureDefaultsMappingsWithResponse call
func ParseGetV1CloudAzureDefaultsMappingsResponse(rsp *http.Response) (*GetV1CloudAzureDefaultsMappingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1CloudAzureDefaultsMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AzureMappings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1CloudAzureDefaultsServerConfigurationResponse parses an HTTP response from a GetV1CloudAzureDefaultsServerConfigurationWithResponse call
func ParseGetV1CloudAzureDefaultsServerConfigurationResponse(rsp *http.Response) (*GetV1CloudAzureDefaultsServerConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1CloudAzureDefaultsServerConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AzureServerConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteV1CloudAzureIdResponse parses an HTTP response from a DeleteV1CloudAzureIdWithResponse call
func ParseDeleteV1CloudAzureIdResponse(rsp *http.Response) (*DeleteV1CloudAzureIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1CloudAzureIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1CloudAzureIdResponse parses an HTTP response from a GetV1CloudAzureIdWithResponse call
func ParseGetV1CloudAzureIdResponse(rsp *http.Response) (*GetV1CloudAzureIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1CloudAzureIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AzureConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1CloudAzureIdResponse parses an HTTP response from a PutV1CloudAzureIdWithResponse call
func ParsePutV1CloudAzureIdResponse(rsp *http.Response) (*PutV1CloudAzureIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1CloudAzureIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AzureConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetV1CloudIdpResponse parses an HTTP response from a GetV1CloudIdpWithResponse call
func ParseGetV1CloudIdpResponse(rsp *http.Response) (*GetV1CloudIdpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1CloudIdpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfigurationSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1CloudIdpExportResponse parses an HTTP response from a PostV1CloudIdpExportWithResponse call
func ParsePostV1CloudIdpExportResponse(rsp *http.Response) (*PostV1CloudIdpExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1CloudIdpExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1CloudIdpIdResponse parses an HTTP response from a GetV1CloudIdpIdWithResponse call
func ParseGetV1CloudIdpIdResponse(rsp *http.Response) (*GetV1CloudIdpIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1CloudIdpIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudIdPCommon
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1CloudIdpIdHistoryResponse parses an HTTP response from a GetV1CloudIdpIdHistoryWithResponse call
func ParseGetV1CloudIdpIdHistoryResponse(rsp *http.Response) (*GetV1CloudIdpIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1CloudIdpIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1CloudIdpIdHistoryResponse parses an HTTP response from a PostV1CloudIdpIdHistoryWithResponse call
func ParsePostV1CloudIdpIdHistoryResponse(rsp *http.Response) (*PostV1CloudIdpIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1CloudIdpIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1CloudIdpIdTestGroupResponse parses an HTTP response from a PostV1CloudIdpIdTestGroupWithResponse call
func ParsePostV1CloudIdpIdTestGroupResponse(rsp *http.Response) (*PostV1CloudIdpIdTestGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1CloudIdpIdTestGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupTestSearchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1CloudIdpIdTestUserResponse parses an HTTP response from a PostV1CloudIdpIdTestUserWithResponse call
func ParsePostV1CloudIdpIdTestUserResponse(rsp *http.Response) (*PostV1CloudIdpIdTestUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1CloudIdpIdTestUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserTestSearchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1CloudIdpIdTestUserMembershipResponse parses an HTTP response from a PostV1CloudIdpIdTestUserMembershipWithResponse call
func ParsePostV1CloudIdpIdTestUserMembershipResponse(rsp *http.Response) (*PostV1CloudIdpIdTestUserMembershipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1CloudIdpIdTestUserMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembershipTestSearchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1ComputerInventoryCollectionSettingsResponse parses an HTTP response from a GetV1ComputerInventoryCollectionSettingsWithResponse call
func ParseGetV1ComputerInventoryCollectionSettingsResponse(rsp *http.Response) (*GetV1ComputerInventoryCollectionSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ComputerInventoryCollectionSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerInventoryCollectionSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1ComputerInventoryCollectionSettingsResponse parses an HTTP response from a PatchV1ComputerInventoryCollectionSettingsWithResponse call
func ParsePatchV1ComputerInventoryCollectionSettingsResponse(rsp *http.Response) (*PatchV1ComputerInventoryCollectionSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ComputerInventoryCollectionSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerInventoryCollectionSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ComputerInventoryCollectionSettingsCustomPathResponse parses an HTTP response from a PostV1ComputerInventoryCollectionSettingsCustomPathWithResponse call
func ParsePostV1ComputerInventoryCollectionSettingsCustomPathResponse(rsp *http.Response) (*PostV1ComputerInventoryCollectionSettingsCustomPathResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ComputerInventoryCollectionSettingsCustomPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV1ComputerInventoryCollectionSettingsCustomPathIdResponse parses an HTTP response from a DeleteV1ComputerInventoryCollectionSettingsCustomPathIdWithResponse call
func ParseDeleteV1ComputerInventoryCollectionSettingsCustomPathIdResponse(rsp *http.Response) (*DeleteV1ComputerInventoryCollectionSettingsCustomPathIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ComputerInventoryCollectionSettingsCustomPathIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1ComputerPrestagesResponse parses an HTTP response from a GetV1ComputerPrestagesWithResponse call
func ParseGetV1ComputerPrestagesResponse(rsp *http.Response) (*GetV1ComputerPrestagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ComputerPrestagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerPrestageSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ComputerPrestagesResponse parses an HTTP response from a PostV1ComputerPrestagesWithResponse call
func ParsePostV1ComputerPrestagesResponse(rsp *http.Response) (*PostV1ComputerPrestagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ComputerPrestagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GetComputerPrestage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1ComputerPrestagesScopeResponse parses an HTTP response from a GetV1ComputerPrestagesScopeWithResponse call
func ParseGetV1ComputerPrestagesScopeResponse(rsp *http.Response) (*GetV1ComputerPrestagesScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ComputerPrestagesScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1ComputerPrestagesIdResponse parses an HTTP response from a DeleteV1ComputerPrestagesIdWithResponse call
func ParseDeleteV1ComputerPrestagesIdResponse(rsp *http.Response) (*DeleteV1ComputerPrestagesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ComputerPrestagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1ComputerPrestagesIdResponse parses an HTTP response from a GetV1ComputerPrestagesIdWithResponse call
func ParseGetV1ComputerPrestagesIdResponse(rsp *http.Response) (*GetV1ComputerPrestagesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ComputerPrestagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetComputerPrestage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1ComputerPrestagesIdResponse parses an HTTP response from a PutV1ComputerPrestagesIdWithResponse call
func ParsePutV1ComputerPrestagesIdResponse(rsp *http.Response) (*PutV1ComputerPrestagesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ComputerPrestagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetComputerPrestage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteV1ComputerPrestagesIdScopeResponse parses an HTTP response from a DeleteV1ComputerPrestagesIdScopeWithResponse call
func ParseDeleteV1ComputerPrestagesIdScopeResponse(rsp *http.Response) (*DeleteV1ComputerPrestagesIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ComputerPrestagesIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetV1ComputerPrestagesIdScopeResponse parses an HTTP response from a GetV1ComputerPrestagesIdScopeWithResponse call
func ParseGetV1ComputerPrestagesIdScopeResponse(rsp *http.Response) (*GetV1ComputerPrestagesIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ComputerPrestagesIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1ComputerPrestagesIdScopeResponse parses an HTTP response from a PostV1ComputerPrestagesIdScopeWithResponse call
func ParsePostV1ComputerPrestagesIdScopeResponse(rsp *http.Response) (*PostV1ComputerPrestagesIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ComputerPrestagesIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePutV1ComputerPrestagesIdScopeResponse parses an HTTP response from a PutV1ComputerPrestagesIdScopeWithResponse call
func ParsePutV1ComputerPrestagesIdScopeResponse(rsp *http.Response) (*PutV1ComputerPrestagesIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ComputerPrestagesIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetV1ComputersInventoryResponse parses an HTTP response from a GetV1ComputersInventoryWithResponse call
func ParseGetV1ComputersInventoryResponse(rsp *http.Response) (*GetV1ComputersInventoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ComputersInventoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerInventorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1ComputersInventoryDetailIdResponse parses an HTTP response from a GetV1ComputersInventoryDetailIdWithResponse call
func ParseGetV1ComputersInventoryDetailIdResponse(rsp *http.Response) (*GetV1ComputersInventoryDetailIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ComputersInventoryDetailIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerInventory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV1ComputersInventoryDetailIdResponse parses an HTTP response from a PatchV1ComputersInventoryDetailIdWithResponse call
func ParsePatchV1ComputersInventoryDetailIdResponse(rsp *http.Response) (*PatchV1ComputersInventoryDetailIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1ComputersInventoryDetailIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerInventory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteV1ComputersInventoryIdResponse parses an HTTP response from a DeleteV1ComputersInventoryIdWithResponse call
func ParseDeleteV1ComputersInventoryIdResponse(rsp *http.Response) (*DeleteV1ComputersInventoryIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ComputersInventoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1ComputersInventoryIdResponse parses an HTTP response from a GetV1ComputersInventoryIdWithResponse call
func ParseGetV1ComputersInventoryIdResponse(rsp *http.Response) (*GetV1ComputersInventoryIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ComputersInventoryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerInventory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1ComputersInventoryIdAttachmentsResponse parses an HTTP response from a PostV1ComputersInventoryIdAttachmentsWithResponse call
func ParsePostV1ComputersInventoryIdAttachmentsResponse(rsp *http.Response) (*PostV1ComputersInventoryIdAttachmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ComputersInventoryIdAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteV1ComputersInventoryIdAttachmentsAttachmentIdResponse parses an HTTP response from a DeleteV1ComputersInventoryIdAttachmentsAttachmentIdWithResponse call
func ParseDeleteV1ComputersInventoryIdAttachmentsAttachmentIdResponse(rsp *http.Response) (*DeleteV1ComputersInventoryIdAttachmentsAttachmentIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ComputersInventoryIdAttachmentsAttachmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1ComputersInventoryIdAttachmentsAttachmentIdResponse parses an HTTP response from a GetV1ComputersInventoryIdAttachmentsAttachmentIdWithResponse call
func ParseGetV1ComputersInventoryIdAttachmentsAttachmentIdResponse(rsp *http.Response) (*GetV1ComputersInventoryIdAttachmentsAttachmentIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ComputersInventoryIdAttachmentsAttachmentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1ComputersInventoryIdViewRecoveryLockPasswordResponse parses an HTTP response from a GetV1ComputersInventoryIdViewRecoveryLockPasswordWithResponse call
func ParseGetV1ComputersInventoryIdViewRecoveryLockPasswordResponse(rsp *http.Response) (*GetV1ComputersInventoryIdViewRecoveryLockPasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ComputersInventoryIdViewRecoveryLockPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerInventoryRecoveryLockPasswordResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1ComputersIdRecalculateSmartGroupsResponse parses an HTTP response from a PostV1ComputersIdRecalculateSmartGroupsWithResponse call
func ParsePostV1ComputersIdRecalculateSmartGroupsResponse(rsp *http.Response) (*PostV1ComputersIdRecalculateSmartGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ComputersIdRecalculateSmartGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecalculationResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdResponse parses an HTTP response from a GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdWithResponse call
func ParseGetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdResponse(rsp *http.Response) (*GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ConditionalAccessDeviceComplianceInformationComputerDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeviceComplianceInformation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdResponse parses an HTTP response from a GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdWithResponse call
func ParseGetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdResponse(rsp *http.Response) (*GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ConditionalAccessDeviceComplianceInformationMobileDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeviceComplianceInformation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1CsaTokenResponse parses an HTTP response from a DeleteV1CsaTokenWithResponse call
func ParseDeleteV1CsaTokenResponse(rsp *http.Response) (*DeleteV1CsaTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1CsaTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1CsaTokenResponse parses an HTTP response from a GetV1CsaTokenWithResponse call
func ParseGetV1CsaTokenResponse(rsp *http.Response) (*GetV1CsaTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1CsaTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CsaToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1CsaTokenResponse parses an HTTP response from a PostV1CsaTokenWithResponse call
func ParsePostV1CsaTokenResponse(rsp *http.Response) (*PostV1CsaTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1CsaTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CsaToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePutV1CsaTokenResponse parses an HTTP response from a PutV1CsaTokenWithResponse call
func ParsePutV1CsaTokenResponse(rsp *http.Response) (*PutV1CsaTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1CsaTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CsaToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1DepartmentsResponse parses an HTTP response from a GetV1DepartmentsWithResponse call
func ParseGetV1DepartmentsResponse(rsp *http.Response) (*GetV1DepartmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DepartmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DepartmentsSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1DepartmentsResponse parses an HTTP response from a PostV1DepartmentsWithResponse call
func ParsePostV1DepartmentsResponse(rsp *http.Response) (*PostV1DepartmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1DepartmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostV1DepartmentsDeleteMultipleResponse parses an HTTP response from a PostV1DepartmentsDeleteMultipleWithResponse call
func ParsePostV1DepartmentsDeleteMultipleResponse(rsp *http.Response) (*PostV1DepartmentsDeleteMultipleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1DepartmentsDeleteMultipleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV1DepartmentsIdResponse parses an HTTP response from a DeleteV1DepartmentsIdWithResponse call
func ParseDeleteV1DepartmentsIdResponse(rsp *http.Response) (*DeleteV1DepartmentsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1DepartmentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1DepartmentsIdResponse parses an HTTP response from a GetV1DepartmentsIdWithResponse call
func ParseGetV1DepartmentsIdResponse(rsp *http.Response) (*GetV1DepartmentsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DepartmentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Department
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1DepartmentsIdResponse parses an HTTP response from a PutV1DepartmentsIdWithResponse call
func ParsePutV1DepartmentsIdResponse(rsp *http.Response) (*PutV1DepartmentsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1DepartmentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Department
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1DepartmentsIdHistoryResponse parses an HTTP response from a GetV1DepartmentsIdHistoryWithResponse call
func ParseGetV1DepartmentsIdHistoryResponse(rsp *http.Response) (*GetV1DepartmentsIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DepartmentsIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1DepartmentsIdHistoryResponse parses an HTTP response from a PostV1DepartmentsIdHistoryWithResponse call
func ParsePostV1DepartmentsIdHistoryResponse(rsp *http.Response) (*PostV1DepartmentsIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1DepartmentsIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1DeployPackageResponse parses an HTTP response from a PostV1DeployPackageWithResponse call
func ParsePostV1DeployPackageResponse(rsp *http.Response) (*PostV1DeployPackageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1DeployPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VerbosePackageDeploymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1DeviceCommunicationSettingsResponse parses an HTTP response from a GetV1DeviceCommunicationSettingsWithResponse call
func ParseGetV1DeviceCommunicationSettingsResponse(rsp *http.Response) (*GetV1DeviceCommunicationSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DeviceCommunicationSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceCommunicationSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1DeviceCommunicationSettingsResponse parses an HTTP response from a PutV1DeviceCommunicationSettingsWithResponse call
func ParsePutV1DeviceCommunicationSettingsResponse(rsp *http.Response) (*PutV1DeviceCommunicationSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1DeviceCommunicationSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceCommunicationSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1DeviceCommunicationSettingsHistoryResponse parses an HTTP response from a GetV1DeviceCommunicationSettingsHistoryWithResponse call
func ParseGetV1DeviceCommunicationSettingsHistoryResponse(rsp *http.Response) (*GetV1DeviceCommunicationSettingsHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DeviceCommunicationSettingsHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1DeviceCommunicationSettingsHistoryResponse parses an HTTP response from a PostV1DeviceCommunicationSettingsHistoryWithResponse call
func ParsePostV1DeviceCommunicationSettingsHistoryResponse(rsp *http.Response) (*PostV1DeviceCommunicationSettingsHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1DeviceCommunicationSettingsHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1DeviceEnrollmentsResponse parses an HTTP response from a GetV1DeviceEnrollmentsWithResponse call
func ParseGetV1DeviceEnrollmentsResponse(rsp *http.Response) (*GetV1DeviceEnrollmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DeviceEnrollmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceEnrollmentInstanceSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1DeviceEnrollmentsPublicKeyResponse parses an HTTP response from a GetV1DeviceEnrollmentsPublicKeyWithResponse call
func ParseGetV1DeviceEnrollmentsPublicKeyResponse(rsp *http.Response) (*GetV1DeviceEnrollmentsPublicKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DeviceEnrollmentsPublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1DeviceEnrollmentsSyncsResponse parses an HTTP response from a GetV1DeviceEnrollmentsSyncsWithResponse call
func ParseGetV1DeviceEnrollmentsSyncsResponse(rsp *http.Response) (*GetV1DeviceEnrollmentsSyncsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DeviceEnrollmentsSyncsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeviceEnrollmentInstanceSyncStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1DeviceEnrollmentsUploadTokenResponse parses an HTTP response from a PostV1DeviceEnrollmentsUploadTokenWithResponse call
func ParsePostV1DeviceEnrollmentsUploadTokenResponse(rsp *http.Response) (*PostV1DeviceEnrollmentsUploadTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1DeviceEnrollmentsUploadTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1DeviceEnrollmentsIdResponse parses an HTTP response from a DeleteV1DeviceEnrollmentsIdWithResponse call
func ParseDeleteV1DeviceEnrollmentsIdResponse(rsp *http.Response) (*DeleteV1DeviceEnrollmentsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1DeviceEnrollmentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1DeviceEnrollmentsIdResponse parses an HTTP response from a GetV1DeviceEnrollmentsIdWithResponse call
func ParseGetV1DeviceEnrollmentsIdResponse(rsp *http.Response) (*GetV1DeviceEnrollmentsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DeviceEnrollmentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceEnrollmentInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1DeviceEnrollmentsIdResponse parses an HTTP response from a PutV1DeviceEnrollmentsIdWithResponse call
func ParsePutV1DeviceEnrollmentsIdResponse(rsp *http.Response) (*PutV1DeviceEnrollmentsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1DeviceEnrollmentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceEnrollmentInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1DeviceEnrollmentsIdDevicesResponse parses an HTTP response from a GetV1DeviceEnrollmentsIdDevicesWithResponse call
func ParseGetV1DeviceEnrollmentsIdDevicesResponse(rsp *http.Response) (*GetV1DeviceEnrollmentsIdDevicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DeviceEnrollmentsIdDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceEnrollmentDeviceSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1DeviceEnrollmentsIdDisownResponse parses an HTTP response from a PostV1DeviceEnrollmentsIdDisownWithResponse call
func ParsePostV1DeviceEnrollmentsIdDisownResponse(rsp *http.Response) (*PostV1DeviceEnrollmentsIdDisownResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1DeviceEnrollmentsIdDisownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceEnrollmentDisownResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1DeviceEnrollmentsIdHistoryResponse parses an HTTP response from a GetV1DeviceEnrollmentsIdHistoryWithResponse call
func ParseGetV1DeviceEnrollmentsIdHistoryResponse(rsp *http.Response) (*GetV1DeviceEnrollmentsIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DeviceEnrollmentsIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1DeviceEnrollmentsIdHistoryResponse parses an HTTP response from a PostV1DeviceEnrollmentsIdHistoryWithResponse call
func ParsePostV1DeviceEnrollmentsIdHistoryResponse(rsp *http.Response) (*PostV1DeviceEnrollmentsIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1DeviceEnrollmentsIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1DeviceEnrollmentsIdSyncsResponse parses an HTTP response from a GetV1DeviceEnrollmentsIdSyncsWithResponse call
func ParseGetV1DeviceEnrollmentsIdSyncsResponse(rsp *http.Response) (*GetV1DeviceEnrollmentsIdSyncsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DeviceEnrollmentsIdSyncsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DeviceEnrollmentInstanceSyncStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1DeviceEnrollmentsIdSyncsLatestResponse parses an HTTP response from a GetV1DeviceEnrollmentsIdSyncsLatestWithResponse call
func ParseGetV1DeviceEnrollmentsIdSyncsLatestResponse(rsp *http.Response) (*GetV1DeviceEnrollmentsIdSyncsLatestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DeviceEnrollmentsIdSyncsLatestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceEnrollmentInstanceSyncStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1DeviceEnrollmentsIdUploadTokenResponse parses an HTTP response from a PutV1DeviceEnrollmentsIdUploadTokenWithResponse call
func ParsePutV1DeviceEnrollmentsIdUploadTokenResponse(rsp *http.Response) (*PutV1DeviceEnrollmentsIdUploadTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1DeviceEnrollmentsIdUploadTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceEnrollmentInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1EbooksResponse parses an HTTP response from a GetV1EbooksWithResponse call
func ParseGetV1EbooksResponse(rsp *http.Response) (*GetV1EbooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EbooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EbookSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1EbooksIdResponse parses an HTTP response from a GetV1EbooksIdWithResponse call
func ParseGetV1EbooksIdResponse(rsp *http.Response) (*GetV1EbooksIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EbooksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ebook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1EbooksIdScopeResponse parses an HTTP response from a GetV1EbooksIdScopeWithResponse call
func ParseGetV1EbooksIdScopeResponse(rsp *http.Response) (*GetV1EbooksIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EbooksIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EbookScope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1EngageResponse parses an HTTP response from a GetV1EngageWithResponse call
func ParseGetV1EngageResponse(rsp *http.Response) (*GetV1EngageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EngageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Engage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1EngageResponse parses an HTTP response from a PutV1EngageWithResponse call
func ParsePutV1EngageResponse(rsp *http.Response) (*PutV1EngageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1EngageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Engage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1EngageHistoryResponse parses an HTTP response from a GetV1EngageHistoryWithResponse call
func ParseGetV1EngageHistoryResponse(rsp *http.Response) (*GetV1EngageHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EngageHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1EngageHistoryResponse parses an HTTP response from a PostV1EngageHistoryWithResponse call
func ParsePostV1EngageHistoryResponse(rsp *http.Response) (*PostV1EngageHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1EngageHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1EnrollmentResponse parses an HTTP response from a GetV1EnrollmentWithResponse call
func ParseGetV1EnrollmentResponse(rsp *http.Response) (*GetV1EnrollmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1EnrollmentResponse parses an HTTP response from a PutV1EnrollmentWithResponse call
func ParsePutV1EnrollmentResponse(rsp *http.Response) (*PutV1EnrollmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1EnrollmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1EnrollmentCustomizationResponse parses an HTTP response from a GetV1EnrollmentCustomizationWithResponse call
func ParseGetV1EnrollmentCustomizationResponse(rsp *http.Response) (*GetV1EnrollmentCustomizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentCustomizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentCustomizationSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1EnrollmentCustomizationResponse parses an HTTP response from a PostV1EnrollmentCustomizationWithResponse call
func ParsePostV1EnrollmentCustomizationResponse(rsp *http.Response) (*PostV1EnrollmentCustomizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1EnrollmentCustomizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GetEnrollmentCustomization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostV1EnrollmentCustomizationImagesResponse parses an HTTP response from a PostV1EnrollmentCustomizationImagesWithResponse call
func ParsePostV1EnrollmentCustomizationImagesResponse(rsp *http.Response) (*PostV1EnrollmentCustomizationImagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1EnrollmentCustomizationImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BrandingImageUrl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostV1EnrollmentCustomizationParseMarkdownResponse parses an HTTP response from a PostV1EnrollmentCustomizationParseMarkdownWithResponse call
func ParsePostV1EnrollmentCustomizationParseMarkdownResponse(rsp *http.Response) (*PostV1EnrollmentCustomizationParseMarkdownResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1EnrollmentCustomizationParseMarkdownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Markdown
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1EnrollmentCustomizationIdResponse parses an HTTP response from a DeleteV1EnrollmentCustomizationIdWithResponse call
func ParseDeleteV1EnrollmentCustomizationIdResponse(rsp *http.Response) (*DeleteV1EnrollmentCustomizationIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1EnrollmentCustomizationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1EnrollmentCustomizationIdResponse parses an HTTP response from a GetV1EnrollmentCustomizationIdWithResponse call
func ParseGetV1EnrollmentCustomizationIdResponse(rsp *http.Response) (*GetV1EnrollmentCustomizationIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentCustomizationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEnrollmentCustomization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1EnrollmentCustomizationIdResponse parses an HTTP response from a PutV1EnrollmentCustomizationIdWithResponse call
func ParsePutV1EnrollmentCustomizationIdResponse(rsp *http.Response) (*PutV1EnrollmentCustomizationIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1EnrollmentCustomizationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEnrollmentCustomization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1EnrollmentCustomizationIdAllResponse parses an HTTP response from a GetV1EnrollmentCustomizationIdAllWithResponse call
func ParseGetV1EnrollmentCustomizationIdAllResponse(rsp *http.Response) (*GetV1EnrollmentCustomizationIdAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentCustomizationIdAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentCustomizationPanelList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteV1EnrollmentCustomizationIdAllPanelIdResponse parses an HTTP response from a DeleteV1EnrollmentCustomizationIdAllPanelIdWithResponse call
func ParseDeleteV1EnrollmentCustomizationIdAllPanelIdResponse(rsp *http.Response) (*DeleteV1EnrollmentCustomizationIdAllPanelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1EnrollmentCustomizationIdAllPanelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1EnrollmentCustomizationIdAllPanelIdResponse parses an HTTP response from a GetV1EnrollmentCustomizationIdAllPanelIdWithResponse call
func ParseGetV1EnrollmentCustomizationIdAllPanelIdResponse(rsp *http.Response) (*GetV1EnrollmentCustomizationIdAllPanelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentCustomizationIdAllPanelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEnrollmentCustomizationPanel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1EnrollmentCustomizationIdHistoryResponse parses an HTTP response from a GetV1EnrollmentCustomizationIdHistoryWithResponse call
func ParseGetV1EnrollmentCustomizationIdHistoryResponse(rsp *http.Response) (*GetV1EnrollmentCustomizationIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentCustomizationIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1EnrollmentCustomizationIdHistoryResponse parses an HTTP response from a PostV1EnrollmentCustomizationIdHistoryWithResponse call
func ParsePostV1EnrollmentCustomizationIdHistoryResponse(rsp *http.Response) (*PostV1EnrollmentCustomizationIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1EnrollmentCustomizationIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1EnrollmentCustomizationIdLdapResponse parses an HTTP response from a PostV1EnrollmentCustomizationIdLdapWithResponse call
func ParsePostV1EnrollmentCustomizationIdLdapResponse(rsp *http.Response) (*PostV1EnrollmentCustomizationIdLdapResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1EnrollmentCustomizationIdLdapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GetEnrollmentCustomizationPanelLdapAuth
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV1EnrollmentCustomizationIdLdapPanelIdResponse parses an HTTP response from a DeleteV1EnrollmentCustomizationIdLdapPanelIdWithResponse call
func ParseDeleteV1EnrollmentCustomizationIdLdapPanelIdResponse(rsp *http.Response) (*DeleteV1EnrollmentCustomizationIdLdapPanelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1EnrollmentCustomizationIdLdapPanelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1EnrollmentCustomizationIdLdapPanelIdResponse parses an HTTP response from a GetV1EnrollmentCustomizationIdLdapPanelIdWithResponse call
func ParseGetV1EnrollmentCustomizationIdLdapPanelIdResponse(rsp *http.Response) (*GetV1EnrollmentCustomizationIdLdapPanelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentCustomizationIdLdapPanelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEnrollmentCustomizationPanelLdapAuth
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1EnrollmentCustomizationIdLdapPanelIdResponse parses an HTTP response from a PutV1EnrollmentCustomizationIdLdapPanelIdWithResponse call
func ParsePutV1EnrollmentCustomizationIdLdapPanelIdResponse(rsp *http.Response) (*PutV1EnrollmentCustomizationIdLdapPanelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1EnrollmentCustomizationIdLdapPanelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEnrollmentCustomizationPanelLdapAuth
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1EnrollmentCustomizationIdPrestagesResponse parses an HTTP response from a GetV1EnrollmentCustomizationIdPrestagesWithResponse call
func ParseGetV1EnrollmentCustomizationIdPrestagesResponse(rsp *http.Response) (*GetV1EnrollmentCustomizationIdPrestagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentCustomizationIdPrestagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageDependencies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1EnrollmentCustomizationIdSsoResponse parses an HTTP response from a PostV1EnrollmentCustomizationIdSsoWithResponse call
func ParsePostV1EnrollmentCustomizationIdSsoResponse(rsp *http.Response) (*PostV1EnrollmentCustomizationIdSsoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1EnrollmentCustomizationIdSsoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GetEnrollmentCustomizationPanelSsoAuth
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV1EnrollmentCustomizationIdSsoPanelIdResponse parses an HTTP response from a DeleteV1EnrollmentCustomizationIdSsoPanelIdWithResponse call
func ParseDeleteV1EnrollmentCustomizationIdSsoPanelIdResponse(rsp *http.Response) (*DeleteV1EnrollmentCustomizationIdSsoPanelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1EnrollmentCustomizationIdSsoPanelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1EnrollmentCustomizationIdSsoPanelIdResponse parses an HTTP response from a GetV1EnrollmentCustomizationIdSsoPanelIdWithResponse call
func ParseGetV1EnrollmentCustomizationIdSsoPanelIdResponse(rsp *http.Response) (*GetV1EnrollmentCustomizationIdSsoPanelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentCustomizationIdSsoPanelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEnrollmentCustomizationPanelSsoAuth
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1EnrollmentCustomizationIdSsoPanelIdResponse parses an HTTP response from a PutV1EnrollmentCustomizationIdSsoPanelIdWithResponse call
func ParsePutV1EnrollmentCustomizationIdSsoPanelIdResponse(rsp *http.Response) (*PutV1EnrollmentCustomizationIdSsoPanelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1EnrollmentCustomizationIdSsoPanelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEnrollmentCustomizationPanelSsoAuth
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1EnrollmentCustomizationIdTextResponse parses an HTTP response from a PostV1EnrollmentCustomizationIdTextWithResponse call
func ParsePostV1EnrollmentCustomizationIdTextResponse(rsp *http.Response) (*PostV1EnrollmentCustomizationIdTextResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1EnrollmentCustomizationIdTextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GetEnrollmentCustomizationPanelText
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV1EnrollmentCustomizationIdTextPanelIdResponse parses an HTTP response from a DeleteV1EnrollmentCustomizationIdTextPanelIdWithResponse call
func ParseDeleteV1EnrollmentCustomizationIdTextPanelIdResponse(rsp *http.Response) (*DeleteV1EnrollmentCustomizationIdTextPanelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1EnrollmentCustomizationIdTextPanelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1EnrollmentCustomizationIdTextPanelIdResponse parses an HTTP response from a GetV1EnrollmentCustomizationIdTextPanelIdWithResponse call
func ParseGetV1EnrollmentCustomizationIdTextPanelIdResponse(rsp *http.Response) (*GetV1EnrollmentCustomizationIdTextPanelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentCustomizationIdTextPanelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEnrollmentCustomizationPanelText
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1EnrollmentCustomizationIdTextPanelIdResponse parses an HTTP response from a PutV1EnrollmentCustomizationIdTextPanelIdWithResponse call
func ParsePutV1EnrollmentCustomizationIdTextPanelIdResponse(rsp *http.Response) (*PutV1EnrollmentCustomizationIdTextPanelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1EnrollmentCustomizationIdTextPanelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetEnrollmentCustomizationPanelText
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1EnrollmentCustomizationIdTextPanelIdMarkdownResponse parses an HTTP response from a GetV1EnrollmentCustomizationIdTextPanelIdMarkdownWithResponse call
func ParseGetV1EnrollmentCustomizationIdTextPanelIdMarkdownResponse(rsp *http.Response) (*GetV1EnrollmentCustomizationIdTextPanelIdMarkdownResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentCustomizationIdTextPanelIdMarkdownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Markdown
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1EnrollmentAccessGroupsResponse parses an HTTP response from a GetV1EnrollmentAccessGroupsWithResponse call
func ParseGetV1EnrollmentAccessGroupsResponse(rsp *http.Response) (*GetV1EnrollmentAccessGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentAccessGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessGroupsSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1EnrollmentAccessGroupsGroupKeyResponse parses an HTTP response from a DeleteV1EnrollmentAccessGroupsGroupKeyWithResponse call
func ParseDeleteV1EnrollmentAccessGroupsGroupKeyResponse(rsp *http.Response) (*DeleteV1EnrollmentAccessGroupsGroupKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1EnrollmentAccessGroupsGroupKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1EnrollmentAccessGroupsGroupKeyResponse parses an HTTP response from a GetV1EnrollmentAccessGroupsGroupKeyWithResponse call
func ParseGetV1EnrollmentAccessGroupsGroupKeyResponse(rsp *http.Response) (*GetV1EnrollmentAccessGroupsGroupKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentAccessGroupsGroupKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentAccessGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1EnrollmentAccessGroupsGroupKeyResponse parses an HTTP response from a PutV1EnrollmentAccessGroupsGroupKeyWithResponse call
func ParsePutV1EnrollmentAccessGroupsGroupKeyResponse(rsp *http.Response) (*PutV1EnrollmentAccessGroupsGroupKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1EnrollmentAccessGroupsGroupKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentAccessGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1EnrollmentFilteredLanguageCodesResponse parses an HTTP response from a GetV1EnrollmentFilteredLanguageCodesWithResponse call
func ParseGetV1EnrollmentFilteredLanguageCodesResponse(rsp *http.Response) (*GetV1EnrollmentFilteredLanguageCodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentFilteredLanguageCodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LanguageCode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1EnrollmentHistoryResponse parses an HTTP response from a GetV1EnrollmentHistoryWithResponse call
func ParseGetV1EnrollmentHistoryResponse(rsp *http.Response) (*GetV1EnrollmentHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1EnrollmentHistoryResponse parses an HTTP response from a PostV1EnrollmentHistoryWithResponse call
func ParsePostV1EnrollmentHistoryResponse(rsp *http.Response) (*PostV1EnrollmentHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1EnrollmentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1EnrollmentLanguageCodesResponse parses an HTTP response from a GetV1EnrollmentLanguageCodesWithResponse call
func ParseGetV1EnrollmentLanguageCodesResponse(rsp *http.Response) (*GetV1EnrollmentLanguageCodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentLanguageCodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LanguageCode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1EnrollmentLanguagesResponse parses an HTTP response from a GetV1EnrollmentLanguagesWithResponse call
func ParseGetV1EnrollmentLanguagesResponse(rsp *http.Response) (*GetV1EnrollmentLanguagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentLanguagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProcessTextsSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1EnrollmentLanguagesLanguageResponse parses an HTTP response from a DeleteV1EnrollmentLanguagesLanguageWithResponse call
func ParseDeleteV1EnrollmentLanguagesLanguageResponse(rsp *http.Response) (*DeleteV1EnrollmentLanguagesLanguageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1EnrollmentLanguagesLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1EnrollmentLanguagesLanguageResponse parses an HTTP response from a GetV1EnrollmentLanguagesLanguageWithResponse call
func ParseGetV1EnrollmentLanguagesLanguageResponse(rsp *http.Response) (*GetV1EnrollmentLanguagesLanguageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1EnrollmentLanguagesLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentProcessTextObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1EnrollmentLanguagesLanguageResponse parses an HTTP response from a PutV1EnrollmentLanguagesLanguageWithResponse call
func ParsePutV1EnrollmentLanguagesLanguageResponse(rsp *http.Response) (*PutV1EnrollmentLanguagesLanguageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1EnrollmentLanguagesLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentProcessTextObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV1IconResponse parses an HTTP response from a PostV1IconWithResponse call
func ParsePostV1IconResponse(rsp *http.Response) (*PostV1IconResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IconResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IconResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1IconIdResponse parses an HTTP response from a GetV1IconIdWithResponse call
func ParseGetV1IconIdResponse(rsp *http.Response) (*GetV1IconIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1IconIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IconResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1InventoryInformationResponse parses an HTTP response from a GetV1InventoryInformationWithResponse call
func ParseGetV1InventoryInformationResponse(rsp *http.Response) (*GetV1InventoryInformationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1InventoryInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryInformation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1InventoryPreloadResponse parses an HTTP response from a DeleteV1InventoryPreloadWithResponse call
func ParseDeleteV1InventoryPreloadResponse(rsp *http.Response) (*DeleteV1InventoryPreloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1InventoryPreloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1InventoryPreloadResponse parses an HTTP response from a GetV1InventoryPreloadWithResponse call
func ParseGetV1InventoryPreloadResponse(rsp *http.Response) (*GetV1InventoryPreloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1InventoryPreloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryPreloadRecordSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParsePostV1InventoryPreloadResponse parses an HTTP response from a PostV1InventoryPreloadWithResponse call
func ParsePostV1InventoryPreloadResponse(rsp *http.Response) (*PostV1InventoryPreloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1InventoryPreloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InventoryPreloadRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1InventoryPreloadCsvTemplateResponse parses an HTTP response from a GetV1InventoryPreloadCsvTemplateWithResponse call
func ParseGetV1InventoryPreloadCsvTemplateResponse(rsp *http.Response) (*GetV1InventoryPreloadCsvTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1InventoryPreloadCsvTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1InventoryPreloadHistoryResponse parses an HTTP response from a GetV1InventoryPreloadHistoryWithResponse call
func ParseGetV1InventoryPreloadHistoryResponse(rsp *http.Response) (*GetV1InventoryPreloadHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1InventoryPreloadHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1InventoryPreloadHistoryResponse parses an HTTP response from a PostV1InventoryPreloadHistoryWithResponse call
func ParsePostV1InventoryPreloadHistoryResponse(rsp *http.Response) (*PostV1InventoryPreloadHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1InventoryPreloadHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1InventoryPreloadValidateCsvResponse parses an HTTP response from a PostV1InventoryPreloadValidateCsvWithResponse call
func ParsePostV1InventoryPreloadValidateCsvResponse(rsp *http.Response) (*PostV1InventoryPreloadValidateCsvResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1InventoryPreloadValidateCsvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryPreloadCsvValidationSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest InventoryPreloadInvalidCsvResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	}

	return response, nil
}

// ParseDeleteV1InventoryPreloadIdResponse parses an HTTP response from a DeleteV1InventoryPreloadIdWithResponse call
func ParseDeleteV1InventoryPreloadIdResponse(rsp *http.Response) (*DeleteV1InventoryPreloadIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1InventoryPreloadIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1InventoryPreloadIdResponse parses an HTTP response from a GetV1InventoryPreloadIdWithResponse call
func ParseGetV1InventoryPreloadIdResponse(rsp *http.Response) (*GetV1InventoryPreloadIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1InventoryPreloadIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryPreloadRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1InventoryPreloadIdResponse parses an HTTP response from a PutV1InventoryPreloadIdWithResponse call
func ParsePutV1InventoryPreloadIdResponse(rsp *http.Response) (*PutV1InventoryPreloadIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1InventoryPreloadIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryPreloadRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1JamfConnectResponse parses an HTTP response from a GetV1JamfConnectWithResponse call
func ParseGetV1JamfConnectResponse(rsp *http.Response) (*GetV1JamfConnectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JamfConnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetV1JamfConnectConfigProfilesResponse parses an HTTP response from a GetV1JamfConnectConfigProfilesWithResponse call
func ParseGetV1JamfConnectConfigProfilesResponse(rsp *http.Response) (*GetV1JamfConnectConfigProfilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JamfConnectConfigProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LinkedConnectProfileSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1JamfConnectConfigProfilesIdResponse parses an HTTP response from a PutV1JamfConnectConfigProfilesIdWithResponse call
func ParsePutV1JamfConnectConfigProfilesIdResponse(rsp *http.Response) (*PutV1JamfConnectConfigProfilesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1JamfConnectConfigProfilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LinkedConnectProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1JamfConnectDeploymentsIdTasksResponse parses an HTTP response from a GetV1JamfConnectDeploymentsIdTasksWithResponse call
func ParseGetV1JamfConnectDeploymentsIdTasksResponse(rsp *http.Response) (*GetV1JamfConnectDeploymentsIdTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JamfConnectDeploymentsIdTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentTaskSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1JamfConnectDeploymentsIdTasksRetryResponse parses an HTTP response from a PostV1JamfConnectDeploymentsIdTasksRetryWithResponse call
func ParsePostV1JamfConnectDeploymentsIdTasksRetryResponse(rsp *http.Response) (*PostV1JamfConnectDeploymentsIdTasksRetryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1JamfConnectDeploymentsIdTasksRetryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1JamfConnectHistoryResponse parses an HTTP response from a GetV1JamfConnectHistoryWithResponse call
func ParseGetV1JamfConnectHistoryResponse(rsp *http.Response) (*GetV1JamfConnectHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JamfConnectHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1JamfConnectHistoryResponse parses an HTTP response from a PostV1JamfConnectHistoryWithResponse call
func ParsePostV1JamfConnectHistoryResponse(rsp *http.Response) (*PostV1JamfConnectHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1JamfConnectHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1JamfManagementFrameworkRedeployIdResponse parses an HTTP response from a PostV1JamfManagementFrameworkRedeployIdWithResponse call
func ParsePostV1JamfManagementFrameworkRedeployIdResponse(rsp *http.Response) (*PostV1JamfManagementFrameworkRedeployIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1JamfManagementFrameworkRedeployIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest RedeployJamfManagementFrameworkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1JamfPackageResponse parses an HTTP response from a GetV1JamfPackageWithResponse call
func ParseGetV1JamfPackageResponse(rsp *http.Response) (*GetV1JamfPackageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JamfPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []JamfPackageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1JamfProInformationResponse parses an HTTP response from a GetV1JamfProInformationWithResponse call
func ParseGetV1JamfProInformationResponse(rsp *http.Response) (*GetV1JamfProInformationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JamfProInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JamfProInformation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1JamfProServerUrlResponse parses an HTTP response from a GetV1JamfProServerUrlWithResponse call
func ParseGetV1JamfProServerUrlResponse(rsp *http.Response) (*GetV1JamfProServerUrlResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JamfProServerUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JamfProServerUrl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1JamfProServerUrlResponse parses an HTTP response from a PutV1JamfProServerUrlWithResponse call
func ParsePutV1JamfProServerUrlResponse(rsp *http.Response) (*PutV1JamfProServerUrlResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1JamfProServerUrlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JamfProServerUrl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetV1JamfProServerUrlHistoryResponse parses an HTTP response from a GetV1JamfProServerUrlHistoryWithResponse call
func ParseGetV1JamfProServerUrlHistoryResponse(rsp *http.Response) (*GetV1JamfProServerUrlHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JamfProServerUrlHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1JamfProServerUrlHistoryResponse parses an HTTP response from a PostV1JamfProServerUrlHistoryWithResponse call
func ParsePostV1JamfProServerUrlHistoryResponse(rsp *http.Response) (*PostV1JamfProServerUrlHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1JamfProServerUrlHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1JamfProVersionResponse parses an HTTP response from a GetV1JamfProVersionWithResponse call
func ParseGetV1JamfProVersionResponse(rsp *http.Response) (*GetV1JamfProVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JamfProVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JamfProVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1JamfProtectResponse parses an HTTP response from a DeleteV1JamfProtectWithResponse call
func ParseDeleteV1JamfProtectResponse(rsp *http.Response) (*DeleteV1JamfProtectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1JamfProtectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1JamfProtectResponse parses an HTTP response from a GetV1JamfProtectWithResponse call
func ParseGetV1JamfProtectResponse(rsp *http.Response) (*GetV1JamfProtectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JamfProtectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProtectSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutV1JamfProtectResponse parses an HTTP response from a PutV1JamfProtectWithResponse call
func ParsePutV1JamfProtectResponse(rsp *http.Response) (*PutV1JamfProtectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1JamfProtectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProtectSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1JamfProtectDeploymentsIdTasksResponse parses an HTTP response from a GetV1JamfProtectDeploymentsIdTasksWithResponse call
func ParseGetV1JamfProtectDeploymentsIdTasksResponse(rsp *http.Response) (*GetV1JamfProtectDeploymentsIdTasksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JamfProtectDeploymentsIdTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentTaskSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1JamfProtectDeploymentsIdTasksRetryResponse parses an HTTP response from a PostV1JamfProtectDeploymentsIdTasksRetryWithResponse call
func ParsePostV1JamfProtectDeploymentsIdTasksRetryResponse(rsp *http.Response) (*PostV1JamfProtectDeploymentsIdTasksRetryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1JamfProtectDeploymentsIdTasksRetryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1JamfProtectHistoryResponse parses an HTTP response from a GetV1JamfProtectHistoryWithResponse call
func ParseGetV1JamfProtectHistoryResponse(rsp *http.Response) (*GetV1JamfProtectHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JamfProtectHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1JamfProtectHistoryResponse parses an HTTP response from a PostV1JamfProtectHistoryWithResponse call
func ParsePostV1JamfProtectHistoryResponse(rsp *http.Response) (*PostV1JamfProtectHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1JamfProtectHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1JamfProtectPlansResponse parses an HTTP response from a GetV1JamfProtectPlansWithResponse call
func ParseGetV1JamfProtectPlansResponse(rsp *http.Response) (*GetV1JamfProtectPlansResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1JamfProtectPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlanSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1JamfProtectPlansSyncResponse parses an HTTP response from a PostV1JamfProtectPlansSyncWithResponse call
func ParsePostV1JamfProtectPlansSyncResponse(rsp *http.Response) (*PostV1JamfProtectPlansSyncResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1JamfProtectPlansSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1JamfProtectRegisterResponse parses an HTTP response from a PostV1JamfProtectRegisterWithResponse call
func ParsePostV1JamfProtectRegisterResponse(rsp *http.Response) (*PostV1JamfProtectRegisterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1JamfProtectRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProtectSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV1LdapKeystoreVerifyResponse parses an HTTP response from a PostV1LdapKeystoreVerifyWithResponse call
func ParsePostV1LdapKeystoreVerifyResponse(rsp *http.Response) (*PostV1LdapKeystoreVerifyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1LdapKeystoreVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudLdapKeystore
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1LdapGroupsResponse parses an HTTP response from a GetV1LdapGroupsWithResponse call
func ParseGetV1LdapGroupsResponse(rsp *http.Response) (*GetV1LdapGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1LdapGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LdapGroupSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1LdapLdapServersResponse parses an HTTP response from a GetV1LdapLdapServersWithResponse call
func ParseGetV1LdapLdapServersResponse(rsp *http.Response) (*GetV1LdapLdapServersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1LdapLdapServersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LdapServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1LdapServersResponse parses an HTTP response from a GetV1LdapServersWithResponse call
func ParseGetV1LdapServersResponse(rsp *http.Response) (*GetV1LdapServersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1LdapServersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LdapServer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1LocalesResponse parses an HTTP response from a GetV1LocalesWithResponse call
func ParseGetV1LocalesResponse(rsp *http.Response) (*GetV1LocalesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1LocalesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Locale
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MacosManagedSoftwareUpdatesAvailableUpdatesResponse parses an HTTP response from a GetV1MacosManagedSoftwareUpdatesAvailableUpdatesWithResponse call
func ParseGetV1MacosManagedSoftwareUpdatesAvailableUpdatesResponse(rsp *http.Response) (*GetV1MacosManagedSoftwareUpdatesAvailableUpdatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MacosManagedSoftwareUpdatesAvailableUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AvailableUpdates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1MacosManagedSoftwareUpdatesSendUpdatesResponse parses an HTTP response from a PostV1MacosManagedSoftwareUpdatesSendUpdatesWithResponse call
func ParsePostV1MacosManagedSoftwareUpdatesSendUpdatesResponse(rsp *http.Response) (*PostV1MacosManagedSoftwareUpdatesSendUpdatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MacosManagedSoftwareUpdatesSendUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MacOsManagedSoftwareUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1MdmCommandsResponse parses an HTTP response from a GetV1MdmCommandsWithResponse call
func ParseGetV1MdmCommandsResponse(rsp *http.Response) (*GetV1MdmCommandsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MdmCommandsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MdmCommand
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 414:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON414 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1MdmRenewProfileResponse parses an HTTP response from a PostV1MdmRenewProfileWithResponse call
func ParsePostV1MdmRenewProfileResponse(rsp *http.Response) (*PostV1MdmRenewProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MdmRenewProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest RenewMdmProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetV1MobileDeviceEnrollmentProfileIdDownloadProfileResponse parses an HTTP response from a GetV1MobileDeviceEnrollmentProfileIdDownloadProfileWithResponse call
func ParseGetV1MobileDeviceEnrollmentProfileIdDownloadProfileResponse(rsp *http.Response) (*GetV1MobileDeviceEnrollmentProfileIdDownloadProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MobileDeviceEnrollmentProfileIdDownloadProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1MobileDeviceGroupsResponse parses an HTTP response from a GetV1MobileDeviceGroupsWithResponse call
func ParseGetV1MobileDeviceGroupsResponse(rsp *http.Response) (*GetV1MobileDeviceGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MobileDeviceGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MobileDeviceGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MobileDevicePrestagesResponse parses an HTTP response from a GetV1MobileDevicePrestagesWithResponse call
func ParseGetV1MobileDevicePrestagesResponse(rsp *http.Response) (*GetV1MobileDevicePrestagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MobileDevicePrestagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileDevicePrestageSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1MobileDevicePrestagesResponse parses an HTTP response from a PostV1MobileDevicePrestagesWithResponse call
func ParsePostV1MobileDevicePrestagesResponse(rsp *http.Response) (*PostV1MobileDevicePrestagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MobileDevicePrestagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest GetMobileDevicePrestage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetV1MobileDevicePrestagesScopeResponse parses an HTTP response from a GetV1MobileDevicePrestagesScopeWithResponse call
func ParseGetV1MobileDevicePrestagesScopeResponse(rsp *http.Response) (*GetV1MobileDevicePrestagesScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MobileDevicePrestagesScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MobileDevicePrestagesSyncResponse parses an HTTP response from a GetV1MobileDevicePrestagesSyncWithResponse call
func ParseGetV1MobileDevicePrestagesSyncResponse(rsp *http.Response) (*GetV1MobileDevicePrestagesSyncResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MobileDevicePrestagesSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PrestageSyncStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MobileDevicePrestagesSyncIdResponse parses an HTTP response from a GetV1MobileDevicePrestagesSyncIdWithResponse call
func ParseGetV1MobileDevicePrestagesSyncIdResponse(rsp *http.Response) (*GetV1MobileDevicePrestagesSyncIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MobileDevicePrestagesSyncIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PrestageSyncStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MobileDevicePrestagesSyncIdLatestResponse parses an HTTP response from a GetV1MobileDevicePrestagesSyncIdLatestWithResponse call
func ParseGetV1MobileDevicePrestagesSyncIdLatestResponse(rsp *http.Response) (*GetV1MobileDevicePrestagesSyncIdLatestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MobileDevicePrestagesSyncIdLatestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageSyncStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1MobileDevicePrestagesIdResponse parses an HTTP response from a DeleteV1MobileDevicePrestagesIdWithResponse call
func ParseDeleteV1MobileDevicePrestagesIdResponse(rsp *http.Response) (*DeleteV1MobileDevicePrestagesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1MobileDevicePrestagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1MobileDevicePrestagesIdResponse parses an HTTP response from a GetV1MobileDevicePrestagesIdWithResponse call
func ParseGetV1MobileDevicePrestagesIdResponse(rsp *http.Response) (*GetV1MobileDevicePrestagesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MobileDevicePrestagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMobileDevicePrestage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1MobileDevicePrestagesIdResponse parses an HTTP response from a PutV1MobileDevicePrestagesIdWithResponse call
func ParsePutV1MobileDevicePrestagesIdResponse(rsp *http.Response) (*PutV1MobileDevicePrestagesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1MobileDevicePrestagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMobileDevicePrestage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteV1MobileDevicePrestagesIdAttachmentsResponse parses an HTTP response from a DeleteV1MobileDevicePrestagesIdAttachmentsWithResponse call
func ParseDeleteV1MobileDevicePrestagesIdAttachmentsResponse(rsp *http.Response) (*DeleteV1MobileDevicePrestagesIdAttachmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1MobileDevicePrestagesIdAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1MobileDevicePrestagesIdAttachmentsResponse parses an HTTP response from a GetV1MobileDevicePrestagesIdAttachmentsWithResponse call
func ParseGetV1MobileDevicePrestagesIdAttachmentsResponse(rsp *http.Response) (*GetV1MobileDevicePrestagesIdAttachmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MobileDevicePrestagesIdAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FileAttachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1MobileDevicePrestagesIdAttachmentsResponse parses an HTTP response from a PostV1MobileDevicePrestagesIdAttachmentsWithResponse call
func ParsePostV1MobileDevicePrestagesIdAttachmentsResponse(rsp *http.Response) (*PostV1MobileDevicePrestagesIdAttachmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MobileDevicePrestagesIdAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PrestageFileAttachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	}

	return response, nil
}

// ParseGetV1MobileDevicePrestagesIdHistoryResponse parses an HTTP response from a GetV1MobileDevicePrestagesIdHistoryWithResponse call
func ParseGetV1MobileDevicePrestagesIdHistoryResponse(rsp *http.Response) (*GetV1MobileDevicePrestagesIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MobileDevicePrestagesIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1MobileDevicePrestagesIdHistoryResponse parses an HTTP response from a PostV1MobileDevicePrestagesIdHistoryWithResponse call
func ParsePostV1MobileDevicePrestagesIdHistoryResponse(rsp *http.Response) (*PostV1MobileDevicePrestagesIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MobileDevicePrestagesIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteV1MobileDevicePrestagesIdScopeResponse parses an HTTP response from a DeleteV1MobileDevicePrestagesIdScopeWithResponse call
func ParseDeleteV1MobileDevicePrestagesIdScopeResponse(rsp *http.Response) (*DeleteV1MobileDevicePrestagesIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1MobileDevicePrestagesIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetV1MobileDevicePrestagesIdScopeResponse parses an HTTP response from a GetV1MobileDevicePrestagesIdScopeWithResponse call
func ParseGetV1MobileDevicePrestagesIdScopeResponse(rsp *http.Response) (*GetV1MobileDevicePrestagesIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MobileDevicePrestagesIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1MobileDevicePrestagesIdScopeResponse parses an HTTP response from a PostV1MobileDevicePrestagesIdScopeWithResponse call
func ParsePostV1MobileDevicePrestagesIdScopeResponse(rsp *http.Response) (*PostV1MobileDevicePrestagesIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MobileDevicePrestagesIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePutV1MobileDevicePrestagesIdScopeResponse parses an HTTP response from a PutV1MobileDevicePrestagesIdScopeWithResponse call
func ParsePutV1MobileDevicePrestagesIdScopeResponse(rsp *http.Response) (*PutV1MobileDevicePrestagesIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1MobileDevicePrestagesIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetV1MobileDevicesResponse parses an HTTP response from a GetV1MobileDevicesWithResponse call
func ParseGetV1MobileDevicesResponse(rsp *http.Response) (*GetV1MobileDevicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MobileDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MobileDevice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MobileDevicesIdResponse parses an HTTP response from a GetV1MobileDevicesIdWithResponse call
func ParseGetV1MobileDevicesIdResponse(rsp *http.Response) (*GetV1MobileDevicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MobileDevicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileDevice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchV1MobileDevicesIdResponse parses an HTTP response from a PatchV1MobileDevicesIdWithResponse call
func ParsePatchV1MobileDevicesIdResponse(rsp *http.Response) (*PatchV1MobileDevicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1MobileDevicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileDeviceDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1MobileDevicesIdDetailResponse parses an HTTP response from a GetV1MobileDevicesIdDetailWithResponse call
func ParseGetV1MobileDevicesIdDetailResponse(rsp *http.Response) (*GetV1MobileDevicesIdDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1MobileDevicesIdDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileDeviceDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1MobileDevicesIdRecalculateSmartGroupsResponse parses an HTTP response from a PostV1MobileDevicesIdRecalculateSmartGroupsWithResponse call
func ParsePostV1MobileDevicesIdRecalculateSmartGroupsResponse(rsp *http.Response) (*PostV1MobileDevicesIdRecalculateSmartGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MobileDevicesIdRecalculateSmartGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecalculationResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1NotificationsResponse parses an HTTP response from a GetV1NotificationsWithResponse call
func ParseGetV1NotificationsResponse(rsp *http.Response) (*GetV1NotificationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1NotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NotificationV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1NotificationsTypeIdResponse parses an HTTP response from a DeleteV1NotificationsTypeIdWithResponse call
func ParseDeleteV1NotificationsTypeIdResponse(rsp *http.Response) (*DeleteV1NotificationsTypeIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1NotificationsTypeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1ParentAppResponse parses an HTTP response from a GetV1ParentAppWithResponse call
func ParseGetV1ParentAppResponse(rsp *http.Response) (*GetV1ParentAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ParentAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ParentApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1ParentAppResponse parses an HTTP response from a PutV1ParentAppWithResponse call
func ParsePutV1ParentAppResponse(rsp *http.Response) (*PutV1ParentAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ParentAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ParentApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1ParentAppHistoryResponse parses an HTTP response from a GetV1ParentAppHistoryWithResponse call
func ParseGetV1ParentAppHistoryResponse(rsp *http.Response) (*GetV1ParentAppHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ParentAppHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ParentAppHistoryResponse parses an HTTP response from a PostV1ParentAppHistoryWithResponse call
func ParsePostV1ParentAppHistoryResponse(rsp *http.Response) (*PostV1ParentAppHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ParentAppHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1PkiCertificateAuthorityActiveResponse parses an HTTP response from a GetV1PkiCertificateAuthorityActiveWithResponse call
func ParseGetV1PkiCertificateAuthorityActiveResponse(rsp *http.Response) (*GetV1PkiCertificateAuthorityActiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PkiCertificateAuthorityActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1PkiCertificateAuthorityActiveDerResponse parses an HTTP response from a GetV1PkiCertificateAuthorityActiveDerWithResponse call
func ParseGetV1PkiCertificateAuthorityActiveDerResponse(rsp *http.Response) (*GetV1PkiCertificateAuthorityActiveDerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PkiCertificateAuthorityActiveDerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1PkiCertificateAuthorityActivePemResponse parses an HTTP response from a GetV1PkiCertificateAuthorityActivePemWithResponse call
func ParseGetV1PkiCertificateAuthorityActivePemResponse(rsp *http.Response) (*GetV1PkiCertificateAuthorityActivePemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PkiCertificateAuthorityActivePemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1PkiCertificateAuthorityIdResponse parses an HTTP response from a GetV1PkiCertificateAuthorityIdWithResponse call
func ParseGetV1PkiCertificateAuthorityIdResponse(rsp *http.Response) (*GetV1PkiCertificateAuthorityIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PkiCertificateAuthorityIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1PkiCertificateAuthorityIdDerResponse parses an HTTP response from a GetV1PkiCertificateAuthorityIdDerWithResponse call
func ParseGetV1PkiCertificateAuthorityIdDerResponse(rsp *http.Response) (*GetV1PkiCertificateAuthorityIdDerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PkiCertificateAuthorityIdDerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1PkiCertificateAuthorityIdPemResponse parses an HTTP response from a GetV1PkiCertificateAuthorityIdPemWithResponse call
func ParseGetV1PkiCertificateAuthorityIdPemResponse(rsp *http.Response) (*GetV1PkiCertificateAuthorityIdPemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PkiCertificateAuthorityIdPemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1PkiVenafiResponse parses an HTTP response from a PostV1PkiVenafiWithResponse call
func ParsePostV1PkiVenafiResponse(rsp *http.Response) (*PostV1PkiVenafiResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1PkiVenafiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV1PkiVenafiIdResponse parses an HTTP response from a DeleteV1PkiVenafiIdWithResponse call
func ParseDeleteV1PkiVenafiIdResponse(rsp *http.Response) (*DeleteV1PkiVenafiIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1PkiVenafiIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetV1PkiVenafiIdResponse parses an HTTP response from a GetV1PkiVenafiIdWithResponse call
func ParseGetV1PkiVenafiIdResponse(rsp *http.Response) (*GetV1PkiVenafiIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PkiVenafiIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VenafiCaRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV1PkiVenafiIdResponse parses an HTTP response from a PatchV1PkiVenafiIdWithResponse call
func ParsePatchV1PkiVenafiIdResponse(rsp *http.Response) (*PatchV1PkiVenafiIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1PkiVenafiIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VenafiCaRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1PkiVenafiIdConnectionStatusResponse parses an HTTP response from a GetV1PkiVenafiIdConnectionStatusWithResponse call
func ParseGetV1PkiVenafiIdConnectionStatusResponse(rsp *http.Response) (*GetV1PkiVenafiIdConnectionStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PkiVenafiIdConnectionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VenafiServiceStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1PkiVenafiIdDependentProfilesResponse parses an HTTP response from a GetV1PkiVenafiIdDependentProfilesWithResponse call
func ParseGetV1PkiVenafiIdDependentProfilesResponse(rsp *http.Response) (*GetV1PkiVenafiIdDependentProfilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PkiVenafiIdDependentProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VenafiPkiPayloadRecordSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1PkiVenafiIdHistoryResponse parses an HTTP response from a GetV1PkiVenafiIdHistoryWithResponse call
func ParseGetV1PkiVenafiIdHistoryResponse(rsp *http.Response) (*GetV1PkiVenafiIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PkiVenafiIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1PkiVenafiIdHistoryResponse parses an HTTP response from a PostV1PkiVenafiIdHistoryWithResponse call
func ParsePostV1PkiVenafiIdHistoryResponse(rsp *http.Response) (*PostV1PkiVenafiIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1PkiVenafiIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1PkiVenafiIdJamfPublicKeyResponse parses an HTTP response from a GetV1PkiVenafiIdJamfPublicKeyWithResponse call
func ParseGetV1PkiVenafiIdJamfPublicKeyResponse(rsp *http.Response) (*GetV1PkiVenafiIdJamfPublicKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PkiVenafiIdJamfPublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1PkiVenafiIdJamfPublicKeyRegenerateResponse parses an HTTP response from a PostV1PkiVenafiIdJamfPublicKeyRegenerateWithResponse call
func ParsePostV1PkiVenafiIdJamfPublicKeyRegenerateResponse(rsp *http.Response) (*PostV1PkiVenafiIdJamfPublicKeyRegenerateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1PkiVenafiIdJamfPublicKeyRegenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteV1PkiVenafiIdProxyTrustStoreResponse parses an HTTP response from a DeleteV1PkiVenafiIdProxyTrustStoreWithResponse call
func ParseDeleteV1PkiVenafiIdProxyTrustStoreResponse(rsp *http.Response) (*DeleteV1PkiVenafiIdProxyTrustStoreResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1PkiVenafiIdProxyTrustStoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1PkiVenafiIdProxyTrustStoreResponse parses an HTTP response from a GetV1PkiVenafiIdProxyTrustStoreWithResponse call
func ParseGetV1PkiVenafiIdProxyTrustStoreResponse(rsp *http.Response) (*GetV1PkiVenafiIdProxyTrustStoreResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PkiVenafiIdProxyTrustStoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1PkiVenafiIdProxyTrustStoreResponse parses an HTTP response from a PostV1PkiVenafiIdProxyTrustStoreWithResponse call
func ParsePostV1PkiVenafiIdProxyTrustStoreResponse(rsp *http.Response) (*PostV1PkiVenafiIdProxyTrustStoreResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1PkiVenafiIdProxyTrustStoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1PolicyPropertiesResponse parses an HTTP response from a GetV1PolicyPropertiesWithResponse call
func ParseGetV1PolicyPropertiesResponse(rsp *http.Response) (*GetV1PolicyPropertiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1PolicyPropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyPropertiesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1PolicyPropertiesResponse parses an HTTP response from a PutV1PolicyPropertiesWithResponse call
func ParsePutV1PolicyPropertiesResponse(rsp *http.Response) (*PutV1PolicyPropertiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1PolicyPropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyPropertiesV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1ReenrollmentResponse parses an HTTP response from a GetV1ReenrollmentWithResponse call
func ParseGetV1ReenrollmentResponse(rsp *http.Response) (*GetV1ReenrollmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ReenrollmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Reenrollment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1ReenrollmentResponse parses an HTTP response from a PutV1ReenrollmentWithResponse call
func ParsePutV1ReenrollmentResponse(rsp *http.Response) (*PutV1ReenrollmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ReenrollmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Reenrollment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetV1ReenrollmentHistoryResponse parses an HTTP response from a GetV1ReenrollmentHistoryWithResponse call
func ParseGetV1ReenrollmentHistoryResponse(rsp *http.Response) (*GetV1ReenrollmentHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ReenrollmentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ReenrollmentHistoryResponse parses an HTTP response from a PostV1ReenrollmentHistoryWithResponse call
func ParsePostV1ReenrollmentHistoryResponse(rsp *http.Response) (*PostV1ReenrollmentHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ReenrollmentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1ReenrollmentHistoryExportResponse parses an HTTP response from a PostV1ReenrollmentHistoryExportWithResponse call
func ParsePostV1ReenrollmentHistoryExportResponse(rsp *http.Response) (*PostV1ReenrollmentHistoryExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ReenrollmentHistoryExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1ScriptsResponse parses an HTTP response from a GetV1ScriptsWithResponse call
func ParseGetV1ScriptsResponse(rsp *http.Response) (*GetV1ScriptsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ScriptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScriptsSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ScriptsResponse parses an HTTP response from a PostV1ScriptsWithResponse call
func ParsePostV1ScriptsResponse(rsp *http.Response) (*PostV1ScriptsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ScriptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV1ScriptsIdResponse parses an HTTP response from a DeleteV1ScriptsIdWithResponse call
func ParseDeleteV1ScriptsIdResponse(rsp *http.Response) (*DeleteV1ScriptsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ScriptsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1ScriptsIdResponse parses an HTTP response from a GetV1ScriptsIdWithResponse call
func ParseGetV1ScriptsIdResponse(rsp *http.Response) (*GetV1ScriptsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ScriptsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Script
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1ScriptsIdResponse parses an HTTP response from a PutV1ScriptsIdWithResponse call
func ParsePutV1ScriptsIdResponse(rsp *http.Response) (*PutV1ScriptsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1ScriptsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Script
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1ScriptsIdDownloadResponse parses an HTTP response from a GetV1ScriptsIdDownloadWithResponse call
func ParseGetV1ScriptsIdDownloadResponse(rsp *http.Response) (*GetV1ScriptsIdDownloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ScriptsIdDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1ScriptsIdHistoryResponse parses an HTTP response from a GetV1ScriptsIdHistoryWithResponse call
func ParseGetV1ScriptsIdHistoryResponse(rsp *http.Response) (*GetV1ScriptsIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ScriptsIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1ScriptsIdHistoryResponse parses an HTTP response from a PostV1ScriptsIdHistoryWithResponse call
func ParsePostV1ScriptsIdHistoryResponse(rsp *http.Response) (*PostV1ScriptsIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ScriptsIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV1SearchMobileDevicesResponse parses an HTTP response from a PostV1SearchMobileDevicesWithResponse call
func ParsePostV1SearchMobileDevicesResponse(rsp *http.Response) (*PostV1SearchMobileDevicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SearchMobileDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileDeviceSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1SelfServiceBrandingIosResponse parses an HTTP response from a GetV1SelfServiceBrandingIosWithResponse call
func ParseGetV1SelfServiceBrandingIosResponse(rsp *http.Response) (*GetV1SelfServiceBrandingIosResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SelfServiceBrandingIosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IosBrandingSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1SelfServiceBrandingIosResponse parses an HTTP response from a PostV1SelfServiceBrandingIosWithResponse call
func ParsePostV1SelfServiceBrandingIosResponse(rsp *http.Response) (*PostV1SelfServiceBrandingIosResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SelfServiceBrandingIosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV1SelfServiceBrandingIosIdResponse parses an HTTP response from a DeleteV1SelfServiceBrandingIosIdWithResponse call
func ParseDeleteV1SelfServiceBrandingIosIdResponse(rsp *http.Response) (*DeleteV1SelfServiceBrandingIosIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1SelfServiceBrandingIosIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1SelfServiceBrandingIosIdResponse parses an HTTP response from a GetV1SelfServiceBrandingIosIdWithResponse call
func ParseGetV1SelfServiceBrandingIosIdResponse(rsp *http.Response) (*GetV1SelfServiceBrandingIosIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SelfServiceBrandingIosIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IosBrandingConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1SelfServiceBrandingIosIdResponse parses an HTTP response from a PutV1SelfServiceBrandingIosIdWithResponse call
func ParsePutV1SelfServiceBrandingIosIdResponse(rsp *http.Response) (*PutV1SelfServiceBrandingIosIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1SelfServiceBrandingIosIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IosBrandingConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1SelfServiceBrandingMacosResponse parses an HTTP response from a GetV1SelfServiceBrandingMacosWithResponse call
func ParseGetV1SelfServiceBrandingMacosResponse(rsp *http.Response) (*GetV1SelfServiceBrandingMacosResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SelfServiceBrandingMacosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MacOsBrandingSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1SelfServiceBrandingMacosResponse parses an HTTP response from a PostV1SelfServiceBrandingMacosWithResponse call
func ParsePostV1SelfServiceBrandingMacosResponse(rsp *http.Response) (*PostV1SelfServiceBrandingMacosResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SelfServiceBrandingMacosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV1SelfServiceBrandingMacosIdResponse parses an HTTP response from a DeleteV1SelfServiceBrandingMacosIdWithResponse call
func ParseDeleteV1SelfServiceBrandingMacosIdResponse(rsp *http.Response) (*DeleteV1SelfServiceBrandingMacosIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1SelfServiceBrandingMacosIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1SelfServiceBrandingMacosIdResponse parses an HTTP response from a GetV1SelfServiceBrandingMacosIdWithResponse call
func ParseGetV1SelfServiceBrandingMacosIdResponse(rsp *http.Response) (*GetV1SelfServiceBrandingMacosIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SelfServiceBrandingMacosIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MacOsBrandingConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1SelfServiceBrandingMacosIdResponse parses an HTTP response from a PutV1SelfServiceBrandingMacosIdWithResponse call
func ParsePutV1SelfServiceBrandingMacosIdResponse(rsp *http.Response) (*PutV1SelfServiceBrandingMacosIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1SelfServiceBrandingMacosIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MacOsBrandingConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1SelfServiceSettingsResponse parses an HTTP response from a GetV1SelfServiceSettingsWithResponse call
func ParseGetV1SelfServiceSettingsResponse(rsp *http.Response) (*GetV1SelfServiceSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SelfServiceSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SelfServiceSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1SelfServiceSettingsResponse parses an HTTP response from a PutV1SelfServiceSettingsWithResponse call
func ParsePutV1SelfServiceSettingsResponse(rsp *http.Response) (*PutV1SelfServiceSettingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1SelfServiceSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SelfServiceSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1SitesResponse parses an HTTP response from a GetV1SitesWithResponse call
func ParseGetV1SitesResponse(rsp *http.Response) (*GetV1SitesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []V1Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1SmartComputerGroupsIdRecalculateResponse parses an HTTP response from a PostV1SmartComputerGroupsIdRecalculateWithResponse call
func ParsePostV1SmartComputerGroupsIdRecalculateResponse(rsp *http.Response) (*PostV1SmartComputerGroupsIdRecalculateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SmartComputerGroupsIdRecalculateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecalculationResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV1SmartMobileDeviceGroupsIdRecalculateResponse parses an HTTP response from a PostV1SmartMobileDeviceGroupsIdRecalculateWithResponse call
func ParsePostV1SmartMobileDeviceGroupsIdRecalculateResponse(rsp *http.Response) (*PostV1SmartMobileDeviceGroupsIdRecalculateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SmartMobileDeviceGroupsIdRecalculateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecalculationResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV1SmartUserGroupsIdRecalculateResponse parses an HTTP response from a PostV1SmartUserGroupsIdRecalculateWithResponse call
func ParsePostV1SmartUserGroupsIdRecalculateResponse(rsp *http.Response) (*PostV1SmartUserGroupsIdRecalculateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SmartUserGroupsIdRecalculateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecalculationResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1SsoResponse parses an HTTP response from a GetV1SsoWithResponse call
func ParseGetV1SsoResponse(rsp *http.Response) (*GetV1SsoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SsoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1SsoResponse parses an HTTP response from a PutV1SsoWithResponse call
func ParsePutV1SsoResponse(rsp *http.Response) (*PutV1SsoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1SsoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV1SsoCertResponse parses an HTTP response from a DeleteV1SsoCertWithResponse call
func ParseDeleteV1SsoCertResponse(rsp *http.Response) (*DeleteV1SsoCertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1SsoCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1SsoCertResponse parses an HTTP response from a GetV1SsoCertWithResponse call
func ParseGetV1SsoCertResponse(rsp *http.Response) (*GetV1SsoCertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SsoCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoKeystoreWithDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1SsoCertResponse parses an HTTP response from a PostV1SsoCertWithResponse call
func ParsePostV1SsoCertResponse(rsp *http.Response) (*PostV1SsoCertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SsoCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoKeystoreWithDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1SsoCertResponse parses an HTTP response from a PutV1SsoCertWithResponse call
func ParsePutV1SsoCertResponse(rsp *http.Response) (*PutV1SsoCertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1SsoCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoKeystoreWithDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1SsoCertDownloadResponse parses an HTTP response from a GetV1SsoCertDownloadWithResponse call
func ParseGetV1SsoCertDownloadResponse(rsp *http.Response) (*GetV1SsoCertDownloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SsoCertDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV1SsoCertParseResponse parses an HTTP response from a PostV1SsoCertParseWithResponse call
func ParsePostV1SsoCertParseResponse(rsp *http.Response) (*PostV1SsoCertParseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SsoCertParseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoKeystoreCertParseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1SsoDependenciesResponse parses an HTTP response from a GetV1SsoDependenciesWithResponse call
func ParseGetV1SsoDependenciesResponse(rsp *http.Response) (*GetV1SsoDependenciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SsoDependenciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentCustomizationDependencies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1SsoDisableResponse parses an HTTP response from a PostV1SsoDisableWithResponse call
func ParsePostV1SsoDisableResponse(rsp *http.Response) (*PostV1SsoDisableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SsoDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1SsoHistoryResponse parses an HTTP response from a GetV1SsoHistoryWithResponse call
func ParseGetV1SsoHistoryResponse(rsp *http.Response) (*GetV1SsoHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SsoHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1SsoHistoryResponse parses an HTTP response from a PostV1SsoHistoryWithResponse call
func ParsePostV1SsoHistoryResponse(rsp *http.Response) (*PostV1SsoHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SsoHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1SsoMetadataDownloadResponse parses an HTTP response from a GetV1SsoMetadataDownloadWithResponse call
func ParseGetV1SsoMetadataDownloadResponse(rsp *http.Response) (*GetV1SsoMetadataDownloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SsoMetadataDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV1SsoValidateResponse parses an HTTP response from a PostV1SsoValidateWithResponse call
func ParsePostV1SsoValidateResponse(rsp *http.Response) (*PostV1SsoValidateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SsoValidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1StaticUserGroupsResponse parses an HTTP response from a GetV1StaticUserGroupsWithResponse call
func ParseGetV1StaticUserGroupsResponse(rsp *http.Response) (*GetV1StaticUserGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1StaticUserGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StaticUserGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1StaticUserGroupsIdResponse parses an HTTP response from a GetV1StaticUserGroupsIdWithResponse call
func ParseGetV1StaticUserGroupsIdResponse(rsp *http.Response) (*GetV1StaticUserGroupsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1StaticUserGroupsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StaticUserGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1SupervisionIdentitiesResponse parses an HTTP response from a GetV1SupervisionIdentitiesWithResponse call
func ParseGetV1SupervisionIdentitiesResponse(rsp *http.Response) (*GetV1SupervisionIdentitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SupervisionIdentitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SupervisionIdentitySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1SupervisionIdentitiesResponse parses an HTTP response from a PostV1SupervisionIdentitiesWithResponse call
func ParsePostV1SupervisionIdentitiesResponse(rsp *http.Response) (*PostV1SupervisionIdentitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SupervisionIdentitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SupervisionIdentity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1SupervisionIdentitiesUploadResponse parses an HTTP response from a PostV1SupervisionIdentitiesUploadWithResponse call
func ParsePostV1SupervisionIdentitiesUploadResponse(rsp *http.Response) (*PostV1SupervisionIdentitiesUploadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SupervisionIdentitiesUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SupervisionIdentity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1SupervisionIdentitiesIdResponse parses an HTTP response from a DeleteV1SupervisionIdentitiesIdWithResponse call
func ParseDeleteV1SupervisionIdentitiesIdResponse(rsp *http.Response) (*DeleteV1SupervisionIdentitiesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1SupervisionIdentitiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1SupervisionIdentitiesIdResponse parses an HTTP response from a GetV1SupervisionIdentitiesIdWithResponse call
func ParseGetV1SupervisionIdentitiesIdResponse(rsp *http.Response) (*GetV1SupervisionIdentitiesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SupervisionIdentitiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SupervisionIdentity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1SupervisionIdentitiesIdResponse parses an HTTP response from a PutV1SupervisionIdentitiesIdWithResponse call
func ParsePutV1SupervisionIdentitiesIdResponse(rsp *http.Response) (*PutV1SupervisionIdentitiesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1SupervisionIdentitiesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SupervisionIdentity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1SupervisionIdentitiesIdDownloadResponse parses an HTTP response from a GetV1SupervisionIdentitiesIdDownloadWithResponse call
func ParseGetV1SupervisionIdentitiesIdDownloadResponse(rsp *http.Response) (*GetV1SupervisionIdentitiesIdDownloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SupervisionIdentitiesIdDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1SystemInitializeResponse parses an HTTP response from a PostV1SystemInitializeWithResponse call
func ParsePostV1SystemInitializeResponse(rsp *http.Response) (*PostV1SystemInitializeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SystemInitializeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV1SystemInitializeDatabaseConnectionResponse parses an HTTP response from a PostV1SystemInitializeDatabaseConnectionWithResponse call
func ParsePostV1SystemInitializeDatabaseConnectionResponse(rsp *http.Response) (*PostV1SystemInitializeDatabaseConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SystemInitializeDatabaseConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetV1TeacherAppResponse parses an HTTP response from a GetV1TeacherAppWithResponse call
func ParseGetV1TeacherAppResponse(rsp *http.Response) (*GetV1TeacherAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1TeacherAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeacherSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1TeacherAppResponse parses an HTTP response from a PutV1TeacherAppWithResponse call
func ParsePutV1TeacherAppResponse(rsp *http.Response) (*PutV1TeacherAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1TeacherAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeacherSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1TeacherAppHistoryResponse parses an HTTP response from a GetV1TeacherAppHistoryWithResponse call
func ParseGetV1TeacherAppHistoryResponse(rsp *http.Response) (*GetV1TeacherAppHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1TeacherAppHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1TeacherAppHistoryResponse parses an HTTP response from a PostV1TeacherAppHistoryWithResponse call
func ParsePostV1TeacherAppHistoryResponse(rsp *http.Response) (*PostV1TeacherAppHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1TeacherAppHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV1TimeZonesResponse parses an HTTP response from a GetV1TimeZonesWithResponse call
func ParseGetV1TimeZonesResponse(rsp *http.Response) (*GetV1TimeZonesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1TimeZonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TimeZone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV1UserPreferencesKeyIdResponse parses an HTTP response from a DeleteV1UserPreferencesKeyIdWithResponse call
func ParseDeleteV1UserPreferencesKeyIdResponse(rsp *http.Response) (*DeleteV1UserPreferencesKeyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1UserPreferencesKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1UserPreferencesKeyIdResponse parses an HTTP response from a GetV1UserPreferencesKeyIdWithResponse call
func ParseGetV1UserPreferencesKeyIdResponse(rsp *http.Response) (*GetV1UserPreferencesKeyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1UserPreferencesKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPreferencesJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV1UserPreferencesKeyIdResponse parses an HTTP response from a PutV1UserPreferencesKeyIdWithResponse call
func ParsePutV1UserPreferencesKeyIdResponse(rsp *http.Response) (*PutV1UserPreferencesKeyIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1UserPreferencesKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPreferencesJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1UsersIdRecalculateSmartGroupsResponse parses an HTTP response from a PostV1UsersIdRecalculateSmartGroupsWithResponse call
func ParsePostV1UsersIdRecalculateSmartGroupsResponse(rsp *http.Response) (*PostV1UsersIdRecalculateSmartGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1UsersIdRecalculateSmartGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecalculationResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV1VolumePurchasingLocationsResponse parses an HTTP response from a GetV1VolumePurchasingLocationsWithResponse call
func ParseGetV1VolumePurchasingLocationsResponse(rsp *http.Response) (*GetV1VolumePurchasingLocationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1VolumePurchasingLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumePurchasingLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1VolumePurchasingLocationsResponse parses an HTTP response from a PostV1VolumePurchasingLocationsWithResponse call
func ParsePostV1VolumePurchasingLocationsResponse(rsp *http.Response) (*PostV1VolumePurchasingLocationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1VolumePurchasingLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV1VolumePurchasingLocationsIdResponse parses an HTTP response from a DeleteV1VolumePurchasingLocationsIdWithResponse call
func ParseDeleteV1VolumePurchasingLocationsIdResponse(rsp *http.Response) (*DeleteV1VolumePurchasingLocationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1VolumePurchasingLocationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1VolumePurchasingLocationsIdResponse parses an HTTP response from a GetV1VolumePurchasingLocationsIdWithResponse call
func ParseGetV1VolumePurchasingLocationsIdResponse(rsp *http.Response) (*GetV1VolumePurchasingLocationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1VolumePurchasingLocationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumePurchasingLocation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV1VolumePurchasingLocationsIdResponse parses an HTTP response from a PatchV1VolumePurchasingLocationsIdWithResponse call
func ParsePatchV1VolumePurchasingLocationsIdResponse(rsp *http.Response) (*PatchV1VolumePurchasingLocationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV1VolumePurchasingLocationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumePurchasingLocation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetV1VolumePurchasingLocationsIdHistoryResponse parses an HTTP response from a GetV1VolumePurchasingLocationsIdHistoryWithResponse call
func ParseGetV1VolumePurchasingLocationsIdHistoryResponse(rsp *http.Response) (*GetV1VolumePurchasingLocationsIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1VolumePurchasingLocationsIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV1VolumePurchasingLocationsIdReclaimResponse parses an HTTP response from a PostV1VolumePurchasingLocationsIdReclaimWithResponse call
func ParsePostV1VolumePurchasingLocationsIdReclaimResponse(rsp *http.Response) (*PostV1VolumePurchasingLocationsIdReclaimResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1VolumePurchasingLocationsIdReclaimResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV1VolumePurchasingLocationsIdRevokeLicensesResponse parses an HTTP response from a PostV1VolumePurchasingLocationsIdRevokeLicensesWithResponse call
func ParsePostV1VolumePurchasingLocationsIdRevokeLicensesResponse(rsp *http.Response) (*PostV1VolumePurchasingLocationsIdRevokeLicensesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1VolumePurchasingLocationsIdRevokeLicensesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1VolumePurchasingSubscriptionsResponse parses an HTTP response from a GetV1VolumePurchasingSubscriptionsWithResponse call
func ParseGetV1VolumePurchasingSubscriptionsResponse(rsp *http.Response) (*GetV1VolumePurchasingSubscriptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1VolumePurchasingSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumePurchasingSubscriptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1VolumePurchasingSubscriptionsResponse parses an HTTP response from a PostV1VolumePurchasingSubscriptionsWithResponse call
func ParsePostV1VolumePurchasingSubscriptionsResponse(rsp *http.Response) (*PostV1VolumePurchasingSubscriptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1VolumePurchasingSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1VolumePurchasingSubscriptionsIdResponse parses an HTTP response from a DeleteV1VolumePurchasingSubscriptionsIdWithResponse call
func ParseDeleteV1VolumePurchasingSubscriptionsIdResponse(rsp *http.Response) (*DeleteV1VolumePurchasingSubscriptionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1VolumePurchasingSubscriptionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1VolumePurchasingSubscriptionsIdResponse parses an HTTP response from a GetV1VolumePurchasingSubscriptionsIdWithResponse call
func ParseGetV1VolumePurchasingSubscriptionsIdResponse(rsp *http.Response) (*GetV1VolumePurchasingSubscriptionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1VolumePurchasingSubscriptionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumePurchasingSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1VolumePurchasingSubscriptionsIdResponse parses an HTTP response from a PutV1VolumePurchasingSubscriptionsIdWithResponse call
func ParsePutV1VolumePurchasingSubscriptionsIdResponse(rsp *http.Response) (*PutV1VolumePurchasingSubscriptionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1VolumePurchasingSubscriptionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VolumePurchasingSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV2CheckInResponse parses an HTTP response from a GetV2CheckInWithResponse call
func ParseGetV2CheckInResponse(rsp *http.Response) (*GetV2CheckInResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CheckInResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientCheckInV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV2CheckInResponse parses an HTTP response from a PutV2CheckInWithResponse call
func ParsePutV2CheckInResponse(rsp *http.Response) (*PutV2CheckInResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2CheckInResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientCheckInV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2CheckInHistoryResponse parses an HTTP response from a GetV2CheckInHistoryWithResponse call
func ParseGetV2CheckInHistoryResponse(rsp *http.Response) (*GetV2CheckInHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CheckInHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResultsV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2CheckInHistoryResponse parses an HTTP response from a PostV2CheckInHistoryWithResponse call
func ParsePostV2CheckInHistoryResponse(rsp *http.Response) (*PostV2CheckInHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2CheckInHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV2CloudLdapsResponse parses an HTTP response from a PostV2CloudLdapsWithResponse call
func ParsePostV2CloudLdapsResponse(rsp *http.Response) (*PostV2CloudLdapsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2CloudLdapsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2CloudLdapsDefaultsProviderMappingsResponse parses an HTTP response from a GetV2CloudLdapsDefaultsProviderMappingsWithResponse call
func ParseGetV2CloudLdapsDefaultsProviderMappingsResponse(rsp *http.Response) (*GetV2CloudLdapsDefaultsProviderMappingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CloudLdapsDefaultsProviderMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudLdapMappingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2CloudLdapsDefaultsProviderServerConfigurationResponse parses an HTTP response from a GetV2CloudLdapsDefaultsProviderServerConfigurationWithResponse call
func ParseGetV2CloudLdapsDefaultsProviderServerConfigurationResponse(rsp *http.Response) (*GetV2CloudLdapsDefaultsProviderServerConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CloudLdapsDefaultsProviderServerConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudLdapServerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteV2CloudLdapsIdResponse parses an HTTP response from a DeleteV2CloudLdapsIdWithResponse call
func ParseDeleteV2CloudLdapsIdResponse(rsp *http.Response) (*DeleteV2CloudLdapsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2CloudLdapsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2CloudLdapsIdResponse parses an HTTP response from a GetV2CloudLdapsIdWithResponse call
func ParseGetV2CloudLdapsIdResponse(rsp *http.Response) (*GetV2CloudLdapsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CloudLdapsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LdapConfigurationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV2CloudLdapsIdResponse parses an HTTP response from a PutV2CloudLdapsIdWithResponse call
func ParsePutV2CloudLdapsIdResponse(rsp *http.Response) (*PutV2CloudLdapsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2CloudLdapsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LdapConfigurationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetV2CloudLdapsIdConnectionBindResponse parses an HTTP response from a GetV2CloudLdapsIdConnectionBindWithResponse call
func ParseGetV2CloudLdapsIdConnectionBindResponse(rsp *http.Response) (*GetV2CloudLdapsIdConnectionBindResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CloudLdapsIdConnectionBindResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudLdapConnectionPoolStatistics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2CloudLdapsIdConnectionSearchResponse parses an HTTP response from a GetV2CloudLdapsIdConnectionSearchWithResponse call
func ParseGetV2CloudLdapsIdConnectionSearchResponse(rsp *http.Response) (*GetV2CloudLdapsIdConnectionSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CloudLdapsIdConnectionSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudLdapConnectionPoolStatistics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2CloudLdapsIdConnectionStatusResponse parses an HTTP response from a GetV2CloudLdapsIdConnectionStatusWithResponse call
func ParseGetV2CloudLdapsIdConnectionStatusResponse(rsp *http.Response) (*GetV2CloudLdapsIdConnectionStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CloudLdapsIdConnectionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudLdapConnectionStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2CloudLdapsIdMappingsResponse parses an HTTP response from a GetV2CloudLdapsIdMappingsWithResponse call
func ParseGetV2CloudLdapsIdMappingsResponse(rsp *http.Response) (*GetV2CloudLdapsIdMappingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CloudLdapsIdMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudLdapMappingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV2CloudLdapsIdMappingsResponse parses an HTTP response from a PutV2CloudLdapsIdMappingsWithResponse call
func ParsePutV2CloudLdapsIdMappingsResponse(rsp *http.Response) (*PutV2CloudLdapsIdMappingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2CloudLdapsIdMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudLdapMappingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetV2ComputerPrestagesResponse parses an HTTP response from a GetV2ComputerPrestagesWithResponse call
func ParseGetV2ComputerPrestagesResponse(rsp *http.Response) (*GetV2ComputerPrestagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ComputerPrestagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputerPrestageSearchResultsV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2ComputerPrestagesResponse parses an HTTP response from a PostV2ComputerPrestagesWithResponse call
func ParsePostV2ComputerPrestagesResponse(rsp *http.Response) (*PostV2ComputerPrestagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2ComputerPrestagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2ComputerPrestagesScopeResponse parses an HTTP response from a GetV2ComputerPrestagesScopeWithResponse call
func ParseGetV2ComputerPrestagesScopeResponse(rsp *http.Response) (*GetV2ComputerPrestagesScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ComputerPrestagesScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV2ComputerPrestagesIdResponse parses an HTTP response from a DeleteV2ComputerPrestagesIdWithResponse call
func ParseDeleteV2ComputerPrestagesIdResponse(rsp *http.Response) (*DeleteV2ComputerPrestagesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2ComputerPrestagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2ComputerPrestagesIdResponse parses an HTTP response from a GetV2ComputerPrestagesIdWithResponse call
func ParseGetV2ComputerPrestagesIdResponse(rsp *http.Response) (*GetV2ComputerPrestagesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ComputerPrestagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetComputerPrestageV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV2ComputerPrestagesIdResponse parses an HTTP response from a PutV2ComputerPrestagesIdWithResponse call
func ParsePutV2ComputerPrestagesIdResponse(rsp *http.Response) (*PutV2ComputerPrestagesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2ComputerPrestagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetComputerPrestageV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetV2ComputerPrestagesIdScopeResponse parses an HTTP response from a GetV2ComputerPrestagesIdScopeWithResponse call
func ParseGetV2ComputerPrestagesIdScopeResponse(rsp *http.Response) (*GetV2ComputerPrestagesIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ComputerPrestagesIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV2ComputerPrestagesIdScopeResponse parses an HTTP response from a PostV2ComputerPrestagesIdScopeWithResponse call
func ParsePostV2ComputerPrestagesIdScopeResponse(rsp *http.Response) (*PostV2ComputerPrestagesIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2ComputerPrestagesIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePutV2ComputerPrestagesIdScopeResponse parses an HTTP response from a PutV2ComputerPrestagesIdScopeWithResponse call
func ParsePutV2ComputerPrestagesIdScopeResponse(rsp *http.Response) (*PutV2ComputerPrestagesIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2ComputerPrestagesIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePostV2ComputerPrestagesIdScopeDeleteMultipleResponse parses an HTTP response from a PostV2ComputerPrestagesIdScopeDeleteMultipleWithResponse call
func ParsePostV2ComputerPrestagesIdScopeDeleteMultipleResponse(rsp *http.Response) (*PostV2ComputerPrestagesIdScopeDeleteMultipleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2ComputerPrestagesIdScopeDeleteMultipleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetV2EnrollmentResponse parses an HTTP response from a GetV2EnrollmentWithResponse call
func ParseGetV2EnrollmentResponse(rsp *http.Response) (*GetV2EnrollmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2EnrollmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentSettingsV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV2EnrollmentResponse parses an HTTP response from a PutV2EnrollmentWithResponse call
func ParsePutV2EnrollmentResponse(rsp *http.Response) (*PutV2EnrollmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2EnrollmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentSettingsV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2EnrollmentCustomizationsResponse parses an HTTP response from a GetV2EnrollmentCustomizationsWithResponse call
func ParseGetV2EnrollmentCustomizationsResponse(rsp *http.Response) (*GetV2EnrollmentCustomizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2EnrollmentCustomizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentCustomizationSearchResultsV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2EnrollmentCustomizationsResponse parses an HTTP response from a PostV2EnrollmentCustomizationsWithResponse call
func ParsePostV2EnrollmentCustomizationsResponse(rsp *http.Response) (*PostV2EnrollmentCustomizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2EnrollmentCustomizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostV2EnrollmentCustomizationsImagesResponse parses an HTTP response from a PostV2EnrollmentCustomizationsImagesWithResponse call
func ParsePostV2EnrollmentCustomizationsImagesResponse(rsp *http.Response) (*PostV2EnrollmentCustomizationsImagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2EnrollmentCustomizationsImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BrandingImageUrl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteV2EnrollmentCustomizationsIdResponse parses an HTTP response from a DeleteV2EnrollmentCustomizationsIdWithResponse call
func ParseDeleteV2EnrollmentCustomizationsIdResponse(rsp *http.Response) (*DeleteV2EnrollmentCustomizationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2EnrollmentCustomizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2EnrollmentCustomizationsIdResponse parses an HTTP response from a GetV2EnrollmentCustomizationsIdWithResponse call
func ParseGetV2EnrollmentCustomizationsIdResponse(rsp *http.Response) (*GetV2EnrollmentCustomizationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2EnrollmentCustomizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentCustomizationV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV2EnrollmentCustomizationsIdResponse parses an HTTP response from a PutV2EnrollmentCustomizationsIdWithResponse call
func ParsePutV2EnrollmentCustomizationsIdResponse(rsp *http.Response) (*PutV2EnrollmentCustomizationsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2EnrollmentCustomizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentCustomizationV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2EnrollmentCustomizationsIdHistoryResponse parses an HTTP response from a GetV2EnrollmentCustomizationsIdHistoryWithResponse call
func ParseGetV2EnrollmentCustomizationsIdHistoryResponse(rsp *http.Response) (*GetV2EnrollmentCustomizationsIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2EnrollmentCustomizationsIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2EnrollmentCustomizationsIdHistoryResponse parses an HTTP response from a PostV2EnrollmentCustomizationsIdHistoryWithResponse call
func ParsePostV2EnrollmentCustomizationsIdHistoryResponse(rsp *http.Response) (*PostV2EnrollmentCustomizationsIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2EnrollmentCustomizationsIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ObjectHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV2EnrollmentCustomizationsIdPrestagesResponse parses an HTTP response from a GetV2EnrollmentCustomizationsIdPrestagesWithResponse call
func ParseGetV2EnrollmentCustomizationsIdPrestagesResponse(rsp *http.Response) (*GetV2EnrollmentCustomizationsIdPrestagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2EnrollmentCustomizationsIdPrestagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageDependencies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2EnrollmentAccessGroupsResponse parses an HTTP response from a GetV2EnrollmentAccessGroupsWithResponse call
func ParseGetV2EnrollmentAccessGroupsResponse(rsp *http.Response) (*GetV2EnrollmentAccessGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2EnrollmentAccessGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessGroupsV2SearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2EnrollmentAccessGroupsResponse parses an HTTP response from a PostV2EnrollmentAccessGroupsWithResponse call
func ParsePostV2EnrollmentAccessGroupsResponse(rsp *http.Response) (*PostV2EnrollmentAccessGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2EnrollmentAccessGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV2EnrollmentAccessGroupsServerIdGroupIdResponse parses an HTTP response from a DeleteV2EnrollmentAccessGroupsServerIdGroupIdWithResponse call
func ParseDeleteV2EnrollmentAccessGroupsServerIdGroupIdResponse(rsp *http.Response) (*DeleteV2EnrollmentAccessGroupsServerIdGroupIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2EnrollmentAccessGroupsServerIdGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2EnrollmentAccessGroupsServerIdGroupIdResponse parses an HTTP response from a GetV2EnrollmentAccessGroupsServerIdGroupIdWithResponse call
func ParseGetV2EnrollmentAccessGroupsServerIdGroupIdResponse(rsp *http.Response) (*GetV2EnrollmentAccessGroupsServerIdGroupIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2EnrollmentAccessGroupsServerIdGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentAccessGroupV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV2EnrollmentAccessGroupsServerIdGroupIdResponse parses an HTTP response from a PutV2EnrollmentAccessGroupsServerIdGroupIdWithResponse call
func ParsePutV2EnrollmentAccessGroupsServerIdGroupIdResponse(rsp *http.Response) (*PutV2EnrollmentAccessGroupsServerIdGroupIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2EnrollmentAccessGroupsServerIdGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentAccessGroupV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2EnrollmentFilteredLanguageCodesResponse parses an HTTP response from a GetV2EnrollmentFilteredLanguageCodesWithResponse call
func ParseGetV2EnrollmentFilteredLanguageCodesResponse(rsp *http.Response) (*GetV2EnrollmentFilteredLanguageCodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2EnrollmentFilteredLanguageCodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LanguageCode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2EnrollmentHistoryResponse parses an HTTP response from a GetV2EnrollmentHistoryWithResponse call
func ParseGetV2EnrollmentHistoryResponse(rsp *http.Response) (*GetV2EnrollmentHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2EnrollmentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2EnrollmentHistoryResponse parses an HTTP response from a PostV2EnrollmentHistoryWithResponse call
func ParsePostV2EnrollmentHistoryResponse(rsp *http.Response) (*PostV2EnrollmentHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2EnrollmentHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostV2EnrollmentHistoryExportResponse parses an HTTP response from a PostV2EnrollmentHistoryExportWithResponse call
func ParsePostV2EnrollmentHistoryExportResponse(rsp *http.Response) (*PostV2EnrollmentHistoryExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2EnrollmentHistoryExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV2EnrollmentLanguageCodesResponse parses an HTTP response from a GetV2EnrollmentLanguageCodesWithResponse call
func ParseGetV2EnrollmentLanguageCodesResponse(rsp *http.Response) (*GetV2EnrollmentLanguageCodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2EnrollmentLanguageCodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LanguageCode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2EnrollmentLanguagesResponse parses an HTTP response from a GetV2EnrollmentLanguagesWithResponse call
func ParseGetV2EnrollmentLanguagesResponse(rsp *http.Response) (*GetV2EnrollmentLanguagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2EnrollmentLanguagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProcessTextsSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2EnrollmentLanguagesDeleteMultipleResponse parses an HTTP response from a PostV2EnrollmentLanguagesDeleteMultipleWithResponse call
func ParsePostV2EnrollmentLanguagesDeleteMultipleResponse(rsp *http.Response) (*PostV2EnrollmentLanguagesDeleteMultipleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2EnrollmentLanguagesDeleteMultipleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV2EnrollmentLanguagesLanguageIdResponse parses an HTTP response from a DeleteV2EnrollmentLanguagesLanguageIdWithResponse call
func ParseDeleteV2EnrollmentLanguagesLanguageIdResponse(rsp *http.Response) (*DeleteV2EnrollmentLanguagesLanguageIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2EnrollmentLanguagesLanguageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2EnrollmentLanguagesLanguageIdResponse parses an HTTP response from a GetV2EnrollmentLanguagesLanguageIdWithResponse call
func ParseGetV2EnrollmentLanguagesLanguageIdResponse(rsp *http.Response) (*GetV2EnrollmentLanguagesLanguageIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2EnrollmentLanguagesLanguageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentProcessTextObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV2EnrollmentLanguagesLanguageIdResponse parses an HTTP response from a PutV2EnrollmentLanguagesLanguageIdWithResponse call
func ParsePutV2EnrollmentLanguagesLanguageIdResponse(rsp *http.Response) (*PutV2EnrollmentLanguagesLanguageIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2EnrollmentLanguagesLanguageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrollmentProcessTextObject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2InventoryPreloadCsvResponse parses an HTTP response from a GetV2InventoryPreloadCsvWithResponse call
func ParseGetV2InventoryPreloadCsvResponse(rsp *http.Response) (*GetV2InventoryPreloadCsvResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2InventoryPreloadCsvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV2InventoryPreloadCsvResponse parses an HTTP response from a PostV2InventoryPreloadCsvWithResponse call
func ParsePostV2InventoryPreloadCsvResponse(rsp *http.Response) (*PostV2InventoryPreloadCsvResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2InventoryPreloadCsvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InventoryPreloadCsvValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2InventoryPreloadCsvTemplateResponse parses an HTTP response from a GetV2InventoryPreloadCsvTemplateWithResponse call
func ParseGetV2InventoryPreloadCsvTemplateResponse(rsp *http.Response) (*GetV2InventoryPreloadCsvTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2InventoryPreloadCsvTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV2InventoryPreloadCsvValidateResponse parses an HTTP response from a PostV2InventoryPreloadCsvValidateWithResponse call
func ParsePostV2InventoryPreloadCsvValidateResponse(rsp *http.Response) (*PostV2InventoryPreloadCsvValidateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2InventoryPreloadCsvValidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryPreloadCsvValidationSuccess
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InventoryPreloadCsvValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2InventoryPreloadEaColumnsResponse parses an HTTP response from a GetV2InventoryPreloadEaColumnsWithResponse call
func ParseGetV2InventoryPreloadEaColumnsResponse(rsp *http.Response) (*GetV2InventoryPreloadEaColumnsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2InventoryPreloadEaColumnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryPreloadExtensionAttributeColumnResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2InventoryPreloadExportResponse parses an HTTP response from a PostV2InventoryPreloadExportWithResponse call
func ParsePostV2InventoryPreloadExportResponse(rsp *http.Response) (*PostV2InventoryPreloadExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2InventoryPreloadExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV2InventoryPreloadHistoryResponse parses an HTTP response from a GetV2InventoryPreloadHistoryWithResponse call
func ParseGetV2InventoryPreloadHistoryResponse(rsp *http.Response) (*GetV2InventoryPreloadHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2InventoryPreloadHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2InventoryPreloadHistoryResponse parses an HTTP response from a PostV2InventoryPreloadHistoryWithResponse call
func ParsePostV2InventoryPreloadHistoryResponse(rsp *http.Response) (*PostV2InventoryPreloadHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2InventoryPreloadHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV2InventoryPreloadRecordsResponse parses an HTTP response from a GetV2InventoryPreloadRecordsWithResponse call
func ParseGetV2InventoryPreloadRecordsResponse(rsp *http.Response) (*GetV2InventoryPreloadRecordsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2InventoryPreloadRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryPreloadRecordSearchResultsV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2InventoryPreloadRecordsResponse parses an HTTP response from a PostV2InventoryPreloadRecordsWithResponse call
func ParsePostV2InventoryPreloadRecordsResponse(rsp *http.Response) (*PostV2InventoryPreloadRecordsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2InventoryPreloadRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV2InventoryPreloadRecordsDeleteAllResponse parses an HTTP response from a PostV2InventoryPreloadRecordsDeleteAllWithResponse call
func ParsePostV2InventoryPreloadRecordsDeleteAllResponse(rsp *http.Response) (*PostV2InventoryPreloadRecordsDeleteAllResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2InventoryPreloadRecordsDeleteAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteV2InventoryPreloadRecordsIdResponse parses an HTTP response from a DeleteV2InventoryPreloadRecordsIdWithResponse call
func ParseDeleteV2InventoryPreloadRecordsIdResponse(rsp *http.Response) (*DeleteV2InventoryPreloadRecordsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2InventoryPreloadRecordsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2InventoryPreloadRecordsIdResponse parses an HTTP response from a GetV2InventoryPreloadRecordsIdWithResponse call
func ParseGetV2InventoryPreloadRecordsIdResponse(rsp *http.Response) (*GetV2InventoryPreloadRecordsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2InventoryPreloadRecordsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryPreloadRecordV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV2InventoryPreloadRecordsIdResponse parses an HTTP response from a PutV2InventoryPreloadRecordsIdWithResponse call
func ParsePutV2InventoryPreloadRecordsIdResponse(rsp *http.Response) (*PutV2InventoryPreloadRecordsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2InventoryPreloadRecordsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryPreloadRecordV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2JamfPackageResponse parses an HTTP response from a GetV2JamfPackageWithResponse call
func ParseGetV2JamfPackageResponse(rsp *http.Response) (*GetV2JamfPackageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2JamfPackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JamfApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2JamfProInformationResponse parses an HTTP response from a GetV2JamfProInformationWithResponse call
func ParseGetV2JamfProInformationResponse(rsp *http.Response) (*GetV2JamfProInformationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2JamfProInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JamfProInformationV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2MobileDevicePrestagesResponse parses an HTTP response from a GetV2MobileDevicePrestagesWithResponse call
func ParseGetV2MobileDevicePrestagesResponse(rsp *http.Response) (*GetV2MobileDevicePrestagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MobileDevicePrestagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileDevicePrestageSearchResultsV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2MobileDevicePrestagesResponse parses an HTTP response from a PostV2MobileDevicePrestagesWithResponse call
func ParsePostV2MobileDevicePrestagesResponse(rsp *http.Response) (*PostV2MobileDevicePrestagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2MobileDevicePrestagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetV2MobileDevicePrestagesScopeResponse parses an HTTP response from a GetV2MobileDevicePrestagesScopeWithResponse call
func ParseGetV2MobileDevicePrestagesScopeResponse(rsp *http.Response) (*GetV2MobileDevicePrestagesScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MobileDevicePrestagesScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2MobileDevicePrestagesSyncsResponse parses an HTTP response from a GetV2MobileDevicePrestagesSyncsWithResponse call
func ParseGetV2MobileDevicePrestagesSyncsResponse(rsp *http.Response) (*GetV2MobileDevicePrestagesSyncsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MobileDevicePrestagesSyncsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PrestageSyncStatusV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteV2MobileDevicePrestagesIdResponse parses an HTTP response from a DeleteV2MobileDevicePrestagesIdWithResponse call
func ParseDeleteV2MobileDevicePrestagesIdResponse(rsp *http.Response) (*DeleteV2MobileDevicePrestagesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2MobileDevicePrestagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2MobileDevicePrestagesIdResponse parses an HTTP response from a GetV2MobileDevicePrestagesIdWithResponse call
func ParseGetV2MobileDevicePrestagesIdResponse(rsp *http.Response) (*GetV2MobileDevicePrestagesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MobileDevicePrestagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMobileDevicePrestageV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV2MobileDevicePrestagesIdResponse parses an HTTP response from a PutV2MobileDevicePrestagesIdWithResponse call
func ParsePutV2MobileDevicePrestagesIdResponse(rsp *http.Response) (*PutV2MobileDevicePrestagesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2MobileDevicePrestagesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMobileDevicePrestageV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetV2MobileDevicePrestagesIdAttachmentsResponse parses an HTTP response from a GetV2MobileDevicePrestagesIdAttachmentsWithResponse call
func ParseGetV2MobileDevicePrestagesIdAttachmentsResponse(rsp *http.Response) (*GetV2MobileDevicePrestagesIdAttachmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MobileDevicePrestagesIdAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FileAttachmentV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV2MobileDevicePrestagesIdAttachmentsResponse parses an HTTP response from a PostV2MobileDevicePrestagesIdAttachmentsWithResponse call
func ParsePostV2MobileDevicePrestagesIdAttachmentsResponse(rsp *http.Response) (*PostV2MobileDevicePrestagesIdAttachmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2MobileDevicePrestagesIdAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PrestageFileAttachmentV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 413:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON413 = &dest

	}

	return response, nil
}

// ParsePostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleResponse parses an HTTP response from a PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleWithResponse call
func ParsePostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleResponse(rsp *http.Response) (*PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2MobileDevicePrestagesIdAttachmentsDeleteMultipleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2MobileDevicePrestagesIdHistoryResponse parses an HTTP response from a GetV2MobileDevicePrestagesIdHistoryWithResponse call
func ParseGetV2MobileDevicePrestagesIdHistoryResponse(rsp *http.Response) (*GetV2MobileDevicePrestagesIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MobileDevicePrestagesIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2MobileDevicePrestagesIdHistoryResponse parses an HTTP response from a PostV2MobileDevicePrestagesIdHistoryWithResponse call
func ParsePostV2MobileDevicePrestagesIdHistoryResponse(rsp *http.Response) (*PostV2MobileDevicePrestagesIdHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2MobileDevicePrestagesIdHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetV2MobileDevicePrestagesIdScopeResponse parses an HTTP response from a GetV2MobileDevicePrestagesIdScopeWithResponse call
func ParseGetV2MobileDevicePrestagesIdScopeResponse(rsp *http.Response) (*GetV2MobileDevicePrestagesIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MobileDevicePrestagesIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostV2MobileDevicePrestagesIdScopeResponse parses an HTTP response from a PostV2MobileDevicePrestagesIdScopeWithResponse call
func ParsePostV2MobileDevicePrestagesIdScopeResponse(rsp *http.Response) (*PostV2MobileDevicePrestagesIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2MobileDevicePrestagesIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePutV2MobileDevicePrestagesIdScopeResponse parses an HTTP response from a PutV2MobileDevicePrestagesIdScopeWithResponse call
func ParsePutV2MobileDevicePrestagesIdScopeResponse(rsp *http.Response) (*PutV2MobileDevicePrestagesIdScopeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2MobileDevicePrestagesIdScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePostV2MobileDevicePrestagesIdScopeDeleteMultipleResponse parses an HTTP response from a PostV2MobileDevicePrestagesIdScopeDeleteMultipleWithResponse call
func ParsePostV2MobileDevicePrestagesIdScopeDeleteMultipleResponse(rsp *http.Response) (*PostV2MobileDevicePrestagesIdScopeDeleteMultipleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2MobileDevicePrestagesIdScopeDeleteMultipleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageScopeResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetV2MobileDevicePrestagesIdSyncsResponse parses an HTTP response from a GetV2MobileDevicePrestagesIdSyncsWithResponse call
func ParseGetV2MobileDevicePrestagesIdSyncsResponse(rsp *http.Response) (*GetV2MobileDevicePrestagesIdSyncsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MobileDevicePrestagesIdSyncsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PrestageSyncStatusV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2MobileDevicePrestagesIdSyncsLatestResponse parses an HTTP response from a GetV2MobileDevicePrestagesIdSyncsLatestWithResponse call
func ParseGetV2MobileDevicePrestagesIdSyncsLatestResponse(rsp *http.Response) (*GetV2MobileDevicePrestagesIdSyncsLatestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MobileDevicePrestagesIdSyncsLatestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrestageSyncStatusV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2MobileDevicesResponse parses an HTTP response from a GetV2MobileDevicesWithResponse call
func ParseGetV2MobileDevicesResponse(rsp *http.Response) (*GetV2MobileDevicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MobileDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileDeviceSearchResultsV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV2MobileDevicesIdResponse parses an HTTP response from a GetV2MobileDevicesIdWithResponse call
func ParseGetV2MobileDevicesIdResponse(rsp *http.Response) (*GetV2MobileDevicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MobileDevicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileDeviceV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePatchV2MobileDevicesIdResponse parses an HTTP response from a PatchV2MobileDevicesIdWithResponse call
func ParsePatchV2MobileDevicesIdResponse(rsp *http.Response) (*PatchV2MobileDevicesIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchV2MobileDevicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileDeviceDetailsV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2MobileDevicesIdDetailResponse parses an HTTP response from a GetV2MobileDevicesIdDetailWithResponse call
func ParseGetV2MobileDevicesIdDetailResponse(rsp *http.Response) (*GetV2MobileDevicesIdDetailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2MobileDevicesIdDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MobileDeviceDetailsGetV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteV2SsoCertResponse parses an HTTP response from a DeleteV2SsoCertWithResponse call
func ParseDeleteV2SsoCertResponse(rsp *http.Response) (*DeleteV2SsoCertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV2SsoCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2SsoCertResponse parses an HTTP response from a GetV2SsoCertWithResponse call
func ParseGetV2SsoCertResponse(rsp *http.Response) (*GetV2SsoCertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SsoCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoKeystoreResponseWithDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV2SsoCertResponse parses an HTTP response from a PostV2SsoCertWithResponse call
func ParsePostV2SsoCertResponse(rsp *http.Response) (*PostV2SsoCertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2SsoCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoKeystoreResponseWithDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV2SsoCertResponse parses an HTTP response from a PutV2SsoCertWithResponse call
func ParsePutV2SsoCertResponse(rsp *http.Response) (*PutV2SsoCertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV2SsoCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoKeystoreResponseWithDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV2SsoCertDownloadResponse parses an HTTP response from a GetV2SsoCertDownloadWithResponse call
func ParseGetV2SsoCertDownloadResponse(rsp *http.Response) (*GetV2SsoCertDownloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2SsoCertDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV2SsoCertParseResponse parses an HTTP response from a PostV2SsoCertParseWithResponse call
func ParsePostV2SsoCertParseResponse(rsp *http.Response) (*PostV2SsoCertParseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV2SsoCertParseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SsoKeystoreCertParseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetV3CheckInResponse parses an HTTP response from a GetV3CheckInWithResponse call
func ParseGetV3CheckInResponse(rsp *http.Response) (*GetV3CheckInResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3CheckInResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientCheckInV3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutV3CheckInResponse parses an HTTP response from a PutV3CheckInWithResponse call
func ParsePutV3CheckInResponse(rsp *http.Response) (*PutV3CheckInResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV3CheckInResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientCheckInV3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV3CheckInHistoryResponse parses an HTTP response from a GetV3CheckInHistoryWithResponse call
func ParseGetV3CheckInHistoryResponse(rsp *http.Response) (*GetV3CheckInHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV3CheckInHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HistorySearchResultsV1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV3CheckInHistoryResponse parses an HTTP response from a PostV3CheckInHistoryWithResponse call
func ParsePostV3CheckInHistoryResponse(rsp *http.Response) (*PostV3CheckInHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV3CheckInHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HrefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetVppAdminAccountsResponse parses an HTTP response from a GetVppAdminAccountsWithResponse call
func ParseGetVppAdminAccountsResponse(rsp *http.Response) (*GetVppAdminAccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVppAdminAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VppAdminAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVppSubscriptionsResponse parses an HTTP response from a GetVppSubscriptionsWithResponse call
func ParseGetVppSubscriptionsResponse(rsp *http.Response) (*GetVppSubscriptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVppSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VppTokenSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVppSubscriptionsIdResponse parses an HTTP response from a GetVppSubscriptionsIdWithResponse call
func ParseGetVppSubscriptionsIdResponse(rsp *http.Response) (*GetVppSubscriptionsIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVppSubscriptionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VppTokenSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
